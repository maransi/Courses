Curso ASP.NET Core 6 Fundamentals
---------------------------------

Observação: Todo parágrafo com o titulo "DEMO" diz respeito a parte prática do projeto, onde devemos
            desenvolver como uma espécie de exercício.

https://asp.mvc-tutorial.com/pt/417/introduction/what-is-mvc/

Instalações
===========

    . Instalação para as versões acima do Ubuntu 22.04

        wget https://dot.net/v1/dotnet-install.sh
        chmod +x dotnet-install.sh
        ./dotnet-install.sh -c 3.1
        ./dotnet-install.sh -c 5.0
        ./dotnet-install.sh -c 6.0
        ./dotnet-install.sh -c 7.0

        dotnet --version

        # insira as linhas abaixo no arquivo ".bashrc"
        export PATH="home/$USER/.dotnet:/home/$USER/.dotnet/tools:$PATH"
        export DOTNET_ROOT=/home/$USER/.dotnet/

        source ~/.bashrc

        sudo ln -s /home/$USER/.dotnet/dotnet /usr/bin/dotnet

        dotnet --version
        dotnet --list-runtimes
        dotnet --list-sdks

        cd /home/$USER/Download

        wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
        sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb


    Instalação das extensões do VSCode
    ----------------------------------

            C# 
            C# Extensions
            C# XML Documentation Comments
            Libman
            Docker
            vscode-icons (Opcional)
            NuGet Gallery
            VZ Dotnet File Template
            Dotnet Project References
            Auto-Using for C#
            Bracket Pair Colorization Toggler
            Error Lens
            RapidApi


        Testar
            Dotnet Solution Explorer
            Dotnet New Extension
            Net Core Extension Pack
            C# Utilities
            Nuget Package Manager
            Visual Nuget
            C# Developer Extension Package
            Auto closet tag
            C# Snippets

    Instalação do Nodejs
    --------------------

        sudo apt-get install nodejs
        sudo apt-get install npm

        ou

        sudo apt-get install curl python-software-properties
        curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
        sudo apt-get install -y nodejs
        
        node -v
        npm -v


Entendendo o ASP.NET Core 6 e ASP.NET Core 6 MVC
================================================

. Objetivos deste módulo:

    . Explicar o que é o ASP.NET Core?

    . O que será aprendido neste curso?

    . Quais ferramentas necessárias para o trabalho com o ASP.NET?

        . ASP.NET Core 6

        . Net 6

        . Visual Studio 2022

. O que é o ASP.NET Core?

    . É um framework open-source, criado pela Microsoft para a comunidade, para construir
        modernas aplicações web e serviços com .Net.

. O que podemos construir com ASP.NET Core?

    . Podemos desenvolver solução nas três camadas:

        . Server-side rendered applications

                            Http Request
              +--------------------------------------+
              |                                      |
              |                                      V
            Client                          Server ASP.NET Core
              ^                                      |
              |                                      |
              +--------------------------------------+
                    Dynmically generated HTML

        . Services

                                Http Request
                +-------------------------------------------------------+
                |                                                       |
                |                                                       V
            Consumer (Html, Angular, React, microservices, etc)     Server ASP.NET Core
                ^                                                       |
                |                                                       |
                +-------------------------------------------------------+
                                JSON

        . Client-side rendered applications

                    Initial Http Request via JQuery
              +--------------------------------------+
              |                                      |
              |                                      V
            Client                          Server ASP.NET Core
              ^                                      |  |
              |                                      |  |
              +--------------------------------------+  |
              ^     Application                         |
              |                                         |
              +-----------------------------------------+
                        JSON

. A principais caracteristicas do .NET Core é:

    . Ser "Cross-plataform framework", podendo ser usado
        no Windows, Linux e Mac, mantendo a compatibilidade em todas as plataformas.

    . Open Source

    . FAster development cycle - Continuas atualizações de versões do framework

    . Modular - Contém diversas bibliotecas que podem ser adicionadas ao projeto, 
                o repositório NUGET disponibiliza todas essas bibliotecas facilmente.

. Arquitetura do ASP.NET Core:

    +--------- ASP.NET Core Application Plataforms -------------+   +------- Other -----------------+
    |                                                           |   |                               |
    |   ASP.NET Core        ASP.NET Core        ASP.NET Core    |   |   Entity      ASP.NET Core    |
    |       MVC             Razor Pages             Blazor      |   |   Framework   Identity        |
    |                                                           |   |                               |
    +-----------------------------------------------------------+   +-------------------------------+

    +------------------------------------ ASP.NET Core Plataform -----------------------------------+
    |                                                                                               |
    |   Kestrel                         Middleware                                  Razor           |
    |                                                                                               |
    |   Model binding                   Dependency                                  Logging         |
    |                                   Injection                                                   |
    |                                                                                               |
    +-----------------------------------------------------------------------------------------------+

. ASP.NET Core Application Framework

            MVC                                         Razor Page                                    Blazor
            |                                               |                                           |
            V                                               V                                           V
    O ASP.NET Core MVC é uma                Recurso do ASP.NET Core MVC que torna a             O Blazor é uma estrutura/framework SPA 
    estrutura avançada para                 codificação de cenários focados em páginas          (Single Page Application) criada no .NET 
    a criação de aplicativos                mais fácil e mais produtiva. Responsável pela       que é executada no navegador com o WebAssembly
    Web e APIs usando o padrão              renderização das páginas Web Html
    de design Model-View-Controller

. Hisória do ASP.NET Core:

          2002                2016                  2019                    2021
    ASP.NET WebForms    ASP.NET Core 1.0    ASP.NET Core 3.0 e 3.1      ASP.NET Core 6
              \         /            \      /                    \        /  
                  2008              2017-2018                       2020
              ASP.NET MVC       ASP.NET Core2.0                 ASP.NET Core 5
                                ASP.NET Core 2.1 e 2.2

. LTS (Long-term supprt) e Versões Atuais

    . Com suporte até 3 anos após o lançamento da próxima versão.

. Cuurent release:

    . Suportado somnente 6 meses lançamento da próxima versão

. Tópicos abordados no curso:

    . ASP.NET Core

    . Applicaiton Framework

    . Entity Framework Core

    . Security

    . Testing

    . Deployment



Configurando uma aplicação ASP.NET Core 6 MVC
=============================================

Criando um novo projeto
-----------------------

    Dotnet Core
    -----------

        . Na pasta raiz de projeto execute o comando abaixo:

            dotnet new mvc SampleApplication -o sampleApplication -n sampleApplication -f net6.0

    Visual Studio Code
    ------------------

        . Na tela de "Get Started" escolha a opção "Create a New Project"

        . Na tela que se abre escolha a opção: "ASP.NET Core Web App (Model-View-Controller)" e acione "Next"

        . Na tela que se abre "Configure your new Project" informe:

            Project Name: "SampleApplication"
            Localition: "[pasta de projetos]/sampleApplication
            SolutionName: SampleApplication
            Place solution and project in the same directory: False

            Next

        . Na tela que abre "Additional information" informe:

            Framework: .Net 6.0
            Authentication Type: none
            Configure for HTTPS: True
            Enable Docker: False
            Do not use top level statements: False

            Next

    . Execute o projeto


Explorando os arquivos gerados
------------------------------

https://www.c-sharpcorner.com/article/folder-structure-of-asp-net-core-mvc-6-0-project/


    . Analisando a estrutura temos:

        wwwroot:            Diretório que contem arquivos estativos como imagens, javascripts, css, e outros;

        Areas:              Diretório que permite organizar nossa aplicação de forma que facilite a manutenção. 
                            No  nosso projeto por exemplo, teremos uma área especifica para o nosso painel de 
                            controle e ainda poderia ter uma área para acesso de cliente ou até com divisões 
                            relacionados a negócio.

        Controllers:        Como o próprio nome diz, é o diretório que contem os controllers utilizados no projeto;

        Models:             Diretório dos arquivos de models utilizados pelas Views e pelas Controllers;

        Views:              Diretorio que irá conter outros subdiretorios. Esses subdiretorios estarão 
                            relacionados diretamente com os controllers, ou seja, teremos as views de 
                            cada controller alem de views, partial views e layout utilizados;

        .csproj:            Contém os pacotes e referências do projeto.

        Program.cs:         Arquivo principal responsavel por inicializar a aplicação;

        Startup.cs:         Possui configurações de nosso projeto, tais como, definição de rotas, ativação de 
                            recursos relacionados ao ASP.NET Core ou ao projeto. A partir do .NET 6 em diante ele
                            não é mais criado no projeto.

        appsettings.json    Contém informações do projeto.
                            Podemos ter versões desse arquivo de acordo com o ambiente que o projeto atuará:

                            appsetings.json
                            appsettings.Development.json

                            O .Net tenta encontrar as informações inicialmente no "appsettings.Development.json", 
                            senão conseguir procura no "appsettings.json".

                            Local ideal para armazenar a string de conexão do bando de dados.

        Properties/launchSettings.json  Usado para armazenar configurações das informações do projeto, como porta, 
                                        ambiente, etc.
                                        Contém configurações necessárias para executar a aplicação



https://raphaelcardoso.com.br/criando-aplicacao-web-com-aspnet-core-mvc-parte-1/



. DEMO
    
    . Configurando a aplicação

        http://www.binaryintellect.net/articles/c131fc47-0c9d-496b-998a-ed65a2486896.aspx

        . Visual Studio

            . Create a New project

            . Escolha ASP.NET Core Empty

                Project Name: BhetanyPieShop
                Location: [Pasta do projeto]
                Solution Name: BhetanyPieShop
                Place Solution and Project in the same Directory: False

            . Additional Information

                Framework: .NET 6.0
                Configure for HTTPS: true
                Enable Docker: False
                Docker OS: Null
                Do not use top level statements: Null

            . Run

        . Dotnet core
            
            . Na pasta raiz do projeto execute o comando abaixo:

                dotnet new web -o bhetanyPieShop -n bhetanyPieShop -f net6.0

                dotnet clean

                dotnet restore

                dotnet build

                dotnet run



. No .Net 6 a execução começa pela classe "Program.cs"

    https://www.c-sharpcorner.com/article/how-to-add-startup-cs-class-in-asp-net-core-6-project/


        // Construi a aplicação
        var builder = WebAppication.CreateBuilder(args);
        var app = builder.Build();

        // Mapea a rota para ser chamada na linha debaixo
        app.MapGet("/", () => "Hello World!");

        // Executa a aplicação e fica escutando e respondendo alguma chamada na porta do projeto
        app.Run();  

    . No .Net 6 a classe "Startup.cs" foi suprimida

    . No .Net 6 a estrutura da classe "Program.cs" foi alterada deixando equivalente ao apresentado acima.

    . Mapeando uma Requisição

        . Na classe "Program.cs" temos a rota abaixo:

            app.MapGet("/", () => "Hello World!");
                            |
                            +----> Função anônima

        . A chamada acima resultará na URL:

            https://localhost:[porta]/



. Middlewares 

    . Desde a sua primeira versão, o ASP.NET faz uso dos middlewares. Eles foram implementados como uma 
        forma de modularizar uma aplicação ASP.NET facilmente.

    . Em termos práticos, middleware seria um trecho de código que pode ser executado no fluxo de execução 
        da aplicação. No ASP.NET os middleware são organizados em um pipeline e são executados conforme 
        uma solicitação é recebida e uma resposta enviada. A imagem abaixo ilustra este pipeline:


                    Middleware 1            Middleware 2            Middleware 3

        Request --> // Logic                
        
                        next() -----------> // Logic
                        
                                                next() -----------> // Logic

                                                                    // More logic
                                                                        |
                                            // More logic <-------------+
                                                    |
                    // More logic <-----------------+
                        |
        Response <------+

    . Cada middleware pode executar uma ação no recebimento da solicitação, chamar o próximo middleware, 
        utilizando o método next(), e executar outra ação durante o retorno da resposta. Só não é possível 
        modificar a resposta no seu retorno.

    . Dependendo da funcionalidade, o middleware pode decidir não chamar o próximo no pipeline, não invocando 
        o método next(). Por exemple, o middleware de arquivos estáticos pode retornar uma solicitação para um 
        arquivo estático e interromper o fluxo restante.

    . É possível definir middleware de diversas funcionalidades, por exemplo, no trecho de código abaixo, 
        temos oito middlewares:

        . Exception/error handling
        . HTTP Strict Transport Security Protocol
        . HTTPS redirection
        . Static file server
        . Cookie policy enforcement
        . Authentication
        . Session
        . MVC

    . Exemplo de um "Program.cs"

        public void Configure(IApplicationBuilder app)
        {
            if (env.IsDevelopment())
            {
                // Quando executado em desenvolvimento:
                //   Utiliza Developer Exception Page para reportar erros.
                //   Utiliza Database Error Page para reportar erros do banco.
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                // Quando não estiver em produção:
                //   Habilita o middleware Exception Handler Middleware para pegar os erros.
                //   Utiliza o middleware que habilita o 
                //       HTTP Strict Transport Security Protocol (HSTS)
                app.UseExceptionHandler("/Error");
                app.UseHsts();
            }

            // Utiliza o middleware HTTPS Redirection que redireciona solicitações HTTP para HTTPS.
            app.UseHttpsRedirection();

            // Retorna arquivos estáticos e interrompe o pipeline.
            app.UseStaticFiles();

            // Utiliza o middleware Cookie Policy, que está em conformidade com 
            // as regras do GDPR (General Data Protection Regulation).
            app.UseCookiePolicy();

            // Autentica antes de utilizar os recursos.
            app.UseAuthentication();

            // Se o aplicativo utiliza sessão, chama o middleware Session depois do middleware 
            // Cookie Policy e antes do middleware MVC.
            app.UseSession();

            // Adiciona MVC ao pipeline da solicitação
            app.UseMvc();
        }


    https://www.treinaweb.com.br/blog/asp-net-core-compreendendo-addmvc-addmvccore-addcontrollers-addcontrollerswithviews-e-addrazorpages

    . "AddControllerWithViews()" carrega os recursos:

        . MvcCore;
        . ApiExplorer;
        . Authorization;
        . FormatterMappings;
        . Views;
        . RazorViewEngine;
        . TagHelper;
        . Data Annotations;
        . Json Formatters;
        . CORS.

        . O único que foi removido é o Razor Pages. Desta forma, uma aplicação ASP.NET MVC que não faça 
            uso do Razor Pages deve optar por este método.


    https://rodolfofadino.com.br/configurando-o-middleware-de-staticfiles-com-net-6-a6f61bdfdfc7

    . "UseStaticFiles()" para utilizarmos arquivos estáticos "css, jpeg, js" precisamos incluir este método 
        no "Program.cs". A partir dai podemos criar a pasta "wwwroot" na raiz do nosso projeto e adicionar
        qualquer arquivo estático nele e começar trabalhar com eles.

    . "app.Environment.IsDevelopment()" para entender melhor o funcionamento do método "IsDevelopment()" revise as
        aulas "Aula 71. Configurações de Debug" e "Aula 73.  Entendendo o LaunchSettings" do curso 
        "Fundamentos ASP.NET 6 - Balta"; que fala sobre o uso da variável ambiental "ASPNETCORE_ENVIRONMENT"

    . "MapDefaultControllerRoute()" 


    . Como é possível notar, no ASP.NET todos os middlewares são definidos no método Configure no padrão Use* 
        seguindo do nome do middleware. Neste método também é possível adicionar middlewares customizados, 
        utilizando os métodos Use ou Run. A diferença entres eles é que os middlewares definidos com Run 
        são middlewares “finais”, após eles, nenhum outro middleware é chamado.

    . Para compreender a ordem de execução dos middlewares no pipeline, vamos definir alguns middlewares simples:

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.Use(async (context, next) =>
            {
                await context.Response.WriteAsync("Primeiro middleware (antes)");
                await next();
                await context.Response.WriteAsync("Primeiro middleware (depois)");
            });

            app.Use(async (context, next) =>
            {
                await context.Response.WriteAsync("Segundo middleware (antes)");
                await next();
                await context.Response.WriteAsync("Segundo middleware (depois)");
            });

            app.Run(async (context) =>
            {
                await context.Response.WriteAsync("Middleware final");
            });
        }

        . No exemplo acima os middlewares estão sendo definidos como métodos anônimos, em um artigo futuro mostrarei 
            as formas de declará-los.

        . Neste ponto o importante é que sabia que os middlewares definidos com Use recebem dois parâmetros: 
            a instância de um objeto HttpContext e a instância do delegate RequestDelegate, que aponta para o 
            próximo middleware no pipeline.

        . O resultado do código acima será algo assim:

            Primeiro middleware (antes)
            Segundo middleware (antes)
            Middleware final
            Segundo middleware (depois)
            Primeiro middleware (depois)

    . Criando novo fluxo final/Condicional

        . Com os métodos "Map" ou "MapWhen" é possível definir um novo fluxo final para o pipeline. O método Map permite 
            especificar um middleware que será invocado de acordo com o caminho da solicitação. Já o MapWhen possui 
            mais poder porque o padrão pode ser definido utilizando o objeto HttpContext:

        . Exemplo:

            public void Configure(IApplicationBuilder app, IHostingEnvironment env)
            {
                app.Use(async (context, next) =>
                {
                    await context.Response.WriteAsync("Primeiro middleware (antes)");
                    await next();
                    await context.Response.WriteAsync("Primeiro middleware (depois)");
                });

                app.Use(async (context, next) =>
                {
                    await context.Response.WriteAsync("Segundo middleware (antes)");
                    await next();
                    await context.Response.WriteAsync("Segundo middleware (depois)");
                });

                app.Map("/foo",
                    (a) => {
                        a.Use(async (context, next) => {
                            await context.Response.WriteAsync("Middleware para o caminho /foo (antes) ");
                            await next();
                            await context.Response.WriteAsync("Middleware para o caminho /foo (depois) ");
                        });
                });

                app.MapWhen(context => context.Request.Path.StartsWithSegments("/bar"), 
                    (a) => {
                        a.Use(async (context, next) => {
                            await context.Response.WriteAsync("Middleware para o caminho /bar (antes) ");
                            await next();
                            await context.Response.WriteAsync("Middleware para o caminho /bar (depois) ");
                        });
                });

                app.Run(async (context) =>
                {
                    await context.Response.WriteAsync("Middleware final");
                });
            }

        . Para evitar o problema do uso do next() nos middlewares definidos em Map e MapWhen, é possível 
            utilizar o método UseWhen, que funciona da mesma forma que o MapWhen, com a diferença que após 
            executá-lo o fluxo do pipeline retorna ao caminho padrão:

            public void Configure(IApplicationBuilder app, IHostingEnvironment env)
            {
                app.Use(async (context, next) =>
                {
                    await context.Response.WriteAsync("Primeiro middleware (antes)");
                    await next();
                    await context.Response.WriteAsync("Primeiro middleware (depois)");
                });

                app.Use(async (context, next) =>
                {
                    await context.Response.WriteAsync("Segundo middleware (antes)");
                    await next();
                    await context.Response.WriteAsync("Segundo middleware (depois)");
                });

                app.Map("/foo",
                    (a) => {
                        a.Use(async (context, next) => {
                            await context.Response.WriteAsync("Middleware para o caminho /foo (antes) ");
                            await next();
                            await context.Response.WriteAsync("Middleware para o caminho /foo (depois) ");
                        });
                });

                app.UseWhen(context => context.Request.Path.StartsWithSegments("/bar"), 
                    (a) => {
                        a.Use(async (context, next) => {
                            await context.Response.WriteAsync("Middleware para o caminho /bar (antes) ");
                            await next();
                            await context.Response.WriteAsync("Middleware para o caminho /bar (depois) ");
                        });
                });

                app.Run(async (context) =>
                {
                    await context.Response.WriteAsync("Middleware final");
                });
            }

    . Definindo uma classe “Middleware”

        . No dia a dia você irá definir middlewares mais complexos, então o ideal é defini-los em uma classe a parte:

            public class MyMiddleware
            {
                private readonly RequestDelegate _next;

                public MyMiddleware(RequestDelegate next)
                {
                    _next = next;
                }

                public async Task Invoke(HttpContext httpContext)
                {
                    await httpContext.Response.WriteAsync("Chamou nosso middleware (antes)");
                    await _next(httpContext);
                    await httpContext.Response.WriteAsync("Chamou nosso middleware (depois)");
                }
            }

        . A classe “Middleware” obrigatoriamente precisa ter a estrutura acima. Receber no construtor um 
            objeto RequestDelegate e definir um método Invoke que recebe por parâmetro um objeto HttpContext.

        . Esta classe pode ser definida no pipeline utilizando o método UseMiddleware:

            public void Configure(IApplicationBuilder app, IHostingEnvironment env)
            {
                app.UseMiddleware<MyMiddleware>();
            }


        . Mas o recomendado é definir um método de extensão para a interface IApplicationBuilder:

            public static class MyMiddlewareExtensions
            {
                public static IApplicationBuilder UseMyMiddleware(this IApplicationBuilder builder)
                {
                    return builder.UseMiddleware<MyMiddleware>();
                }
            }

        . E utilizá-lo no Configure:

            public void Configure(IApplicationBuilder app, IHostingEnvironment env)
            {
                app.UseMyMiddleware();
            
                app.Run(async (context) =>
                {
                    await context.Response.WriteAsync("Olá Mundo!");
                });
            }

        . Mais detalhes podem ser observados no link abaixo:

            https://www.treinaweb.com.br/blog/criando-um-middleware-customizado-para-asp-net-core
            https://exceptionnotfound.net/middleware-in-asp-dotnet-6-intro-and-basics/


. DEMO

    . Acesse a classe "Program.cs" do seu projeto e acrescente as linhas abaixo:

            var builder = WebAppication.CreateBuilder(args);

            builder.Services.AddControllersWithViews();              // Linha inserida

            var app = builder.Build();

            app.UseStaticFiles();                                   // Linha inserida

            if ( app.Environment.IsDevelopment() )                  // If inserido
            {
                app.UseDeveloperExceptionPage();                        
            }

            app.MapDefaultControllerRoute();                        // Linha inserida

            app.MapGet("/", () => "Hello World!");

            app.Run();  

    . Desenvolva o tutorial abaixo :

        https://macoratti.net/21/08/aspnc_authmid1.htm


Criando a primeira página
=========================


. O que aprenderemos nesse módulo:

    . Introdução ao padrão MVC

    . Criação de um model e um repository

    . Criação de um controller

    . Adicionar uma view

    . Estilizar a view

. Como funciona o MVC C#?

    . O MVC é um padrão de arquitetura de software. O MVC sugere uma maneira para você pensar na divisão de responsabilidades, 
        principalmente dentro de um software web.

    . O princípio básico do MVC é a divisão da aplicação em três camadas: a camada de interação do usuário (view), a camada de 
        manipulação dos dados (model) e a camada de controle (controller).

    . Com o MVC, é possível separar o código relativo à interface do usuário das regras de negócio, o que sem dúvida traz muitas 
        vantagens que veremos mais à frente.

    . Quando falamos sobre o MVC, cada uma das camadas apresenta geralmente as seguintes responsabilidades:

        . Model: A responsabilidade dos models é representar o negócio. Também é responsável pelo acesso e manipulação dos dados 
            na sua aplicação.

        . View: A view é responsável pela interface que será apresentada, mostrando as informações do model para o usuário.

        . Controller: É a camada de controle, responsável por ligar o model e a view, fazendo com que os models possam ser 
            repassados para as views e vice-versa.

    . MVC Pattern



                                 Request
                                    |
                                    | Levanta uma classe Controller "https://localhost:[porta]/clientes
                                    |
                                    V
                                controller  (Tem um metodo de ação publico)
                                ----------
                                  |     |  
                      +-----------+     +-----------------+
                      |                                   |  
                      |                                   |  
               Update |                                   | Dispara 
                      |                                   |  
                      |                                   |  
                      |                                   |  
                      V                                   V
                    View <----------------------------- Model
                    ----      Obtem dados do Model      -----
                      |       (EF, Dapper, ADO.NET)
                      |
                      |
                      | (Razor Page)
                      v
                    Response

. Criando o Model e o Repository

    . Ao criar um projeto MVC são criadas as pastas na estrutura do projeto:

        Controllers:        Como o próprio nome diz, é o diretório que contem os controllers utilizados no projeto;

        Models:             Diretório dos arquivos de models utilizados pelas Views e pelas Controllers;
                            Representa os objetos de domínio de dados e a lógica de acesso aos dados (DTOs, BOs, DAOs)

        Views:              Diretorio que irá conter outros subdiretorios. Esses subdiretorios estarão 
                            relacionados diretamente com os controllers, ou seja, teremos as views de 
                            cada controller alem de views, partial views e layout utilizados;

    . Haverá um conjunto padrão de classes para persistir as informações das requisições:

        . Model

        . Repository

    . Exemplo de uma classe Model

        public class Pie
        {
            public int PieId { get; set; }

            public string Name { get, set; }

            pulbic string? ShorDescription { get, set; }

            public bool IStock { get, set; }

            public Category Category { get, set; }
        }

    . Os repositorios permitem aos nosso codígos utilizem objetos sem saber com são persistidos. Criamos uma interface (contrato) 
        e e suas implementações com a persistência desses objetos.

        . Exemplo de uma interface para Repository:

            public interface IPieRepository
            {
                IEnumerable<Pie> AllPies { get; }

                Pie GetPieById( int pieId );
            }

        . Exemplo da implementação da classe Repository:

            public class MockPeiRepository: IPieRepository
            {
                public IEnumerable<Pie> AllPies
                {
                    get { ... }
                }

                public Pie GetPieById( in pieId )
                {
                    ...
                }
            }
    
    . Registrando o Repository

        Program.cs

            var builder = WebApplication.CreateBuilder( args );

            builder.Services.AddScoped<IPieRepository, MockPieRepository>();

            var app = builder.Build();
        
    . Service Locator

        . SL diz como resolver as depências criadas 

            . Funciona como um dê-para

        . Já temos um pronto no ASP.NET (build in the box)

            . Podemos utilizar outros 

                // Assim
                builder.Services.AddTransient<IPieRepository, MockPieRepository>();

                // ou
                builder.Services.AddScoped<IPieRepository, MockPieRepository>();

                // ou
                builder.Services.AddSingleton<IPieRepository, MockPieRepository>();

    . AddTransient, AddScoped, AddSingleton

        . AddTransient

            builder.Services.AddTransient<IPieRepository, MockPieRepository>();

                . Sempre cira uma nova instância do objeto

                . Ideal para cenários onde queremos sempre um novo objeto.

        . AddScoped

            builder.Services.AddScoped<IPieRepository, MockPieRepository>();

                . Cria um objeto por transação/requisição

                . Se você chamar 2 ou mais serviços que dendem do mesmo objeto, a mesma instância será utilizada

                . Ideal para cenários onde queremos apenas um objeto por requisição (banco).

        . AddSingleton

            . Cria um objeto quando a aplicação inicia e apaga da sessão quando a aplicação termina.

                builder.Services.AddSingleton<IPieRepository, MockPieRepository>();

            . Mantém este objeto na memória até a aplicação para ou reiniciar 

            . Sempre devolve a mesma instância deste objeto, com os mesmos valores.

            . Padrão que visa garantir apenas um instância de um objeto para aplicão toda

            . Um bom exemplo são as configurações

                . Uma vez carregadas, ficam até a aplicação reiniciar.

            . Cuidado.

        . Quadro comparativo

            Tipo	    Mesma requisição	Requisições diferentes
            ----        ----------------    ----------------------
            Singleton	Mesma instância	    Mesma instância
            Scoped	    Mesma instância	    Nova instância
            Transient	Nova instância	    Nova instância


        . AddDbContext

            . Item especial do tipo Scoped

                builder.Services.AddDbContext< BlogDataContext>( x => useSqlServer( connStr ));

            . Utilizado exclusivamente com o EF

            . Garante que a conexão só dura até o fim da requisição

    . DEMO

        . Crie na estrutura raiz do projeto a pasta "Models" e crie as classes abaixo:

            namespace bethanysPieShop.Models;

            public class Pie
            {
                public int PieId { get; set; }

                public string Name { get; set; } = string.Empty;

                public string? ShortDescription
                {
                    get; set;
                }

                public string? LongDescription
                {
                    get; set;
                }

                public string? AllergyInformation { get; set; }

                public decimal Price { get; set; }

                public string? ImageUrl { get; set; }

                public string? ImageThumbnailUrl { get; set; }

                public bool IsPieOfTheWeek { get; set; }

                public int CategoryId { get; set; }

                // public Category Category { get; set; }

                public bool InStock
                {
                    get; set;
                }

                public Category Category
                {
                    get; set;
                } = default!;
            }




            namespace bethanysPieShop.Models;

            public class Category
            {
                public int CategoryId { get; set; }

                public string CategoryName { get; set; } = string.Empty;

                public string? Description { get; set; }

                public List<Pie>? Pies { get; set; }
            }

        . Crie as classes e interfaces abaixo na mesma pasta "Models":

            namespace bethanysPieShop.Models;

            public interface IPieRepository
            {
                IEnumerable<Pie> AllPies { get; }

                IEnumerable<Pie> PiesOfTheWeek{ get; }

                Pie? GetPieById( int pieId );
            }




            namespace bethanysPieShop.Models;

            public interface ICategoryRepository
            {
                IEnumerable<Category> AllCategories{ get; }
            }

        . Crie a classe de implementação "MockCategoryRepository" dentro da pasta Models:

            namespace bethanysPieShop.Models;

            public class MockCategoryRepository : ICategoryRepository
            {
                public IEnumerable<Category> AllCategories => new List<Category>{
                                new Category{ CategoryId = 1, CategoryName = "Fruit pies", Description = "All fruity pies"},
                                new Category{ CategoryId = 2, CategoryName = "Cheese cakes", Description = "Cheesy all the way"},
                                new Category{ CategoryId = 3, CategoryName = "Seasonal pies", Description = "Get in the mood for a seasonal pie"}
                            };
            }



            namespace bethanysPieShop.Models;

            public class MockPieRepository : IPieRepository
            {

                private readonly ICategoryRepository _categoryRepository = new MockCategoryRepository();

                public IEnumerable<Pie> AllPies =>
                    new List<Pie>
                    {
                        new Pie {PieId = 1, Name="Strawberry Pie", Price=15.95M, ShortDescription="Lorem Ipsum", LongDescription="Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = _categoryRepository.AllCategories.ToList()[0],ImageUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/fruitpies/strawberrypie.jpg", InStock=true, IsPieOfTheWeek=false, ImageThumbnailUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/fruitpies/strawberrypiesmall.jpg"},
                        new Pie {PieId = 2, Name="Cheese cake", Price=18.95M, ShortDescription="Lorem Ipsum", LongDescription="Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = _categoryRepository.AllCategories.ToList()[1],ImageUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/cheesecake.jpg", InStock=true, IsPieOfTheWeek=false, ImageThumbnailUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/cheesecakesmall.jpg"},
                        new Pie {PieId = 3, Name="Rhubarb Pie", Price=15.95M, ShortDescription="Lorem Ipsum", LongDescription="Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = _categoryRepository.AllCategories.ToList()[0],ImageUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/fruitpies/rhubarbpie.jpg", InStock=true, IsPieOfTheWeek=true, ImageThumbnailUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/fruitpies/rhubarbpiesmall.jpg"},
                        new Pie {PieId = 4, Name="Pumpkin Pie", Price=12.95M, ShortDescription="Lorem Ipsum", LongDescription="Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = _categoryRepository.AllCategories.ToList()[2],ImageUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/seasonal/pumpkinpie.jpg", InStock=true, IsPieOfTheWeek=true, ImageThumbnailUrl="https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/seasonal/pumpkinpiesmall.jpg"}
                    };

                public IEnumerable<Pie> PiesOfTheWeek
                {
                    get
                    {
                        return AllPies.Where(p => p.IsPieOfTheWeek);
                    }
                }

                public Pie? GetPieById(int pieId) => AllPies.FirstOrDefault(p => p.PieId == pieId);

                public IEnumerable<Pie> SerachPies(string searchQuery)
                {
                    throw new NotImplementedException();
                }
            }


        . Acrescente as linhas abaixo na classe "Program.cs":

            using bethanysPieShop.Models;           // Linha inserida

            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddScoped<ICategoryRepository, MockCategoryRepository>();      // Linha inserida
            builder.Services.AddScoped<IPieRepository, MockPieRepository>();                // Linha inserida
            ...            


    . Criando o Controller

        . Um controlador determina qual resposta enviar de volta para um usuário quando um usuário faz uma solicitação de navegador. 
            Um controlador é apenas uma classe (por exemplo, uma classe Visual Basic ou C#). O exemplo ASP.NET aplicativo MVC inclui 
            um controlador chamado HomeController.cs localizado na pasta "Controllers".

        . Exemplo básico de um "Controller":


                                +----> Tem o padrão "Controller" no nome da classe
                                |
                            ----------
            public class PieController: Controller          // Normalmente armazenadas na pasta "Controllers"
            {                               |
                                            +---> Extende a class "Controller
                public ViewResult Index()
                {           |
                            +-------------> ViewResult é um subtipo de ActionResult, neste caso o único retorno possível seria uma "View()".
                                            Se fosse a classe genérica "ActionResult" o retorno poderia ser além de uma "ViewResult" também:

                                            PartialViewResult, ContentResult, etc.

                    return View();      // Executará o objeto "Index.cshtml" da pasta "Views/Pie"
                }
            }

        . "ActionResult" é uma classe abstrata, que é extendida pela classe "ViewResult", uma sub-classe:

                                    ActionResult
                                         ^
                                         v
                                         |      <<extend>>
                                         |
                                    ViewResult



                            ActionResult                    public ActionResult DynamicView(bool IsHtmlView)
                            ------------                    {
                                ^                               if (IsHtmlView)
                                |   <<deriva>>                      return View(); // returns simple ViewResult
                +---------------+---------------+                else
                |               |               |                   return Json(); // returns JsonResult view
            ViewResult      PartialView     Content          }
                              Result        Result


        . A classe "ActionResult" é uma classe abstrata que possui diversos sub tipos e temos uma classe apropriada para
            cada tipo de retorno que é derivada dessa classe. Abaixo vemos os principais tipos de retorno:
            
            Classe derivada         Descrição                                           Exemplo
            de ActionResult         ---------                                           -------
            ---------------

            ViewResult              Retorna uma View                                    return View();
                                                                                        return View("Nome da View", object-model);

            PartialViewResult       Retorna uma partial View, que pode ser inserida     return PartialView();
                                    em outra View. (UserControl)                        return PartialView("Nome da PartialView", objeto-model);

            RedirectResult          Redireciona para uma Url especifica                 return Redirect("http://www.site.com");

            RedirectToRoutResult    Redireciona para uma outra Action                   return RedirectToAcion"("Outra_Action", "Outro_Controller");
                                                                                        return RedirectTo-Route("Nome_da_rota");

            ContentResult           Retorno texto puro                                  return Context("Texto","textoPlano");

            JsonResult              Retorna um objecto no format JSON                   return Json(objeto);

            JavaScriptResult        Retorna código Javascript que pode ser executado    return Javascript("$('#divTxt').html('Javascript teste');");
                                    no cliente

            FileResult              Retorna dados binários (arquivo em disco, por ex)   return File(@"/dados/teste.pdf","applicationn/pdf");

            EmptyResult             Não retorn nada, igual a void                       return EmptyResult();

            HttpNotFoundResult      Retorna uma página não encontrada                   - x -

            HttpStatusCodeResult    HTTP definido pelo desenvolvedor                    Retorna um código de estado

            FileStreamResult        Envia um objeto Stream para o Navegador             - x -

            HttpUnauthorizedResult  Envia código de resposta HTTP 401 para o navegador  - x -

        . "PieController" reformulado:

            public class PieController: Controller
            {
                private readonly IPieRepository _pieRepository;

                public PieController( IPieRepository pieRepository )
                {
                    _pieRepository = pieRepository;
                }

                public ViewResult List()
                {
                    return View( _pieRepository.Pies );
                }
            }

    . DEMO

        . Crie a pasta "Controllers" e dentro dela a classe abaixo:

            using bethanysPieShop.Models;
            using Microsoft.AspNetCore.Mvc;

            namespace bethanysPieShop.Controllers;

            public class PieController : Controller
            {

                private readonly IPieRepository _pieRepository;
                private readonly ICategoryRepository _categoryRepository;

                public PieController(IPieRepository pieRepository,
                                        ICategoryRepository categoryRepository)
                {
                    _pieRepository = pieRepository;
                    _categoryRepository = categoryRepository;
                }


                public IActionResult List()
                {
                    return View(_pieRepository.AllPies);
                }
            }

    . Criando a View

        . O que é uma View:

            . Uma view é um template com a extensão *.cshtml que contém marcações HTML.

            . Usa Razor code, mix de C# com HTML.

            . Recebe um pouco de lógica ( condições, loop, tag helpers e view components ).
            
            . São HTML, CSS e Javascript.

            . Podem executar funções do C# com Razor (View Engine).

            . Podem interagir com objetos enviados a ela.

            . São processadas no servidor e enviadas para o cliente.

            . As Views podem receber parâmetros como variáveis ou tipos complexos.

            . Estes parâmetros são recebidos através da sintaxe @Model

            . Se um parâmetro diferente do esperado for enviado a view, causará um erro.

                . Este erro só ocorrerá em tempo de execução.

            . Além dados fisos, a view pode receber dados de outras formas.

        . Na estrutura do projeto, cada controller terá uma respectiva pasta dentro da pasta "Views", onde armazenamos os templates "*.cshtml". 

            Controllers/PieController   =>  Views/Pie
                        ---                       ---
                         |                         ^
                         |                         |
                         +-------------------------+

            . Por exemplo:

                public class PieController: Controller
                {

                    public ViewResult Index()   // Action
                    {
                        return View();          // View to show: Views/Pie/Index.cshtml
                    }
                }

            . O template "Views/Pie/Index.cshtml" poderia ser representado pelo código abaixo:

                <!DOCTYPE html>

                <html>
                    <head>
                        <title>Index</head>
                    </head>

                    <body>
                        <div>Welcome to Bethany´s Pie Shop<</div>
                    </body>
                </html>

            . Utilizando "ViewBag" do Controller

                public class PieController: Controller
                {

                    public ViewResult Index()   
                    {
                        ViewBag.Message = "Welcome to Bethany´s Pie Shop";          // Linha inserida       --------------------------------+
                                                                                                                                            |
                        return View();                                                                                                      |
                    }                                                                                                                       |
                }                                                                                                                           |
                                                                                                                                            |
                                                                                                                                            |
                . ViewBag é um objeto dinâmico que podemos colocar dados do controller                                                      |
                                                                                                                                            |
                . Dessa forma podemos fazer algumas mudança no nosso templace "cshtml" deixando-o mais dinâmico:                            |
                                                                                                                                            |
                    <!-- De -->                                                                                                             |
                    <body>                                                                                                                  |
                        <div>Welcome to Bethany´s Pie Shop<</div>                                                                           |
                    </body>                                                                                                                 |
                                                                                                                                            |
                                                                                                                                            |
                    <!-- Para -->                                                                                                           |
                    <body>                                                                                                                  |
                        <div>                                                                                                               |
                            @ViewBag.Message    <-------------------------------------------------------------------------------------------+
                        <</div>
                    </body>


                . Mesclando ViewBag com Razor

        . Razor Page

            . O Razor nada mais é do que a linguagem C#, ou VB.NET, trabalhando em conjunto com código HTML, para a construção das suas páginas ASP.NET.

            . Exemplo:

                @ViewBg.Message           ------------> Usando ViewBag in Razor

                <p>@DateTime.Now</p>      ------------> Apresentado a data no código Razor

                @{
                    var message = "Welcome to Bethany´s Pie Shp";   -----> Usando um bloco de códigos
                }

                <h3>@message</h3>

            . Chamando uma View fortemente tipada

                // PieController
                public class PieController: Controller
                {
                    public ViewResult List()
                    {
                        return View( _pieRepository.AllPies );
                    }
                }


                // Views/Pie/List.cshtml
                @model IEnumerable<Pie>

                <!DOCTYPE html>

                <html>
                    <body>
                        <div>
                        
                            @foreach( var pie in Model )
                            {
                                <div>
                                    <h2>@pie.Name </h2>
                                    <h3>@pie.Price.ToString("c") </h3>
                                    <h4>@pie.Category.CategoryName </h4>
                                </div>
                            }
                        </div>
                    </body>
                </html>

    . DEMO

        . Crie a pasta "Views/Pie" e dentro dela a view abaixo com a extensão "cshtml" com o nome "List.cshtml":

            @model IEnumerable<bethanysPieShop.Models.Pie>

            <!DOCTYPE html>

            <html>

            <head>
                <meta name="viewport" content="width=device-width" />
                <title>Bethany´s Pie Shop</title>
            </head>

            <body>
                <h1>@ViewBag.CurrentCategory</h1>


                @foreach( var pie in Model )
                {
                <div>
                    <h2>@pie.Name </h2>
                    <h3>@pie.Price.ToString("c") </h3>
                    <h4>@pie.Category.CategoryName </h4>
                </div>
                }

            </body>

            </html>

        . Acrescente as linhas abaixo na classe "PieController":

            using Microsoft.AspNetCore.Mvc;

            namespace bethanysPieShop.Controllers;

            public class PieController: Controller
            {

                ...

                public IActionResult List()
                {
                    ViewBag.CurrentCategory = "Cheese cakes";       // Linha inserida

                    return View( _pieRepository.AllPies );
                }
            }


        . Levante o projeto e execute a rota abaixo no navegador:

            https://localhost:[porta]/pie/list


        . Crie a pasta "ViewModels" e dentro dela a classe "PieListViewModel.cs" como abaixo:

            using bethanysPieShop.Models;

            namespace bethanysPieShop.ViewModels;

            public class PieListViewModel
            {
                public IEnumerable<Pie> Pies { get; }

                public string? CurrentCategory { get; }

                public PieListViewModel(IEnumerable<Pie> pies, string? currentCategory)
                {
                    Pies = pies;

                    CurrentCategory = currentCategory;
                }
            }

        . Altere o código do método "PieController.List" como abaixo:

            using betahnysPieShop.ViewModels;   // Linha inserida
            ...
            public IActionResult List()
            {
                // ViewBag.CurrentCategory = "Cheese cakes";       // Linha inserida

                // return View( _pieRepository.AllPies );

                PieListViewModel piesListViewModel = new PieListViewModel( _pieRepository.AllPies, "Cheese cakes");     // Linha inserida

                return View( piesListViewModel );           // Linha inserida
            }
            ...

        . Altere a view "Views/Pie/List.cshml" como abaixo:

            @model bethanysPieShop.ViewModels.PieListViewModel      <!-- Linha alterada -->

            <!DOCTYPE html>

            <html>

            <head>
                <meta name="viewport" content="width=device-width" />
                <title>Bethany´s Pie Shop</title>
            </head>

            <body>
                <h1>@Model.CurrentCategory</h1>         <!-- Linha alterada -->


                @foreach( var pie in Model.Pies )       <!-- Linha alterada -->
                {
                <div>
                    <h2>@pie.Name </h2>
                    <h3>@pie.Price.ToString("c") </h3>
                    <h4>@pie.Category.CategoryName </h4>
                </div>
                }

            </body>

            </html>

            @model bethanysPieShop.ViewModels.PieListViewModel             <!-- Linha alterada -->

            <!DOCTYPE html>

            <html>
            <head>
                <meta name="viewport" content="width=device-width" />
                <title>Bethany´s Pie Shop</head>
            </head>

            <body>
                <h1>@Model.CurrentCategory</h1>                             <!-- Linha alterada -->

                        
                @foreach( var pie in Model )
                {
                    <div>
                        <h2>@pie.Name </h2>
                        <h3>@pie.Price.ToString("c") </h3>
                        <h4>@pie.Category.CategoryName </h4>
                    </div>
                  }

            </body>
            </html>

        . Levante o projeto e execute a rota abaixo no navegador:

            https://localhost:[porta]/pie/list


    . Usando o _Layout.cshtml

        . Funciona como o slide mestre do power point

        . Você define um padrão que será utilizado por toda a aplicação.

        . Toda a página permance, mudando apensas o "miolo"

        . A regição que irá mudar é identificada pelo @Renderbody()

        . Podemos ter vários layouts

            . Um para login

            . Um para setor administrativo

            . Um para a loja.

        . Acessando a pasta "Views/Shared" encontramos o arquivo _Layout.cshtml.

        . Exemplo de _Layout.cshtml

            <!DOCTYPE html>

            <html>
                <head>
                    <title>Index</head>
                </head>

                <body>
                    <div>
                        @RenderBody()
                    </div>
                </body>
            </html>

        . O @RenderBody() é o responsável pela montagem da página.

        . Especificando um layout para a View:

            @{
                Layout = "_Layout";                                 <!-- Local para associar o arquivo _Layout.cshtml -->
            }

            @model BethanysPieShop.ViewModels.PieListViewModel             

            <!DOCTYPE html>

            <html>
            <head>
                <meta name="viewport" content="width=device-width" />
                <title>Bethany´s Pie Shop</head>
            </head>

            <body>
                <h1>@Model.CurrentCategory</h1>                             

                        
                @foreach( var pie in Model )
                {
                    <div>
                        <h2>@pie.Name </h2>
                        <h3>@pie.Price.ToString("c") </h3>
                        <h4>@pie.Category.CategoryName </h4>
                    </div>
                    }

            </body>
            </html>
            
    . DEMO

        . Atividades:

            . Adicionaremos um template layout

            . Criaremos o arquivo "ViewStart"

            . Adicionaremos o arquivo "ViewImports"

        . Crie a pasta "Shared" dentro da pasta Views 

        . Crie o arquivo "_Layout.cshtml" como abaixo na pasta "Views/Shared". 
            IMPORTANTE: No Visual Studio dê um clique direito sobre a pasta "Shared" / Add New Item / Installed / C# / ASP.NET Core / Web / Razor Layout

            <!DOCTYPE html>

            <html>
                <head>
                    <meta name="viewport" content="width=device-width" />
                    <title>@ViewBag.Title</title>
                </head>

                <body>
                    <div>
                        @RenderBody()           --------------------------------------------------------------------------------------------------------------------+
                    </div>                                                                                                                                          |
                </body>                                                                                                                                             |
            </html>                                                                                                                                                 |   Substituirá por esse
                                                                                                                                                                    |   código
        . Altere a view "Views/Pie/List.cshml" como abaixo, retirando todo código de responsabilidade do _Layout.cshtml deixando somente o miolo:                   |
                                                                                                                                                                    |
            @model bethanysPieShop.ViewModels.PieListViewModel              <---------------------------------------------------------------------------------------+

            @{
                Layout = "_Layout";
            }
            <h1>@Model.CurrentCategory</h1>                             

                    
            @foreach( var pie in Model.Pies )
            {
                <div>
                    <h2>@pie.Name </h2>
                    <h3>@pie.Price.ToString("c") </h3>
                    <h4>@pie.Category.CategoryName </h4>
                </div>
            }
            
        . Levante o projeto e execute a rota abaixo no navegador:

            https://localhost:[porta]/pie/list


        . Trabalhando com _ViewStart:

            . Retire o trecho de código abaixo da view "Views/Pie/List.cshml":

                @model BethanysPieShop.ViewModels.PieListViewModel    

                <!--                                                    |
                                                                        |
                @{                                                      |
                    Layout = "_Layout"                                  +-----------------------------------------------------------------------------------------------+
                }                                                       |                                                                                               |
                -->                                                     |                                                                                               |                                                                                           
                                                                                                                                                                        |
                <h1>@Model.CurrentCategory</h1>                                                                                                                         |
                                                                                                                                                                        |
                                                                                                                                                                        |
                @foreach( var pie in Model )                                                                                                                            |
                {                                                                                                                                                       |
                    <div>                                                                                                                                               |
                        <h2>@pie.Name </h2>                                                                                                                             |
                        <h3>@pie.Price.ToString("c") </h3>                                                                                                              |   Transportado 
                        <h4>@pie.Category.CategoryName </h4>                                                                                                            |   para o arquivo
                    </div>                                                                                                                                              |   "Views/_ViewStart.cshtml
                }                                                                                                                                                       |
                                                                                                                                                                        |
            . Crie o arquivo "_ViewStart.cshtml" como abaixo na pasta "Views".                                                                                          |
                IMPORTANTE: No Visual Studio dê um clique direito sobre a pasta "Views" / Add New Item / Installed / C# / ASP.NET Core / Web / Razor View Start         |   
                                                                                                                                                                        |
                                                                                                                                                                        |
                @{                                                                                                                                                      |
                    Layout = "_Layout";         <-----------------------------------------------------------------------------------------------------------------------+
                }

            . Levante o projeto e execute a rota abaixo no navegador:

                https://localhost:[porta]/pie/list

            . No navegador acesse o "Código fonte" da página e verifique o trecho HTML se está parecido com a do template "_Layout.cshtml"

        . Trabalhnado com "ViewImports":

            . Crie o arquivo "_ViewImports.cshtml" como abaixo na pasta "Views".                                                                 
                IMPORTANTE: No Visual Studio dê um clique direito sobre a pasta "Views" / Add New Item / Installed / C# / ASP.NET Core / Web / Razor View Imports


                @using bethanysPieShop.Models                   --------------------------------------------+
                @using bethanysPieShop.ViewModels                                                           |
                                                                                                            |   Retirada dos pacotes, colocando-os
            . Altere o arquivo "Views/Pie/List.cshtml" eliminando o nome do pacote do Model                 |   dentro do arquivo "_ViewImports.cshtml"
                                                                                                            |
                @model PieListViewModel                     // Linha alterada       <-----------------------+

                @{
                    Layout = "_Layout"
                }
                <h1>@Model.CurrentCategory</h1>                             

                        
                @foreach( var pie in Model )
                {
                    <div>
                        <h2>@pie.Name </h2>
                        <h3>@pie.Price.ToString("c") </h3>
                        <h4>@pie.Category.CategoryName </h4>
                    </div>
                }

    . Styling the View

        . ASP.NET é baseado em bootstrap

        . Site de templates para o Bootstrap https://bootswatch.com/help/

    . Instalando ferramenta Libman:

        https://marketplace.visualstudio.com/items?itemName=adrianwilczynski.libman
        https://khalidabuhakmeh.com/using-libman-to-manage-client-side-dependencies


        . Importante: Certifique-se que a variável ambiental DOTNET_ROOT está configurada corretamente apontando para a pasta de 
                        instalação do dotnet. Sem essa configuração o "libman" não irá executar.

        . Instale a ferramenta "Libman":

            dotnet tool install -g Microsoft.Web.LibraryManager.Cli

            libman --version

        . Instale o plugin "Libman Tools" no VSCode

        . Execute na pasta raiz os comandos abaixo:

            # Na pasta raiz do projeto
            libman init

            . Verifique o conteúdo do arquivo "libman.json"

        . Execute o comando abaixo na pasta raiz do projeto:

            libman install bootstrap@5.1.3

            . Verifique se foi criado a pasta "wwwroot/lib/bootstrap" com os arquivo da bibliote "bootstrap"

        . No comando de instalação acima não foi possível a execução, dando erro, embora toda a instalação tenha ocorrido com sucesso.
            Vamos substituir o "libman" pelo "npm" para fazer o downloading das bibliotecas javascript.

    . Instalando o npm

        . Verifique se o npm está instalado no ambiente, caso não esteja, proceda a instalação no inicio do documento:

            npm -v

    . DEMO

        . Execute os comandos abaixo na pasta raiz do projeto:

            npm install bootstrat@5.1.3

            npm install jquery@3.6.0

        . Crie a pasta "wwwroot/lib" dentro da raiz do projeto.

        . Copie as pastas bootstrap e jquery para dentro da pasta "wwwroot/lib"

        . Acesse o arquivo de material do curso "asp-dot-net-core-6-fundamentals" para pegar o conteúdo abaixo:

            . Atualize o conteúdo do arquivo "Shared/_Layout.cshtml" com o código abaixo:

                <!DOCTYPE html>

                <html>
                <head>
                    <meta name="viewport" content="width=device-width" />
                    <title>Bethany's Pie Shop</title>
                    <link href='https://fonts.googleapis.com/css?family=Work+Sans' rel='stylesheet' type='text/css'>
                    <script src="~/lib/jquery/src/jquery.js"></script>
                    <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
                    <link href="~/css/site.css" rel="stylesheet" />
                    <base href="/" />
                </head>
                <body>
                    <div class="container">
                        <header>
                            <nav class="navbar navbar-expand-lg navbar-dark fixed-top bg-primary"
                                aria-label="Bethany's Pie Shop navigation header">
                                <div class="container-xl">
                                    <a class="navbar-brand" asp-controller="Home" asp-action="Index">
                                        <img src="~/images/bethanys-pie-shop-logo_horiz-white.png" width="151" height="47" class="d-inline-block align-top mb-2 mt-1"
                                            alt="Bethany's Pie Shop Logo">
                                    </a>

                                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                                            aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                                        <span class="navbar-toggler-icon"></span>
                                    </button>

                                    <div class="collapse navbar-collapse" id="navbarCollapse">
                                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                                        </ul>
                                    </div>
                                </div>
                            </nav>
                        </header>

                        @RenderBody()
                    </div>
                </body>
                </html>

            . Atualize o conteúdo do arquivo "Views/Pie/List.cshtml" com o conteúdo abaixo:

                @model PieListViewModel

                <h1>@Model.CurrentCategory</h1>

                <div class="row row-cols-1 row-cols-md-3 g-4">

                    @foreach (var pie in Model.Pies)
                    {
                        <div class="col">
                            <div class="card pie-card">
                                <img src="@pie.ImageThumbnailUrl" class="card-img-top" alt="@pie.Name">
                                <div class="card-body pie-button">
                                    <h4 class="d-grid">
                                    </h4>

                                    <div class="d-flex justify-content-between mt-2">
                                        <h2 class="text-start">
                                            <a class="pie-link">@pie.Name</a>
                                        </h2>
                                        <h5 class="text-nowrap">
                                            @pie.Price.ToString("c")
                                        </h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>

            . Copie a pasta "wwwroot/images" do material do curso para a pasta do projeto "wwwroot/images"

            . Copie a pasta "wwwroot/css" do material do curso para a pasta do projeto "wwwroot/css"

        . Execute os comandos abaixo para levantar o projeto:

            dotnet clean

            dotnet build

            dotnet run

            . Levante o projeto e execute a rota abaixo no navegador:

                https://localhost:[porta]/pie/list

PAREI AQUI
Working with Real Data Using Entity Framework Core 6
====================================================

    . DEMO

        . Objetivos deste módulo:

            . Adicionar os pacotes necessários para trabalhar com EF

            . Criação do DbContext

            . Alterando as configurações da aplicação

        . Na pasta raiz do projeto execute os comandos abaixo:

            dotnet add package Microsoft.EntityFrameworkCore --version 6.0.12

            dotnet add package Microsoft.EntityFrameworkCore.Tools --version 6.0.12

            dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 6.0.12

            # Se for usar o banco de dados SQL Server execute a linha abaixo
            #
            # dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 6.0.12

            dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.12


            # Execute a linha abaixo caso o "dotnet-ef" não existir no ambiente
            dotnet tool install --global dotnet-ef --version 6.0.12

        . Instale o "DB Browser for SQLite" para realizar as consultas no banco de dados

        . Acesse os arquivos "appsettings.json" e "appsettings.Development.json" e insira a linha abaixo:

            {
                "ConnectionStrings": {              
                    "DefaultConnection": "DataSource=app.db;Cache=Shared"
                },
                ...
            }

            . IMPORTANTE: As configurações de "Development" existentes nos "Properties/launchSetting.json" não está apontando
                            para o arquivo "appsetings.Development.json", talvez isto ocorra devido ao comando "dotnet ef migrations..."
                            enxergar somente o arquivo "appsetings.json"


        . Crie a pasta "Data" dentro da raiz do projeto e dentro dela crie a classe abaixo:

            using bethanysPieShop.Models;
            using Microsoft.EntityFrameworkCore;

            namespace bethanysPieShop.Data
            {
                public class AppDbContext : DbContext
                {
                    public DbSet<Category>? Categories { get; set; }
                    public DbSet<Pie>? Pies { get; set; }

                    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
                    {
                    }

                    //            protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) 
                    //                        => optionsBuilder.UseSqlite();
                    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
                    {
                        optionsBuilder.UseSqlite();
                        optionsBuilder.LogTo(Console.WriteLine);
                    }


                }
            }


        . Adicione as linhas abaixo na classe "Program.cs":

            ...
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.AddScoped<ICategoryRepository, MockCategoryRepository>();      
            builder.Services.AddScoped<IPieRepository, MockPieRepository>();                

            builder.Services.AddDbContext<AppDbContext>( options => {                           // Linha inserida
                options.UseSqlite( 
                    builder.Configuration["ConnectionStrings:DefaultConnection"]);
            });

        . Crie as classes repository abaixo dentro da pasta "Models":

            using Microsoft.EntityFrameworkCore;

            namespace BethanysPieShop.Models
            {
                public class PieRepository : IPieRepository
                {
                    private readonly BethanysPieShopDbContext _bethanysPieShopDbContext;

                    public PieRepository(BethanysPieShopDbContext bethanysPieShopDbContext)
                    {
                        _bethanysPieShopDbContext = bethanysPieShopDbContext;
                    }

                    public IEnumerable<Pie> AllPies
                    {
                        get
                        {
                            return _bethanysPieShopDbContext.Pies.Include(c => c.Category);
                        }
                    }

                    public IEnumerable<Pie> PiesOfTheWeek
                    {
                        get
                        {
                            return _bethanysPieShopDbContext.Pies.Include(c => c.Category).Where(p => p.IsPieOfTheWeek);
                        }
                    }

                    public Pie? GetPieById(int pieId)
                    {
                        return _bethanysPieShopDbContext.Pies.FirstOrDefault(p => p.PieId == pieId);
                    }

                    public IEnumerable<Pie> SearchPies(string searchQuery)
                    {
                        throw new NotImplementedException();
                    }
                }
            }


            using bethanysPieShop.Data;

            namespace bethanysPieShop.Models
            {
                public class CategoryRepository : ICategoryRepository
                {
                    private readonly AppDbContext _bethanysPieShopDbContext;

                    public CategoryRepository(AppDbContext bethanysPieShopDbContext)
                    {
                        _bethanysPieShopDbContext = bethanysPieShopDbContext;
                    }

                    public IEnumerable<Category> AllCategories => _bethanysPieShopDbContext.Categories.OrderBy(p => p.CategoryName);
                }
            }

        . Altere a classe "Model" "Pie.cs" como abaixo:

            using System.ComponentModel.DataAnnotations;
            using System.ComponentModel.DataAnnotations.Schema;
            using Microsoft.EntityFrameworkCore;

            namespace bethanysPieShop.Models;

            [Table("Pie")]
            public class Pie
            {
                [Key]
                [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
                [Column("PieId")]
                public int PieId { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                [MaxLength(150, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 100 caracateres")]
                [Column("Name", TypeName = "VARCHAR(100)")]
                public string Name { get; set; } = string.Empty;


                [MaxLength(50, ErrorMessage = "Este campo deve ter entre 5 a 50 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 50 caracateres")]
                [Column("ShortDescription", TypeName = "VARCHAR(50)")]
                public string? ShortDescription
                {
                    get; set;
                }

                [MaxLength(100, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 100 caracateres")]
                [Column("LongDescription", TypeName = "VARCHAR(100)")]
                public string? LongDescription
                {
                    get; set;
                }

                [MaxLength(150, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 150 caracateres")]
                [Column("AllergyInformation", TypeName = "VARCHAR(150)")]
                public string? AllergyInformation { get; set; }

                [Precision(15, 2)]
                [Column("Price", TypeName = "DECIMAL(15,2)")]
                public decimal Price { get; set; }


                [Column("ImageUrl", TypeName = "VARCHAR(255)")]
                public string? ImageUrl { get; set; }


                [Column("ImageThumbnailUrl", TypeName = "VARCHAR(255)")]
                public string? ImageThumbnailUrl { get; set; }

                public bool IsPieOfTheWeek { get; set; }


                [Column("CategoryId", TypeName = "INTEGER")]
                public int CategoryId { get; set; }


                public bool InStock
                {
                    get; set;
                }

                [ForeignKey("CategoryId")]
                public Category Category
                {
                    get; set;
                } = default!;
            }

        . Altere a classe "Model" "Category.cs" como abaixo:
        
            using System.ComponentModel.DataAnnotations;
            using System.ComponentModel.DataAnnotations.Schema;
            using bethanysPieShop.Models;

            namespace bethanysPieShop.Models;

            [Table("Category")]
            public class Category
            {

                [Key]
                [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
                [Column("CategoryId")]
                public int CategoryId { get; set; }

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                [MaxLength(100, ErrorMessage = "Este campo deve ter entre 5 a 100 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 100 caracateres")]
                [Column("Name", TypeName ="VARCHAR(100)")]
                public string CategoryName { get; set; } = string.Empty;

                [Required(ErrorMessage = "Este campo é obrigatorio")]
                [MaxLength(150, ErrorMessage = "Este campo deve ter entre 5 a 150 caracateres")]
                [MinLength(5, ErrorMessage = "Este campo dever ter entre 5 a 150 caracateres")]
                [Column("Description", TypeName ="VARCHAR(100)")]
                public string? Description { get; set; }

                public List<Pie>? Pies { get; set; }
            }

        . Acesse a classe "Program.cs" e faça as alterações abaixo:

            using bethanysPieShop.Models;           

            var builder = WebApplication.CreateBuilder(args);

                                                                +---> de MockCategoryRepository -> para CategoryRepository
                                                                |
            builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();      // Linha alterada
            builder.Services.AddScoped<IPieRepository, PieRepository>();                // Linha alterada
            ...

        . Na raiz do projeto execute os comandos abaixo:

            dotnet clean

            dotnet build

            dotnet ef migrations add InitialCreation

            dotnet ef database update

        . Crie a classe abaixo na pasta "Models":

            using bethanysPieShop.Data;
            using bethanysPieShop.Models;

            namespace bethanysPieShop.Models
            {
                public static class DbInitializer
                {
                    public static void Seed(IApplicationBuilder applicationBuilder)
                    {
                        AppDbContext context = applicationBuilder.ApplicationServices.CreateScope().ServiceProvider.GetRequiredService<AppDbContext>();

                        if (!context.Categories.Any())
                        {
                            context.Categories.AddRange(Categories.Select(c => c.Value));
                        }

                        if (!context.Pies.Any())
                        {
                            context.AddRange
                            (
                                new Pie { Name = "Caramel Popcorn Cheese Cake", Price = 22.95M, ShortDescription = "The ultimate cheese cake", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Cheese cakes"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/caramelpopcorncheesecake.jpg", InStock = true, IsPieOfTheWeek = true, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/caramelpopcorncheesecakesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Chocolate Cheese Cake", Price = 19.95M, ShortDescription = "The chocolate lover's dream", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Cheese cakes"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/chocolatecheesecake.jpg", InStock = true, IsPieOfTheWeek = true, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/chocolatecheesecakesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Pistache Cheese Cake", Price = 21.95M, ShortDescription = "We're going nuts over this one", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Cheese cakes"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/pistachecheesecake.jpg", InStock = true, IsPieOfTheWeek = true, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/pistachecheesecakesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Pecan Pie", Price = 21.95M, ShortDescription = "More pecan than you can handle!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Fruit pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/fruitpies/pecanpie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/fruitpies/pecanpiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Birthday Pie", Price = 29.95M, ShortDescription = "A Happy Birthday with this pie!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Seasonal pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/seasonal/birthdaypie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/seasonal/birthdaypiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Apple Pie", Price = 12.95M, ShortDescription = "Our famous apple pies!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Fruit pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/applepie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/applepiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Blueberry Cheese Cake", Price = 18.95M, ShortDescription = "You'll love it!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Cheese cakes"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/blueberrycheesecake.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/blueberrycheesecakesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Cheese Cake", Price = 18.95M, ShortDescription = "Plain cheese cake. Plain pleasure.", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Cheese cakes"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/cheesecake.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/bethanyspieshop/cheesecakes/cheesecakesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Cherry Pie", Price = 15.95M, ShortDescription = "A summer classic!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Fruit pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/cherrypie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/cherrypiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Christmas Apple Pie", Price = 13.95M, ShortDescription = "Happy holidays with this pie!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Seasonal pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/christmasapplepie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/christmasapplepiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Cranberry Pie", Price = 17.95M, ShortDescription = "A Christmas favorite", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Seasonal pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/cranberrypie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/cranberrypiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Peach Pie", Price = 15.95M, ShortDescription = "Sweet as peach", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Fruit pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/peachpie.jpg", InStock = false, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/peachpiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Pumpkin Pie", Price = 12.95M, ShortDescription = "Our Halloween favorite", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Seasonal pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/pumpkinpie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/pumpkinpiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Rhubarb Pie", Price = 15.95M, ShortDescription = "My God, so sweet!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Fruit pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/rhubarbpie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/rhubarbpiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Strawberry Pie", Price = 15.95M, ShortDescription = "Our delicious strawberry pie!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Fruit pies"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/strawberrypie.jpg", InStock = true, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/strawberrypiesmall.jpg", AllergyInformation = "" },
                                new Pie { Name = "Strawberry Cheese Cake", Price = 18.95M, ShortDescription = "You'll love it!", LongDescription = "Icing carrot cake jelly-o cheesecake. Sweet roll marzipan marshmallow toffee brownie brownie candy tootsie roll. Chocolate cake gingerbread tootsie roll oat cake pie chocolate bar cookie dragée brownie. Lollipop cotton candy cake bear claw oat cake. Dragée candy canes dessert tart. Marzipan dragée gummies lollipop jujubes chocolate bar candy canes. Icing gingerbread chupa chups cotton candy cookie sweet icing bonbon gummies. Gummies lollipop brownie biscuit danish chocolate cake. Danish powder cookie macaroon chocolate donut tart. Carrot cake dragée croissant lemon drops liquorice lemon drops cookie lollipop toffee. Carrot cake carrot cake liquorice sugar plum topping bonbon pie muffin jujubes. Jelly pastry wafer tart caramels bear claw. Tiramisu tart pie cake danish lemon drops. Brownie cupcake dragée gummies.", Category = Categories["Cheese cakes"], ImageUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/strawberrycheesecake.jpg", InStock = false, IsPieOfTheWeek = false, ImageThumbnailUrl = "https://gillcleerenpluralsight.blob.core.windows.net/files/strawberrycheesecakesmall.jpg", AllergyInformation = "" }
                            );
                        }

                        context.SaveChanges();
                    }

                    private static Dictionary<string, Category>? categories;

                    public static Dictionary<string, Category> Categories
                    {
                        get
                        {
                            if (categories == null)
                            {
                                var genresList = new Category[]
                                {
                                                new Category { CategoryName = "Fruit pies" },
                                                new Category { CategoryName = "Cheese cakes" },
                                                new Category { CategoryName = "Seasonal pies" }
                                };

                                categories = new Dictionary<string, Category>();

                                foreach (Category genre in genresList)
                                {
                                    categories.Add(genre.CategoryName, genre);
                                }
                            }

                            return categories;
                        }
                    }
                }
            }

        . Insira a linha abaixo dentro da classe "Programs.cs":

            ...
            app.MapDefaultControllerRoute();

            app.MapGet("/", () => "Hello World!");

            DbInitializer.Seed( app );        // Linha inserida

            app.Run();



        . Levante o projeto e execute a rota abaixo no navegador:

            https://localhost:[porta]/pie/list


Adding Routes and Navigation
============================

    . Roteando em ASP.NET Cored e ASP.NET Core MVC

        . A responsabilidade pela resposta das requisições ao encargo dos controller, onde contém as rotas que são acionandas pelos usuários através
            dos Browser.

        . Endpoints:

            . São unidades executáveis que trata uma requisição e geram uma resposta.

            . Podem ser definidas:

                . Minimal API, diretamente de dentro do "Program.cs":

                    ...
                    app.UseSwagger();// Ativando o Swagger

                    // Endpoints da solução
                    app.MapGet("/", () => "Hello World!");
                    ...

                . Controllers:

                    ... 
                    [Route("minharota")]
                    public string MinhaAction()
                    {
                        return "Ok! Cheguei na rota";
                    }
                    ...

        . Os "middlewares" que disponibilizam os recursos de endpoints para a aplicação inicialmente são:

            UseRounting()

                Its purpose is to:

                . Parse the incoming URL
                . Resolve the URL and construct the Endpoint.
                . Updates the HTTP Context object with the endpoint using the SetEndpoint method.

            UseEndpoints()

                The EndpointMiddleware is responsible for execution the Endpoint

            ╔══════════════════════════════════════════╦═══════════════════════════════════════╗
            ║             app.UseRouting()             ║          app.UseEndPoints()           ║
            ╠══════════════════════════════════════════╬═══════════════════════════════════════╣
            ║               Find Endpoint              ║           Execute Endpoint            ║
            ║                                          ║                                       ║
            ║  Adds route matching to the middleware   ║  Adds endpoint execution to the       ║
            ║  pipeline. This middleware looks at the  ║  middleware pipeline.                 ║
            ║  set of endpoints defined in the app,    ║  It runs the delegate associated      ║
            ║  and selects the best match based        ║  with the selected endpoint.          ║
            ║  on the request.                         ║                                       ║
            ║                                          ║                                       ║
            ╚══════════════════════════════════════════╩═══════════════════════════════════════╝            

https://www.tektutorialshub.com/asp-net-core/asp-net-core-endpoint-routing/ 

            . Program.cs

                app.UseRouting();
            
                app.UseAuthorization();
            
                app.UseEndpoints(endpoints =>
                {
                    endpoints.MapControllerRoute(
                        name: "default",
                        pattern: "{controller=Home}/{action=Index}/{id?}");
                });

        . Tipos de rotas:

            https://www.dotnettricks.com/learn/aspnetcore/routing 

            . Roteamento convencional:

                Configuramos uma ou mais convenções que serão usadas para corresponder URLs de 
                entrada a pontos de extremidade no aplicativo. No ASP.NET Core, esses pontos 
                de extremidade podem ser ações do controlador, como em ASP.NET MVC ou API Web.            
                                                                        |               |
                Program.cs                                              |               |
                ----------                                              |               |
                                                                        |               |
                    app.UseRouting();                                   |               |
                                                                        |               |
                    app.UseAuthorization();                             |               |
                                                                        |               |
                    app.UseEndpoints(endpoints =>               <-------+               |
                    {                                                                   |
                        endpoints.MapControllerRoute(                                   |
                            name: "default",                                            |
                            pattern: "{controller=Home}/{action=Index}/{id?}");         |
                    });                                                                 |
                                                                                        |
                                                                                        |
                PieController                                                           |
                ------------                                                            |
                                                                                        |
                    public class PieController: Controller                              |
                    {                                                                   V
                        public ViewResult List()    // http://www.bethanypieshop.com/Pie/List
                        {                                                             |   |
                            //                                                        V   +--> Action
                        }                                                         Controller
                    }


            . Roteamento de atributo:

                O roteamento de atributo no ASP.NET Core é a abordagem preferencial para 
                configurar o roteamento em controladores. Se você estiver criando APIs, 
                o atributo [ApiController] deverá ser aplicado aos controladores. Entre 
                outras coisas, esse atributo requer o uso do roteamento de atributo para 
                ações nessas classes de controlador                     |       |
                                                                        |       |
                    [HttpGet("api/products/{id}")]              <-------+       |
                    public async ActionResult<Product> Details(int id)          |
                    {                                                           |
                        // ...                                                  |
                    }                                                           |
                                                                                |
                                                                                |
                    [Route("api/{controller}/{action}/{id?:int}")]      <-------+
                    public abstract class BaseApiController : ControllerBase, IApiController
                    {
                        // ...
                    }

    . DEMO

        . Observe a linha abaixo na classe "Program.cs" que contém o Middleware "MapDefaultControllerRoute()".
                                                                                            |
            ...                                                                             |
            app.MapDefaultControllerRoute();        <---------------------------------------+

            app.MapGet("/", () => "Hello World!");

            DbInitializer.Seed( app );        // Linha inserida

            app.Run();

        . Ao usarmos "app.MapDefaultControllerRoute()" como acima ao invés do "app.UseEndPoints":

                app.UseEndpoints(endpoints =>                     
                {                                                          
                    endpoints.MapControllerRoute(                          
                        name: "default",                                   
                        pattern: "{controller=Home}/{action=Index}/{id?}");
                });                                                        

                O "app.MapDefaultControllerRoute()" já assumirá o padrão de rota "{controller=Home}/{action=Index}/{id?}" sem grandes detalhes.
                                                                                    |                   |            |   
                                                                                    +--> Controller     +---> Action +---> parameter

                para enquadrar as requisições e encontrar a classe controller e seu método, exemplo:

                    http://localhost/           ->      HomeController.Index()  
                    http://localhost/Home/Index     ->      HomeController.Index()  
                    http://localhost/Home/Something ->      HomeController.Something()
                    http://localhost/Test/      ->      HomeController.Test()  
                    http://localhost/Test/1      ->      HomeController.Test(int id)  


                . IMPORTANTE: No final tanto o "app.MapDefaultControllerRoute();" quanto o "app.UseEndpoints(endpoints => ... )" da forma como estão acima terão comportamentos
                    iguais, enquadrão as requisições no padrão de rota "{controller=Home}/{action=Index}/{id?}". No exemplo abaixo faremos uso da maneira mais simples
                    "app.MapDefaultControllerRoute()".

        . Crie o método abaixo na classe "PieController.cs":

            ...
            public class PieController: Controller
            {
                ...

                public IActionResult Details( int id )              // Método inserido
                {
                    var pie = _pieRepository.GetPieById( id );

                    if (pie == null)
                        return NotFound();

                    return View( pie );
                }
            }

        . Crie a View "~/View/Pie/Details.cshtml" com o conteúdo abaixo:

            @model Pie

            <h3 class="my-5">
                @Model.Name
            </h3>

            <div class="row gx-5">
                <img alt="@Model.Name" src="@Model.ImageUrl" class="img-fluid col-5" />
                <div class="col-7">
                    <h4>@Model.ShortDescription</h4>
                    <p>@Model.LongDescription</p>
                    <h3 class="pull-right">@Model.Price.ToString("c")</h3>
                    <div class="addToCart">
                        <p class="button">
                        
                        </p>
                    </div>
                </div>
            </div>

        . Levante o projeto e execute a rota abaixo:

            https://localhost:[porta]/pie/details/7

    . Configurando Rotas

        . Criando um link com "Tag Helpers":

            . Para inserir uma tag de link no nosso HTML gerado pelo ASP.NET Core utilize a tag abaixo:

                <!-- Razor HTML -->
                <a asp-controller="Pie" asp-action="List">
                    View Pie List
                </a>

                <!-- HTML gerado -->
                <a href="/Pie/List">View Pie List</a>

            . Para fazer uso das "Tags Helpers" precisamos importá-las no arquivo "_ViewImports.cshtml":

                @using bethanysPieShop.Models    
                @using bethanysPieShop.ViewModels            

                @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers            // Linha inserida

            . Atributos de Tag Helper disponíveis:

                https://www.dotnettricks.com/learn/aspnetcore/aspnet-core-tag-helpers
                https://endjin.com/blog/2022/02/tag-helpers-in-aspnet-core
                https://endjin.com/blog/2022/01/model-binding-in-asp-net-core-using-razor-pages

                asp-controller      tag helper can be used to indicate which controller should be targeted by the 
                                    post action of a form.
                asp-route-{value}   tag helper (where {value} can be replaced with the name of the parameter we want to 
                                    specify the value for) allows us to create a route.
                asp-route           tag helper allows us to indicate which main route we want to use.
                asp-forgery         tag helper allows us to prevent cross-site request forgery attacks on the 
                                    site when used with the [ValidateAntiForgeryToken] attribute in the HTTP 
                                    Post action method.
                asp-action          To specify the controller action we want to target using tag helpers

    . DEMO

06 Adding Routes and Navigation (21.20)


