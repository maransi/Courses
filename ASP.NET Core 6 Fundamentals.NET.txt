Curso ASP.NET Core 6 Fundamentals
---------------------------------

Entendendo o ASP.NET Core 6 e ASP.NET Core 6 MVC
================================================

. Objetivos deste módulo:

    . Explicar o que é o ASP.NET Core?

    . O que será aprendido neste curso?

    . Quais ferramentas necessárias para o trabalho com o ASP.NET?

        . ASP.NET Core 6

        . Net 6

        . Visual Studio 2022

. O que é o ASP.NET Core?

    . É um framework open-source, criado pela Microsoft para a comunidade, para construir
        modernas aplicações web e serviços com .Net.

. O que podemos construir com ASP.NET Core?

    . Podemos desenvolver solução nas três camadas:

        . Server-side rendered applications

                            Http Request
              +--------------------------------------+
              |                                      |
              |                                      V
            Client                          Server ASP.NET Core
              ^                                      |
              |                                      |
              +--------------------------------------+
                    Dynmically generated HTML

        . Services

                                Http Request
                +-------------------------------------------------------+
                |                                                       |
                |                                                       V
            Consumer (Html, Angular, React, microservices, etc)     Server ASP.NET Core
                ^                                                       |
                |                                                       |
                +-------------------------------------------------------+
                                JSON

        . Client-side rendered applications

                    Initial Http Request via JQuery
              +--------------------------------------+
              |                                      |
              |                                      V
            Client                          Server ASP.NET Core
              ^                                      |  |
              |                                      |  |
              +--------------------------------------+  |
              ^     Application                         |
              |                                         |
              +-----------------------------------------+
                        JSON

. A principais caracteristicas do .NET Core é:

    . Ser "Cross-plataform framework", podendo ser usado
        no Windows, Linux e Mac, mantendo a compatibilidade em todas as plataformas.

    . Open Source

    . FAster development cycle - Continuas atualizações de versões do framework

    . Modular - Contém diversas bibliotecas que podem ser adicionadas ao projeto, 
                o repositório NUGET disponibiliza todas essas bibliotecas facilmente.

. Arquitetura do ASP.NET Core:

    +--------- ASP.NET Core Application Plataforms -------------+   +------- Other -----------------+
    |                                                           |   |                               |
    |   ASP.NET Core        ASP.NET Core        ASP.NET Core    |   |   Entity      ASP.NET Core    |
    |       MVC             Razor Pages             Blazor      |   |   Framework   Identity        |
    |                                                           |   |                               |
    +-----------------------------------------------------------+   +-------------------------------+

    +------------------------------------ ASP.NET Core Plataform -----------------------------------+
    |                                                                                               |
    |   Kestrel                         Middleware                                  Razor           |
    |                                                                                               |
    |   Model binding                   Dependency                                  Logging         |
    |                                   Injection                                                   |
    |                                                                                               |
    +-----------------------------------------------------------------------------------------------+

. ASP.NET Core Application Framework

            MVC                                         Razor Page                                    Blazor
            |                                               |                                           |
            V                                               V                                           V
    O ASP.NET Core MVC é uma                Recurso do ASP.NET Core MVC que torna a             O Blazor é uma estrutura/framework SPA 
    estrutura avançada para                 codificação de cenários focados em páginas          (Single Page Application) criada no .NET 
    a criação de aplicativos                mais fácil e mais produtiva. Responsável pela       que é executada no navegador com o WebAssembly
    Web e APIs usando o padrão              renderização das páginas Web Html
    de design Model-View-Controller

. Hisória do ASP.NET Core:

          2002                2016                  2019                    2021
    ASP.NET WebForms    ASP.NET Core 1.0    ASP.NET Core 3.0 e 3.1      ASP.NET Core 6
              \         /            \      /                    \        /  
                  2008              2017-2018                       2020
              ASP.NET MVC       ASP.NET Core2.0                 ASP.NET Core 5
                                ASP.NET Core 2.1 e 2.2

. LTS (Long-term supprt) e Versões Atuais

    . Com suporte até 3 anos após o lançamento da próxima versão.

. Cuurent release:

    . Suportado somnente 6 meses lançamento da próxima versão

. Tópicos abordados no curso:

    . ASP.NET Core

    . Applicaiton Framework

    . Entity Framework Core

    . Security

    . Testing

    . Deployment



Configurando uma aplicação ASP.NET Core 6 MVC
=============================================

Criando um novo projeto
-----------------------

    Dotnet Core
    -----------

        . Na pasta raiz de projeto execute o comando abaixo:

            dotnet new mvc SampleApplication -o sampleApplication -n sampleApplication -f net6.0

    Visual Studio Code
    ------------------

        . Na tela de "Get Started" escolha a opção "Create a New Project"

        . Na tela que se abre escolha a opção: "ASP.NET Core Web App (Model-View-Controller)" e acione "Next"

        . Na tela que se abre "Configure your new Project" informe:

            Project Name: "SampleApplication"
            Localition: "[pasta de projetos]/sampleApplication
            SolutionName: SampleApplication
            Place solution and project in the same directory: False

            Next

        . Na tela que abre "Additional information" informe:

            Framework: .Net 6.0
            Authentication Type: none
            Configure for HTTPS: True
            Enable Docker: False
            Do not use top level statements: False

            Next

    . Execute o projeto


Explorando os arquivos gerados
------------------------------

    . Analisando a estrutura temos:

        wwwroot:            Diretório que contem arquivos estativos como imagens, javascripts, css, e outros;

        Areas:              Diretório que permite organizar nossa aplicação de forma que facilite a manutenção. 
                            No  nosso projeto por exemplo, teremos uma área especifica para o nosso painel de 
                            controle e ainda poderia ter uma área para acesso de cliente ou até com divisões 
                            relacionados a negócio.

        Controllers:        Como o próprio nome diz, é o diretório que contem os controllers utilizados no projeto;

        Models:             Diretório dos arquivos de models utilizados pelas Views e pelas Controllers;

        Views:              Diretorio que irá conter outros subdiretorios. Esses subdiretorios estarão 
                            relacionados diretamente com os controllers, ou seja, teremos as views de 
                            cada controller alem de views, partial views e layout utilizados;

        .csproj:            Contém os pacotes e referências do projeto.

        Program.cs:         Arquivo principal responsavel por inicializar a aplicação;

        Startup.cs:         Possui configurações de nosso projeto, tais como, definição de rotas, ativação de 
                            recursos relacionados ao ASP.NET Core ou ao projeto. A partir do .NET 6 em diante ele
                            não é mais criado no projeto.

        appsettings.json    Contém informações do projeto.
                            Podemos ter versões desse arquivo de acordo com o ambiente que o projeto atuará:

                            appsetings.json
                            appsettings.Development.json

                            O .Net tenta encontrar as informações inicialmente no "appsettings.Development.json", 
                            senão conseguir procura no "appsettings.json".

                            Local ideal para armazenar a string de conexão do bando de dados.

        Properties/launchSettings.json  Usado para armazenar configurações das informações do projeto, como porta, 
                                        ambiente, etc.
                                        Contém configurações necessárias para executar a aplicação



https://raphaelcardoso.com.br/criando-aplicacao-web-com-aspnet-core-mvc-parte-1/

. Demo - Configurando a aplicação

    . Visual Studio

        . Create a New project

        . Escolha ASP.NET Core Empty

            Project Name: BhetanyPieShop
            Location: [Pasta do projeto]
            Solution Name: BhetanyPieShop
            Place Solution and Project in the same Directory: False

        . Additional Information

            Framework: .NET 6.0
            Configure for HTTPS: true
            Enable Docker: False
            Docker OS: Null
            Do not use top level statements: Null

        . Run

    . Dotnet core
        
        . Na pasta raiz do projeto execute o comando abaixo:

            dotnet new web -o bhetanyPieShop -n bhetanyPieShop -f net6.0

            dotnet clean

            dotnet restore

            dotnet build

            dotnet run

. No .Net 6 a execução começa pela classe "Program.cs"

        // Construi a aplicação
        var builder = WebAppication.CreateBuilder(args);
        var app = builder.Build();

        // Mapea a rota para ser chamada na linha debaixo
        app.MapGet("/", () => "Hello World!");

        // Executa a aplicação e fica escutando e respondendo alguma chamada na porta do projeto
        app.Run();  

    . No .Net 6 a classe "Startup.cs" foi suprimida

    . No .Net 6 a estrutura da classe "Program.cs" foi alterada deixando equivalente ao apresentado acima.

. Mapeando uma Requisição

    . Na classe "Program.cs" temos a rota abaixo:

        app.MapGet("/", () => "Hello World!");
                         |
                         +----> Função anônima

    . A chamada acima resultará na URL:

        https://localhost:[porta]/

. Acesse a classe "Program.cs" e acrescente a linha abaixo:

        var builder = WebAppication.CreateBuilder(args);

        builder.Services.AddControllerWithViews();              // Linha inserida

        var app = builder.Build();

        app.UseStaticFiles();                                   // Linha inserida

        if ( app.Environment.IsDevelopment() )                  // If inserido
        {
            app.UseDeveloperExceptionPage();                        
        }

        app.MapDefaultControllerRoute();                        // Linha inserida

        app.MapGet("/", () => "Hello World!");

        app.Run();  

https://www.treinaweb.com.br/blog/asp-net-core-compreendendo-addmvc-addmvccore-addcontrollers-addcontrollerswithviews-e-addrazorpages

. "AddControllerWithViews()" carrega os recursos:

    . MvcCore;
    . ApiExplorer;
    . Authorization;
    . FormatterMappings;
    . Views;
    . RazorViewEngine;
    . TagHelper;
    . Data Annotations;
    . Json Formatters;
    . CORS.

    . O único que foi removido é o Razor Pages. Desta forma, uma aplicação ASP.NET MVC que não faça 
        uso do Razor Pages deve optar por este método.


https://rodolfofadino.com.br/configurando-o-middleware-de-staticfiles-com-net-6-a6f61bdfdfc7

. "UseStaticFiles()" para utilizarmos arquivos estáticos "css, jpeg, js" precisamos incluir este método 
    no "Program.cs". A partir dai podemos criar a pasta "wwwroot" na raiz do nosso projeto e adicionar
    qualquer arquivo estático nele e começar trabalhar com eles.

. "app.Environment.IsDevelopment()" para entender melhor o funcionamento do método "IsDevelopment()" revise as
    aulas "Aula 71. Configurações de Debug" e "Aula 73.  Entendendo o LaunchSettings" do curso 
    "Fundamentos ASP.NET 6 - Balta"; que fala sobre o uso da variável ambiental "ASPNETCORE_ENVIRONMENT"

. "MapDefaultControllerRoute()" 


03. Setting up an ASP.NET Core 6 MVC Application (38.46)
