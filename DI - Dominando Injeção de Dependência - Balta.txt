Dominando Injeção de Dependência
--------------------------------

Aula 1. Ferramentas
-------------------

. Este curos é continuação do curso Fundamentos C#, OOP, SQL Server e Dapper.

. Utilizaremos:

    Umas das plataformas Windows. MAC, Ou Linux
    NET 5 ou superior
    Azure Data Studio
    SQL Server
    VS Code

. Instalação do Docker

	. Instalação

		. Instalação nas distribuições baseadas no Ubuntu:

			. A URL abaixo tem os passos atualizado para instalação do Docker:

				https://docs.docker.com/engine/install/ubuntu/

			. Instalação Atualizada

				sudo apt-get update
				sudo apt-get install \
					ca-certificates \
					curl \
					gnupg \
					lsb-release

				curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

				echo \
					"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
					$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

				sudo apt-get update
				sudo apt-get install docker-ce docker-ce-cli containerd.io
				sudo docker --version

				sudo groupadd docker
				sudo gpasswd -a <usuario> docker
				sudo chown "$USER":"$USER" /var/run/docker.sock -R
				sudo service docker restart

				docker --version

		. Instalação no Mint

			sudo apt-get update
			cd Downloads/
			sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
			curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
			sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo "$UBUNTU_CODENAME") stable"
			sudo apt-get update
			sudo apt-get -y install docker-ce docker-compose
			sudo usermod -aG docker $USER
			docker --version

            sudo groupadd docker
            sudo gpasswd -a <usuario> docker
            sudo chown "$USER":"$USER" /var/run/docker.sock -R
            sudo service docker restart

            docker --version

. Instalando o .NET Core SDK

    . Instalçao Atualizada:

        . URL com informações para realizar a instalação.

            https://docs.microsoft.com/pt-br/dotnet/core/install/linux-ubuntu

            . IMPORTANTE: Acesse a instalação da distribuição e versão especifica do linux que estamos utilizando para 
                            proceder os comandos adequadamente.

                            A instalação abaixo está para o Ubuntu 20.04

        # Comando para o Ubuntu 22.04 em diante
        # wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
        # sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb

        # Instalação do SDK
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb

        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update

        sudo apt-get install -y gpg
        wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
        sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
        wget https://packages.microsoft.com/config/ubuntu/20.04/prod.list
        sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
        sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list

        # Comando para o Ubuntu 22.04 em diante
        # wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
        # sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb

        sudo apt-get update; \
        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y dotnet-sdk-5.0

        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y aspnetcore-runtime-5.0

        sudo apt-get install -y dotnet-runtime-5.0


. Instalando o VS Code

    Instalação das extensões do VSCode

            C# 
            C# Extensions
            C# XML Documentation Comments
            vscode-icons (Opcional)
            Docker

        . Atalhos:

            Ctrl + K + D ou Shit + Alt + F:             Identa todo o seu código automaticamente;
            Ctrl + K + C:                               comenta um bloco de linhas;
            Ctrl + K + U:                               descomenta um bloco de linhas;
            Alt + Left Arrow:                           durante a programação, volta um método que você estava navegando;
            Alt + Right Arrow:                          durante a programação, avança um método que você estava navegando;
            Ctrl + .:                                   implementa o método/classe inexistente que você acabou de escrever;
            Ctrl + M + O:                               esconde todas as regions da classe atual;
            Ctrl + Shift + B:                           compila todos os projetos;
            F5:                                         manda depurar um projeto;
            Ctrl + F5:                                  manda executar um projeto;
            F10:                                        durante a depuração, avança uma linha;
            F11:                                        durante a depuração, avança uma linha entrando nos detalhes da mesma;


    Configurar Visual Studio Code para .NETCore

        . Acesse File / Preferences / Settings

        . Digite C#

        . Acesse "C# Configuration / CSharp Format Enabled" e habilite a configuração

        . Digite "Format on save" e habilite a configuração

        . Digite "Final" e habilite a configuração "Files: Insert final newline" e habilite a configuração

    
    Caso exiba a mensagem: "unable to generate assets to build and debug. omnisharp server is not running" siga os passos abaixo:

        . Acesse a opção "Arquivos/Preferência/Configurações"

        . Digite "OmniSharp" e faça a localização:

        . Encontre a opção "OmniSharp Auto Start" e desabilite.

        . Acesse as extensões, na barra lateral do VSCode, clique na extensão C# e faça um Downgrade da versão para 1.23.17

        . Apague do seu projeto a pasta ".vscode"

        . Digite Ctrl + Shift + P

        . Digite ".Net: Generate Assests for Build and Debug" para criar o "launch.json" e o "task.json"

        . Saia e entre no VSCode. Verifique na entrada se a instalação do OmniSharp ocorreu com sucesso.

        . Retorne a opção "OmniSharp Auto Start" e habilite.
   

. Instalando o SQL Server

    https://docs.microsoft.com/pt-br/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&pivots=cs1-bash
    https://docs.microsoft.com/pt-br/sql/linux/sql-server-linux-setup-tools?view=sql-server-ver15#ubuntu


    docker container run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=<password>"    -p 1433:1433 --name sqlserver --hostname sqlserver    -d mcr.microsoft.com/mssql/server:2019-latest
    docker container ps -a
    docker container exec -t sqlserver cat /var/opt/mssql/log/errorlog | grep connection

    # Testar no linux, não funcionou no windows
    docker container exec -it sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U SA  -P "$(read -sp "Enter current SA password: "; echo "${REPLY}")"  -Q "ALTER LOGIN SA WITH PASSWORD=\"$(read -sp "Enter new SA password: "; echo "${REPLY}")\""

    # Execute os comandos abaixo ao entrar no container
    #
    # hostname -I
    # ip a
    docker exec -it sqlserver "bash"

    curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
    sudo apt-get update 
    sudo apt-get install mssql-tools unixodbc-dev
    sudo apt-get update 
    sudo apt-get install mssql-tools
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
    source ~/.bashrc
    
    # Execute o comando abaixo e substitua o endereço IP do comando "sqlcmd" pelo adquirido no "hostname -I"
    #
    # hostname -I
    sqlcmd -S 192.168.0.82,1433 -U SA -P "<password>"


    # Execute os comandos abaixo dentro do sqlcmd
    EXEC sp_databases
    GO

    EXEC sp_helpdb    
    GO

    SELECT name FROM master..sysdatabases ORDER BY name
    GO

    EXEC sp_msForEachDB 'PRINT ''?'''
    GO

    EXIT


    . Sempre que for necessário levantar o banco do docker utilize o comando abaixo:

        docker start sqlserver

    . Para terminar a execução do banco, utilize

        docker stop sqlserver


. Instalando Azure Data Studio

    . Para Linux siga os passos abaixo:

        Acessar o link abaixo para fazer o download do arquivo .deb:

            https://go.microsoft.com/fwlink/?linkid=2169956

        cd ~
        sudo dpkg -i ./Downloads/azuredatastudio-linux-<version string>.deb
        azuredatastudio

    . Para Windows acesse o link abaixo:

        https://docs.microsoft.com/pt-br/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15    


Aula 3. O que é injeção de dependência
--------------------------------------

    . Não é um padrão ( Design Pattern )

    . Técnica que implement o IoC

        . Inversion of Control
        . DIP

    . Ajuda no baixo acoplamento

    . Provê uma melhor divisão de responsabilidades

    . O que eu preciso para trabalhar?
        . Quem vai me prover? Não importa.


Aula 4 - Baixo acoplamento
--------------------------

    . Imagina um sistema grande
    
    . Cada pedacinho tem que focar em uma coisa
        . Não dá pra abraçar o mundo 

    . Tem que funcionar de forma independente

        . Fácil de entender
        . Fácil de dar manuteção
        . Se precisar jogar fora e criar outro é fácil

Aula 5. Mau exemplo
-------------------

    . Vamos tomar como base um pedido

    . Receber os parâmetros

    . Processa o pedido

Aula 6. Entendento o problema
-----------------------------

    . O problema

        . Dificil de ler

        . Dificil de mudar

        . Código não é reusável

        . Alto acoplamento

        . Teste? pra quê?

Aula 7. Resolvendo o problema com OOP
-------------------------------------

    . OO

        . Abstração, encapsulamento 
            . Simpels e direto

        . Pedaços pequenos

        . Reusáveis

        . Testáveis

        . Legiveis

        . Fácil manutenção

Aula 8. Cobre o pé, descobre a cabeça
-------------------------------------

    . Está bem melhor, mas...

    . A dependência ainda existe 

        . Só mudou de lugar

    . Depende da implementação 

        . Depender da abastração.

    . Exemplo:

        . Sem injeção de dependência:

            public class OrderController: Controller{

                [Route("v1/orders")]
                [HttpPost]
                public async Task<string> Place(    string cutomerId,
                                                    string zipCode,
                                                    string promoCode,
                                                    int[] products){
                    ...
                    var deliveryService = new DeliveryService();

                    decimal deliveryFee = deliveryService.GetDeliveryFee( zipCode );
                    ...
                }
            }

        . Com injeção de dependência:

            public class OrderController: Controller{

                private readonly DeliveryService _deliveryService;

                OrderController( DeliveryService deliveryService){
                    _deliveryService = deliveryService;
                }

                [Route("v1/orders")]
                [HttpPost]
                public async Task<string> Place(    string cutomerId,
                                                    string zipCode,
                                                    string promoCode,
                                                    int[] products){
                    ...
                    decimal deliveryFee = _deliveryService.GetDeliveryFee( zipCode );
                    ...
                }
            }

Aula 9. Inversão de controle
-----------------------------

    .Inversão de controle

    . Externiliza as responsabilidades

        . Delega

    . Cria uma dependêcia externa

        . O controller não é mais responsável pelo cálculo do frete,
            aogra ele depende de um serviço.

    . Exemplo:

        public class OrderController: Controller{

            private readonly DeliveryService _deliveryService;

            OrderController( DeliveryService deliveryService){
                _deliveryService = deliveryService;
            }

            [Route("v1/orders")]
            [HttpPost]
            public async Task<string> Place(    string cutomerId,
                                                string zipCode,
                                                string promoCode,
                                                int[] products){
                ...
                decimal deliveryFee = _deliberyService.GetDeliveryFee( zipCode );
            }
        }

Aula 10. Abstração e implementação
---------------------------------

    . Impelmentalçao

        . Concreto

        . Materialização

        . É o "Como"

    . Abstração 

        . Contrato

        . Só as definições

        . é o "O que"

    . Nem tudo precisa abstrair, ou criar uma interface para utilizar injeção de dependência

Aula 11. Porque abastrair?
------------------------

    . Facilita as mudanças

        . Imagina um cenário crítico como a troca de um banco de dados

    . Testes de Unidade

        . Não podem depender de banco, rede ou qq outra coisa externa

    . Se vc depende da abastração, a implementação não importa...

    . Exemplo:

        public class OrderController: Controller{

            private readonly DeliveryService _deliveryService;

            OrderController( DeliveryService deliveryService){
                _deliveryService = deliveryService;
            }

            [Route("v1/orders")]
            [HttpPost]
            public async Task<string> Place(    string cutomerId,
                                                string zipCode,
                                                string promoCode,
                                                int[] products
                                                [FromServices] DeliveryService deliveryService){
                ...
                decimal deliveryFee = deliberyService.GetDeliveryFee( zipCode );
            }
        }

Aula 12. Princípio da Inversão de Dependência
---------------------------------------------

    . Princípio da inversão de dependênci

    . Depender de abstrações e não de implemnetações

    . Exemplo

        public interface IDeliveryService{
            decimal GetDeliveryFee( string zipCode);
        }

    . Usando a interface

        public class DeliverService: IDeliveryService{
            public decimal GetDeliveryFee( string zipCode){
                ...
            }
        }

    . Utilização no Controller:

        public class OrderController: Controller{

            private readonly IDeliveryService _deliveryService;

            OrderController( IDeliveryService deliveryService){
                _deliveryService = deliveryService;
            }

            ...
        }

    . Utilização da abstração nos testes:

        public FakeDeliveryService: IDeliveryService{
            public decimal GetDeliveryFee( string zipCode ){
                return 10;
            }
        }

        ...

        [TestMethod]
        public void ShouldPlaceAndOrder(){
            IDeliveryService service = new FackeDeliveryService();
            var controller = new OrderController( service );
        }

        . Para fazer testes automatizados, posso criar uma uma classe "Fake" sem a necessidade de depender de 
            outras classes, banco de dados, etc.

    . Muito sugerido pelos princípios SOLID

Aula 13. Service Locator
------------------------

    . SL diz como resolver as depências criadas 

        . Funciona como um dê-para

    . Já temos um pronto no ASP.NET (build in the box)

        . Podemos utilizar outros 

            // Assim
            builder.Services.AddTransient<IDeliveryFeeService,, DeliveryFeeService>();

            // ou
            builder.Services.AddScoped<IDeliveryFeeService,, DeliveryFeeService>();

            // ou
            builder.Services.AddSingleton<IDeliveryFeeService,, DeliveryFeeService>();

Aula 14. AddTransient, AddScoped, AddSingleton
----------------------------------------------

    . AddTransient

        builder.Services.AddTransient<IDeliveryFeeService,, DeliveryFeeService>();

            . Sempre cira uma nova instância do objeto

            . Ideal para cenários onde queremos sempre um novo objeto.

    . AddScoped

        builder.Services.AddScoped<IDeliveryFeeService,, DeliveryFeeService>();

            . Cria um objeto por transação

            . Se você chamar 2 ou mais serviços que dendem do mesmo objeto, a mesma instância será utilizada

            . Ideal para cenários onde queremos apenas um objeto por requisição (banco).

    . AddSingleton

        . Cria um objeto quando a aplicação inicia e apaga da sessão quando a aplicação termina.

            builder.Services.AddSingleton<IDeliveryFeeService,, DeliveryFeeService>();

        . Mantém este objeto na memória até a aplicação para ou reiniciar 

        . Sempre devolve a mesma instância deste objeto, com os mesmos valores.

        . Padrão que visa garantir apenas um instância de um objeto para aplicão toda

        . Um bom exemplo são as configurações

            . Uma vez carregadas, ficam até a aplicação reiniciar.

        . Cuidado.


Aula 15. AddDbContext
---------------------

    . Item especial do tipo Scoped

        builder.Services.AddDbContext< BlogDataContext>( x => useSqlServer( connStr ));

    . Utilizado exclusivamente com o EF

    . Garante que a conexão só dura até o fim da requisição


Aula 16. Apresentação
---------------------

    . Acesse o prompt da pasta de projeto e execute o comando abaixo:

        git clone https://github.com/balta-io/2813.git


Aula 17. Criando Dependência
----------------------------

    . Acesse a pasta "01. Inicial/DependencyStore" e entre no VSCode colocando essa pasta como raiz nele

    . Acesse a classe "Controllers/OrderController.cs"

    . Crie a pasta "Repositories" dentro da pasta raiz e dentro dela crie a classe abaixo:

        using Dapper;
        using Dependency.Models;
        using Microsoft.Data.SqlClient;


        namespce DependencyStore.Repositories;

        public class CustomerRepository{

            // Padrão de nomenclatura para propriedades privadas é iniciar com o caracter "_"
            //
            // O "readonly" só permite atribuir um valor a propriedade somente dentro do construtor
            private readonly SqlConnection _connection;

            // Poderiamos criar o método construtor com um "Expression Body" por termos somente uma linha
            //public CustomerRepository( SqlConnection connection ) => _connection = connection;

            public CustomerRepository( SqlConnection connection ){
                _connection = connection;
            }
            
            public async Task<Customer?> GetByIdAsync( string customerId){

                const string query = "SELECT [Id], [Name], [Email] FROM CUSTOMER WHERE ID=@id";
                
                return await _connection.QueryFirstOrDefaultAsync<Customer>(query, new  { 
                                                                                            id = customerId 
                                                                                        });
            }
        }

Aula 18. DIP na prática 
-----------------------

    . Crie a pasta "Repositories/Contracts/Repositories".

    . Dentro da pasta criada crie a interface abaixo:

    