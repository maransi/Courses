Fundamentos do Entity Framework - Balta
---------------------------------------

Aula 2. Ferramentas
-------------------

. Este curos é continuação do curso Fundamentos C#, OOP, SQL Server e Dapper.

. Utilizaremos:

    Umas das plataformas Windows. MAC, Ou Linux
    NET 5 ou superior
    Azure Data Studio
    SQL Server
    VS Code

. Instalação do Docker

	. Instalação

		. Instalação nas distribuições baseadas no Ubuntu:

			. A URL abaixo tem os passos atualizado para instalação do Docker:

				https://docs.docker.com/engine/install/ubuntu/

			. Instalação Atualizada

				sudo apt-get update
				sudo apt-get install \
					ca-certificates \
					curl \
					gnupg \
					lsb-release

				curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

				echo \
					"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
					$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

				sudo apt-get update
				sudo apt-get install docker-ce docker-ce-cli containerd.io
				sudo docker --version

				sudo groupadd docker
				sudo gpasswd -a <usuario> docker
				sudo chown "$USER":"$USER" /var/run/docker.sock -R
				sudo service docker restart

				docker --version

		. Instalação no Mint

			sudo apt-get update
			cd Downloads/
			sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
			curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
			sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo "$UBUNTU_CODENAME") stable"
			sudo apt-get update
			sudo apt-get -y install docker-ce docker-compose
			sudo usermod -aG docker $USER
			docker --version

            sudo groupadd docker
            sudo gpasswd -a <usuario> docker
            sudo chown "$USER":"$USER" /var/run/docker.sock -R
            sudo service docker restart

            docker --version

. Instalando o .NET Core SDK

    . Instalçao Atualizada:

        . URL com informações para realizar a instalação.

            https://docs.microsoft.com/pt-br/dotnet/core/install/linux-ubuntu

            . IMPORTANTE: Acesse a instalação da distribuição e versão especifica do linux que estamos utilizando para 
                            proceder os comandos adequadamente.

                            A instalação abaixo está para o Ubuntu 20.04

        # Comando para o Ubuntu 22.04 em diante
        # wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
        # sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb

        # Instalação do SDK
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb

        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update

        sudo apt-get install -y gpg
        wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
        sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
        wget https://packages.microsoft.com/config/ubuntu/20.04/prod.list
        sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
        sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list

        # Comando para o Ubuntu 22.04 em diante
        # wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
        # sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb

        sudo apt-get update; \
        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y dotnet-sdk-5.0

        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y aspnetcore-runtime-5.0

        sudo apt-get install -y dotnet-runtime-5.0


. Instalando o VS Code

    Instalação das extensões do VSCode

            C# 
            C# Extensions
            C# XML Documentation Comments
            vscode-icons (Opcional)
            Docker

        . Atalhos:

            Ctrl + K + D ou Shit + Alt + F:             Identa todo o seu código automaticamente;
            Ctrl + K + C:                               comenta um bloco de linhas;
            Ctrl + K + U:                               descomenta um bloco de linhas;
            Alt + Left Arrow:                           durante a programação, volta um método que você estava navegando;
            Alt + Right Arrow:                          durante a programação, avança um método que você estava navegando;
            Ctrl + .:                                   implementa o método/classe inexistente que você acabou de escrever;
            Ctrl + M + O:                               esconde todas as regions da classe atual;
            Ctrl + Shift + B:                           compila todos os projetos;
            F5:                                         manda depurar um projeto;
            Ctrl + F5:                                  manda executar um projeto;
            F10:                                        durante a depuração, avança uma linha;
            F11:                                        durante a depuração, avança uma linha entrando nos detalhes da mesma;


    Configurar Visual Studio Code para .NETCore

        . Acesse File / Preferences / Settings

        . Digite C#

        . Acesse "C# Configuration / CSharp Format Enabled" e habilite a configuração

        . Digite "Format on save" e habilite a configuração

        . Digite "Final" e habilite a configuração "Files: Insert final newline" e habilite a configuração


. Instalando o SQL Server

    https://docs.microsoft.com/pt-br/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&pivots=cs1-bash
    https://docs.microsoft.com/pt-br/sql/linux/sql-server-linux-setup-tools?view=sql-server-ver15#ubuntu


    docker container run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Joao3.16"    -p 1433:1433 --name sqlserver --hostname sqlserver    -d mcr.microsoft.com/mssql/server:2019-latest
    docker container ps -a
    docker container exec -t sqlserver cat /var/opt/mssql/log/errorlog | grep connection

    # Testar no linux, não funcionou no windows
    docker container exec -it sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U SA  -P "$(read -sp "Enter current SA password: "; echo "${REPLY}")"  -Q "ALTER LOGIN SA WITH PASSWORD=\"$(read -sp "Enter new SA password: "; echo "${REPLY}")\""

    # Execute os comandos abaixo ao entrar no container
    #
    # hostname -I
    # ip a
    docker exec -it sqlserver "bash"

    curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
    sudo apt-get update 
    sudo apt-get install mssql-tools unixodbc-dev
    sudo apt-get update 
    sudo apt-get install mssql-tools
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
    source ~/.bashrc
    
    # Execute o comando abaixo e substitua o endereço IP do comando "sqlcmd" pelo adquirido no "hostname -I"
    #
    # hostname -I
    sqlcmd -S 192.168.0.82,1433 -U SA -P "Joao3.16"


    # Execute os comandos abaixo dentro do sqlcmd
    EXEC sp_databases
    GO

    EXEC sp_helpdb    
    GO

    SELECT name FROM master..sysdatabases ORDER BY name
    GO

    EXEC sp_msForEachDB 'PRINT ''?'''
    GO

    EXIT

. Instalando Azure Data Studio

    . Para Linux siga os passos abaixo:

        Acessar o link abaixo para fazer o download do arquivo .deb:

            https://go.microsoft.com/fwlink/?linkid=2169956

        cd ~
        sudo dpkg -i ./Downloads/azuredatastudio-linux-<version string>.deb
        azuredatastudio

    . Para Windows acesse o link abaixo:

        https://docs.microsoft.com/pt-br/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15    




https://entityframework.net/ef-code-first
https://www.entityframeworktutorial.net/code-first/simple-code-first-example.aspx
https://www.tutorialspoint.com/entity_framework/entity_framework_environment_setup.htm#



Aula 3. ORM
-----------

    . ORM - Object Relational Mapping

    . Responsável por fazer o de-para das tabelas para os objetos de classes.

    . Substitui o desenvolvimento de SQL pelo mapeamento das classes de forma que criem os objetos
        automaticamente.


Aula 4. Entity Framework
------------------------

    . O EF é um framework

    . É um conjunto de bibliotecas, muito mais poderoso, complexo e pesado do que o Dapper.

    . Permite trabalhar com CRUD, Migrações.


    .NET Core Command-Line Interface (CLI)    
    --------------------------------------

        . Digite no terminal "dotnet --info" para apresentar informações variadas da instação do dotnet

        . Digite no terminal "dotnet new" irá apresentar as várias possibilidades de criar diversos projetos, exemplo:

            dotnet new mvc

            dotnet run

            #Acesse o navegador e digite a URL: https://localhost:5001/ para ver o resultado do projeto criado.

        . Ctrl + C no terminal acaba com a execução do projeto:

        https://www.infoq.com/br/articles/netcore-cli/    

    . Instalar pacotes através do Nuget.org
    ---------------------------------------

        https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/7.0.0-preview.4.22229.2#versions-body-tab

        . Ao ser compilada, uma biblioteca gera um arquivo DLL. Será esta DLL que os outros projetos irão utilizar. 
            O NuGet aproveita desta característica da plataforma para definir seus pacotes.

        . Na prática, um pacote NuGet é um arquivo compactado com a extensão .nupkg que contém um código compilado (DLL), 
            outros arquivos relacionados a este código (como imagens, etc.) e um arquivo de configuração que contém 
            informações sobre o pacote, como: número de versão, criador, etc.

        . Estes pacotes .nupkg podem ser publicados em repositórios públicos ou privados, onde os desenvolvedores podem 
            consumi-los, adicionando-os em seus projetos e utilizando no código as funcionalidades que fornecerem.

        . Em se tratando de projeto, como se fosse as dependências de bibliotecas.

        . Acesse o site nuget.org, digite "Microsoft Entity Framework Core" e faça a pesquisa.

        . Acesse o item Microsoft.EntityFrameworkCore.

        . Acesse uma das versões, atualmente 5.0.5.
        
        . Acesse a aba .NetCli.

        . Copie o comando sugerido por esse caminho:

            dotnet add package Microsoft.EntityFrameworkCore --version 5.0.5

        . Acesse o terminal, vá na pasta do projeto e execute o comando acima. Cuidado é necessário acessar a pasta do projeto
            e não da solução, exemplo: ~/workspace-two/CSharpBasico/helloWorld.


        . Após a execução, no terminal, execute um dos comandos abaixo:

            dotnet restore

            ou

            dotnet build

        . Acesse o Visual Studio Code "code ." para entrar no projeto e acesse o arquivo com extensão "*.csproj". Podemos verificar 
            que agora temos o pacote dentro da aplicação:

            <ItemGroup>
                <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.5" />
            </ItemGroup>

        . Retorne ao Home do site nuget.org e digite "Pomelo Entity Framework core" e acesse o link do MySQL.

        . Acesse a aba "PackageReference" e copie o comando sugerido:

        . Acesse novamente o arquivo com a extensão *.csproj e insira a dependência copiada dentro do nó "ItemGroup":

            <ItemGroup>
                <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.5" />
                <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="5.0.0-alpha.2" />    
            </ItemGroup>

        . Salve o conteúdo do arquivo, o VsCode irá pedir para dar o "Restore", confirme o restore.

        . Se quiser podemos dar o "dotnet restore", ou o "dotnet build", no terminal.

        . Caso haja a necessidade de retirar alguma dependência do nó "ItemGroup", acesse o terminal, e execute os comandos abaixo:

            dotnet clean
            dotnet restore

Aula 4. DataContext
-------------------

    . DB Context - Uma instância DbContext representa uma combinação da unidade de padrões de trabalho e de repositório, 
                    de modo que ele possa ser usado para consultar de um banco de dados e agrupar alterações que serão 
                    gravadas novamente no armazenamento como uma unidade. DbContext é conceitualmente semelhante a 
                    ObjectContext.

        . As classes de contexto derivam da "System.Data.e/ntity.DbContextDbContext".
        . Uma instância de uma classe de contexto representa a unidade de trabalho e segue o "pattern" "Repository".
        . Pode combinar várias transações numa simples transação.
        . Usada para consultar e salvar dados
        . Usada para configurar classes de domínio, mapeamento de relacionamento, cache, transação, etc.

        . Exemplo:

            using System.Data.Entity;

            public class SchoolContext : DbContext
            {
                public SchoolContext()
                {

                }
                // Entities        
                public DbSet<Student> Students { get; set; }
                public DbSet<StudentAddress> StudentAddresses { get; set; }
                public DbSet<Grade> Grades { get; set; }
            } 
    
    . DBSet - Um DbSet representa a coleção de todas as entidades no contexto ou que pode ser consultada a partir do 
                banco de dados, de um determinado tipo. Os objetos DbSet são criados a partir de um DbContext usando 
                o método DbContext.


Aula 5. Restaurando o banco
---------------------------

