Fundamentos do Entity Framework - Balta
---------------------------------------

https://www.entityframeworktutorial.net/



INTRODUÇÃO
----------


Aula 2. Ferramentas
-------------------

. Este curos é continuação do curso Fundamentos C#, OOP, SQL Server e Dapper.

. Utilizaremos:

    Umas das plataformas Windows. MAC, Ou Linux
    NET 5 ou superior
    Azure Data Studio
    SQL Server
    VS Code

. Instalação do Docker

	. Instalação

		. Instalação nas distribuições baseadas no Ubuntu:

			. A URL abaixo tem os passos atualizado para instalação do Docker:

				https://docs.docker.com/engine/install/ubuntu/

			. Instalação Atualizada

				sudo apt-get update
				sudo apt-get install \
					ca-certificates \
					curl \
					gnupg \
					lsb-release

				curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

				echo \
					"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
					$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

				sudo apt-get update
				sudo apt-get install docker-ce docker-ce-cli containerd.io
				sudo docker --version

				sudo groupadd docker
				sudo gpasswd -a <usuario> docker
				sudo chown "$USER":"$USER" /var/run/docker.sock -R
				sudo service docker restart

				docker --version

		. Instalação no Mint

			sudo apt-get update
			cd Downloads/
			sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
			curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
			sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(. /etc/os-release; echo "$UBUNTU_CODENAME") stable"
			sudo apt-get update
			sudo apt-get -y install docker-ce docker-compose
			sudo usermod -aG docker $USER
			docker --version

            sudo groupadd docker
            sudo gpasswd -a <usuario> docker
            sudo chown "$USER":"$USER" /var/run/docker.sock -R
            sudo service docker restart

            docker --version

. Instalando o .NET Core SDK

    . Instalçao Atualizada:

        . URL com informações para realizar a instalação.

            https://docs.microsoft.com/pt-br/dotnet/core/install/linux-ubuntu

            . IMPORTANTE: Acesse a instalação da distribuição e versão especifica do linux que estamos utilizando para 
                            proceder os comandos adequadamente.

                            A instalação abaixo está para o Ubuntu 20.04

        # Comando para o Ubuntu 22.04 em diante
        # wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
        # sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb

        # Instalação do SDK
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb

        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update

        sudo apt-get install -y gpg
        wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
        sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
        wget https://packages.microsoft.com/config/ubuntu/20.04/prod.list
        sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
        sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list

        # Comando para o Ubuntu 22.04 em diante
        # wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
        # sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb

        sudo apt-get update; \
        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y dotnet-sdk-5.0

        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y aspnetcore-runtime-5.0

        sudo apt-get install -y dotnet-runtime-5.0


. Instalando o VS Code

    Instalação das extensões do VSCode

            C# 
            C# Extensions
            C# XML Documentation Comments
            vscode-icons (Opcional)
            Docker

        . Atalhos:

            Ctrl + K + D ou Shit + Alt + F:             Identa todo o seu código automaticamente;
            Ctrl + K + C:                               comenta um bloco de linhas;
            Ctrl + K + U:                               descomenta um bloco de linhas;
            Alt + Left Arrow:                           durante a programação, volta um método que você estava navegando;
            Alt + Right Arrow:                          durante a programação, avança um método que você estava navegando;
            Ctrl + .:                                   implementa o método/classe inexistente que você acabou de escrever;
            Ctrl + M + O:                               esconde todas as regions da classe atual;
            Ctrl + Shift + B:                           compila todos os projetos;
            F5:                                         manda depurar um projeto;
            Ctrl + F5:                                  manda executar um projeto;
            F10:                                        durante a depuração, avança uma linha;
            F11:                                        durante a depuração, avança uma linha entrando nos detalhes da mesma;


    Configurar Visual Studio Code para .NETCore

        . Acesse File / Preferences / Settings

        . Digite C#

        . Acesse "C# Configuration / CSharp Format Enabled" e habilite a configuração

        . Digite "Format on save" e habilite a configuração

        . Digite "Final" e habilite a configuração "Files: Insert final newline" e habilite a configuração


. Instalando o SQL Server

    https://docs.microsoft.com/pt-br/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&pivots=cs1-bash
    https://docs.microsoft.com/pt-br/sql/linux/sql-server-linux-setup-tools?view=sql-server-ver15#ubuntu


    docker container run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Joao3.16"    -p 1433:1433 --name sqlserver --hostname sqlserver    -d mcr.microsoft.com/mssql/server:2019-latest
    docker container ps -a
    docker container exec -t sqlserver cat /var/opt/mssql/log/errorlog | grep connection

    # Testar no linux, não funcionou no windows
    docker container exec -it sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U SA  -P "$(read -sp "Enter current SA password: "; echo "${REPLY}")"  -Q "ALTER LOGIN SA WITH PASSWORD=\"$(read -sp "Enter new SA password: "; echo "${REPLY}")\""

    # Execute os comandos abaixo ao entrar no container
    #
    # hostname -I
    # ip a
    docker exec -it sqlserver "bash"

    curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
    sudo apt-get update 
    sudo apt-get install mssql-tools unixodbc-dev
    sudo apt-get update 
    sudo apt-get install mssql-tools
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
    source ~/.bashrc
    
    # Execute o comando abaixo e substitua o endereço IP do comando "sqlcmd" pelo adquirido no "hostname -I"
    #
    # hostname -I
    sqlcmd -S 192.168.0.82,1433 -U SA -P "Joao3.16"


    # Execute os comandos abaixo dentro do sqlcmd
    EXEC sp_databases
    GO

    EXEC sp_helpdb    
    GO

    SELECT name FROM master..sysdatabases ORDER BY name
    GO

    EXEC sp_msForEachDB 'PRINT ''?'''
    GO

    EXIT

. Instalando Azure Data Studio

    . Para Linux siga os passos abaixo:

        Acessar o link abaixo para fazer o download do arquivo .deb:

            https://go.microsoft.com/fwlink/?linkid=2169956

        cd ~
        sudo dpkg -i ./Downloads/azuredatastudio-linux-<version string>.deb
        azuredatastudio

    . Para Windows acesse o link abaixo:

        https://docs.microsoft.com/pt-br/sql/azure-data-studio/download-azure-data-studio?view=sql-server-ver15    




https://entityframework.net/ef-code-first
https://www.entityframeworktutorial.net/code-first/simple-code-first-example.aspx
https://www.tutorialspoint.com/entity_framework/entity_framework_environment_setup.htm#



Aula 3. ORM
-----------

    . ORM - Object Relational Mapping

    . Responsável por fazer o de-para das tabelas para os objetos de classes.

    . Substitui o desenvolvimento de SQL pelo mapeamento das classes de forma que criem os objetos
        automaticamente.


Aula 4. Entity Framework
------------------------

    . O EF é um framework

    . É um conjunto de bibliotecas, muito mais poderoso, complexo e pesado do que o Dapper.

    . Permite trabalhar com CRUD, Migrações.


    .NET Core Command-Line Interface (CLI)    
    --------------------------------------

        . Digite no terminal "dotnet --info" para apresentar informações variadas da instação do dotnet

        . Digite no terminal "dotnet new" irá apresentar as várias possibilidades de criar diversos projetos, exemplo:

            dotnet new mvc

            dotnet run

            #Acesse o navegador e digite a URL: https://localhost:5001/ para ver o resultado do projeto criado.

        . Ctrl + C no terminal acaba com a execução do projeto:

        https://www.infoq.com/br/articles/netcore-cli/    

    . Instalar pacotes através do Nuget.org
    ---------------------------------------

        https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/7.0.0-preview.4.22229.2#versions-body-tab

        . Ao ser compilada, uma biblioteca gera um arquivo DLL. Será esta DLL que os outros projetos irão utilizar. 
            O NuGet aproveita desta característica da plataforma para definir seus pacotes.

        . Na prática, um pacote NuGet é um arquivo compactado com a extensão .nupkg que contém um código compilado (DLL), 
            outros arquivos relacionados a este código (como imagens, etc.) e um arquivo de configuração que contém 
            informações sobre o pacote, como: número de versão, criador, etc.

        . Estes pacotes .nupkg podem ser publicados em repositórios públicos ou privados, onde os desenvolvedores podem 
            consumi-los, adicionando-os em seus projetos e utilizando no código as funcionalidades que fornecerem.

        . Em se tratando de projeto, como se fosse as dependências de bibliotecas.

        . Acesse o site nuget.org, digite "Microsoft Entity Framework Core" e faça a pesquisa.

        . Acesse o item Microsoft.EntityFrameworkCore.

        . Acesse uma das versões, atualmente 5.0.5.
        
        . Acesse a aba .NetCli.

        . Copie o comando sugerido por esse caminho:

            dotnet add package Microsoft.EntityFrameworkCore --version 5.0.5

        . Acesse o terminal, vá na pasta do projeto e execute o comando acima. Cuidado é necessário acessar a pasta do projeto
            e não da solução, exemplo: ~/workspace-two/CSharpBasico/helloWorld.


        . Após a execução, no terminal, execute um dos comandos abaixo:

            dotnet restore

            ou

            dotnet build

        . Acesse o Visual Studio Code "code ." para entrar no projeto e acesse o arquivo com extensão "*.csproj". Podemos verificar 
            que agora temos o pacote dentro da aplicação:

            <ItemGroup>
                <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.5" />
            </ItemGroup>

        . Retorne ao Home do site nuget.org e digite "Pomelo Entity Framework core" e acesse o link do MySQL.

        . Acesse a aba "PackageReference" e copie o comando sugerido:

        . Acesse novamente o arquivo com a extensão *.csproj e insira a dependência copiada dentro do nó "ItemGroup":

            <ItemGroup>
                <PackageReference Include="Microsoft.EntityFrameworkCore" Version="5.0.5" />
                <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="5.0.0-alpha.2" />    
            </ItemGroup>

        . Salve o conteúdo do arquivo, o VsCode irá pedir para dar o "Restore", confirme o restore.

        . Se quiser podemos dar o "dotnet restore", ou o "dotnet build", no terminal.

        . Caso haja a necessidade de retirar alguma dependência do nó "ItemGroup", acesse o terminal, e execute os comandos abaixo:

            dotnet clean
            dotnet restore

Aula 4. DataContext
-------------------

    . DB Context - Uma instância DbContext representa uma combinação da unidade de padrões de trabalho e de repositório, 
                    de modo que ele possa ser usado para consultar de um banco de dados e agrupar alterações que serão 
                    gravadas novamente no armazenamento como uma unidade. DbContext é conceitualmente semelhante a 
                    ObjectContext.

        . As classes de contexto derivam da "System.Data.e/ntity.DbContextDbContext".
        . Uma instância de uma classe de contexto representa a unidade de trabalho e segue o "pattern" "Repository".
        . Pode combinar várias transações numa simples transação.
        . Usada para consultar e salvar dados
        . Usada para configurar classes de domínio, mapeamento de relacionamento, cache, transação, etc.

        . Exemplo:

            using System.Data.Entity;

            public class SchoolContext : DbContext
            {
                public SchoolContext()
                {

                }
                // Entities        
                public DbSet<Student> Students { get; set; }
                public DbSet<StudentAddress> StudentAddresses { get; set; }
                public DbSet<Grade> Grades { get; set; }
            } 
    
    . DBSet - Um DbSet representa a coleção de todas as entidades no contexto ou que pode ser consultada a partir do 
                banco de dados, de um determinado tipo. Os objetos DbSet são criados a partir de um DbContext usando 
                o método DbContext.


Aula 5. Restaurando o banco
---------------------------

    . Levante o docker do SQL Server.

    . No Azure Data Studio, acesse o banco de dados do docker e execute o script abaixo:

        CREATE DATABASE [Blog]
        GO

        USE [Blog]
        GO

        -- DROP TABLE [User]
        -- DROP TABLE [Role]
        -- DROP TABLE [UserRole]
        -- DROP TABLE [Post]
        -- DROP TABLE [Category]
        -- DROP TABLE [Tag]
        -- DROP TABLE [PostTag]

        CREATE TABLE [User] (
            [Id] INT NOT NULL IDENTITY(1, 1),
            [Name] NVARCHAR(80) NOT NULL,
            [Email] VARCHAR(200) NOT NULL,
            [PasswordHash] VARCHAR(255) NOT NULL,
            [Bio] TEXT NOT NULL,
            [Image] VARCHAR(2000) NOT NULL,
            [Slug] VARCHAR(80) NOT NULL,

            CONSTRAINT [PK_User] PRIMARY KEY([Id]),
            CONSTRAINT [UQ_User_Email] UNIQUE([Email]),
            CONSTRAINT [UQ_User_Slug] UNIQUE([Slug])
        )
        CREATE NONCLUSTERED INDEX [IX_User_Email] ON [User]([Email])
        CREATE NONCLUSTERED INDEX [IX_User_Slug] ON [User]([Slug])

        CREATE TABLE [Role] (
            [Id] INT NOT NULL IDENTITY(1, 1),
            [Name] VARCHAR(80) NOT NULL,
            [Slug] VARCHAR(80) NOT NULL,

            CONSTRAINT [PK_Role] PRIMARY KEY([Id]),
            CONSTRAINT [UQ_Role_Slug] UNIQUE([Slug])
        )
        CREATE NONCLUSTERED INDEX [IX_Role_Slug] ON [Role]([Slug])

        CREATE TABLE [UserRole] (
            [UserId] INT NOT NULL,
            [RoleId] INT NOT NULL,

            CONSTRAINT [PK_UserRole] PRIMARY KEY([UserId], [RoleId])
        )

        CREATE TABLE [Category] (
            [Id] INT NOT NULL IDENTITY(1, 1),
            [Name] VARCHAR(80) NOT NULL,
            [Slug] VARCHAR(80) NOT NULL,

            CONSTRAINT [PK_Category] PRIMARY KEY([Id]),
            CONSTRAINT [UQ_Category_Slug] UNIQUE([Slug])
        )
        CREATE NONCLUSTERED INDEX [IX_Category_Slug] ON [Category]([Slug])

        CREATE TABLE [Post] (
            [Id] INT NOT NULL IDENTITY(1, 1),
            [CategoryId] INT NOT NULL,
            [AuthorId] INT NOT NULL,
            [Title] VARCHAR(160) NOT NULL,
            [Summary] VARCHAR(255) NOT NULL,
            [Body] TEXT NOT NULL,
            [Slug] VARCHAR(80) NOT NULL,
            [CreateDate] DATETIME NOT NULL DEFAULT(GETDATE()),
            [LastUpdateDate] DATETIME NOT NULL DEFAULT(GETDATE()),

            CONSTRAINT [PK_Post] PRIMARY KEY([Id]),
            CONSTRAINT [FK_Post_Category] FOREIGN KEY([CategoryId]) REFERENCES [Category]([Id]),
            CONSTRAINT [FK_Post_Author] FOREIGN KEY([AuthorId]) REFERENCES [User]([Id]),
            CONSTRAINT [UQ_Post_Slug] UNIQUE([Slug])
        )
        CREATE NONCLUSTERED INDEX [IX_Post_Slug] ON [Post]([Slug])

        CREATE TABLE [Tag] (
            [Id] INT NOT NULL IDENTITY(1, 1),
            [Name] VARCHAR(80) NOT NULL,
            [Slug] VARCHAR(80) NOT NULL,

            CONSTRAINT [PK_Tag] PRIMARY KEY([Id]),
            CONSTRAINT [UQ_Tag_Slug] UNIQUE([Slug])
        )
        CREATE NONCLUSTERED INDEX [IX_Tag_Slug] ON [Tag]([Slug])

        CREATE TABLE [PostTag] (
            [PostId] INT NOT NULL,
            [TagId] INT NOT NULL,

            CONSTRAINT PK_PostTag PRIMARY KEY([PostId], [TagId])
        )


Aula 6 e 7. Criando os modelo - Parte 1 e 2
-------------------------------------------

    . Acesse a pasta local de projetos e execute o comando:

        dotnet new console -o Blog -n blog -f net5.0

    . Abra o VsCode e abra a pasta do projeto criado anteriormente.

    . Crie uma pasta no projeto com o nome "Models"

    . Crie a classe "User" dentro da pasta "Models" conforme o código abaixo:

        namespace Blog.Models
        {
            public class User
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public string Email { get; set; }
                public string PasswordHash { get; set; }
                public string Image { get; set; }
                public string Slug { get; set; }
                public string Bio { get; set; }
            }
        }

    . Crie a classe "Role" dentro da pasta "Models" conforme o código abaixo:

        namespace Blog.Models
        {
            public class Role
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public string Slug { get; set; }
            }
        }

    . Crie a classe "UserRole" dentro da pasta "Models" conforme o código abaixo:

        namespace Blog.Models
        {
            public class UserRole
            {
                public int UserId { get; set; }
                public int RoleId { get; set; }
            }
        }

    . Crie a classe "Category" dentro da pasta "Models" conforme o código abaixo:

        namespace Blog.Models
        {
            public class Category
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public string Slug { get; set; }
            }
        }

    . Crie a classe "Tag" dentro da pasta "Models" conforme o código abaixo:

        using System.ComponentModel.DataAnnotations;
        using System.ComponentModel.DataAnnotations.Schema;

        namespace Blog.Models
        {
            public class Tag
            {
                public int Id { get; set; }
                public string Name { get; set; }
                public string Slug { get; set; }
            }
        }

    . Crie a classe "Post" dentro da pasta "Models" conforme o código abaixo:

        using System;

        namespace Blog.Models
        {
            public class Post
            {
                public int Id { get; set; }
                public int CategoryId { get; set; }
                public int AuthorId { get; set; }
                public string Title { get; set; }
                public string Summary { get; set; }
                public string Body { get; set; }
                public string Slug { get; set; }
                public DateTime CreateDate { get; set; }
                public DateTime LastUpdateDate { get; set; }
            }
        }

    . Crie a classe "PostTag" dentro da pasta "Models" conforme o código abaixo:

        namespace Blog.Models
        {
            public class PostTag
            {
                public int PostId { get; set; }
                public int TagId { get; set; }
            }
        }

Aula 8 - DbSet
--------------

    . Acesse a pasta raiz do projeto e execute os comandos abaixo:

        dotnet add package Microsoft.EntityFrameworkCore --version 5.0.9        
        
        dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 5.0.9

    . Crie a pasta "Data" dentro do projeto e crie a classe "BlogDataContext.cs" com o código abaixo:

        using Blog.Models;
        using Microsoft.EntityFrameworkCore;

        namespace Blog.Data
        {
            public class BlogDataContext : DbContext
            {

                // Devido a problema de chaves, as linhas comentadas referem-se a classes onde a chave primária são chaves composta
                // Mais a frente iremos configurar esses tipos de classes

                public DbSet<Category> Categories { get; set; }
                public DbSet<Post> Posts { get; set; }
                // public DbSet<PostTag> PostTags { get; set; }
                public DbSet<Role> Roles { get; set; }
                public DbSet<Tag> Tags { get; set; }
                public DbSet<User> Users { get; set; }
                // public DbSet<UserRole> UserRoles { get; set; }

                protected override void OnConfiguring(DbContextOptionsBuilder options)
                    => options.UseSqlServer("Server=localhost,1433;Database=Blog;User ID=sa;Password=Joao3.16");
            }
        }

    . A partir deste momento se formos na classe "Program.cs", criarmos a classe de "context", já estará
        visivel os "DbContext":

        . Insira as linhas abaixo na classe "Program.cs":

            ...
            class Program
            {
                static void Main( string[] args)
                {
                    ...

                    var ctx = new BlogDataContext();

                    ctx.Categories();   // Já está visivel
                }
            }


Aula 9 - Configurando o DAtaContext
-----------------------------------

    . O método "OnConfiguring" é o local onde faremos a conexão com o banco de dados.

    . Altere o código do método "Main" da classe "Program.cs":

        ...
        static void Main( string[] args ){
            using( var context = new BlogDataContext() ){

            }
        }
        ...


Aula 10. Create
---------------

    . Acesse a classe "Tag.cs" e inclua as linhas abaixo:

        ...
        using System.ComponentModel.DataAnnotations;            // Linha inserida
        using System.ComponentModel.DataAnnotations.Schema;     // Linha inserida
        namespace Blog.Models
        {
            [Table("Tag")]                                      // Linha inserida
            public class Tag
            {
                [Key]                                           // Linha inserida
                public int Id { get; set; }

                ...
            }
        }

    . Altere o código do método "Main" da classe "Program.cs":

        ...
        static void Main( string[] args ){
            using( var context = new BlogDataContext() ){

                var tag = new Tag { Name = "ASP.NET", Slug = "aspnet" };    // Linha inserida

                context.Tags.Add( tag );                                    // Linha inserida

            }
        }
        ...

    . Execute o projeto e verifique no banco se a linha acima foi criada com sucesso na tabela "tag"

        . IMPORTANTE: Ela não foi criada, porque o "context" é um banco em memória, para efetivar a inserção
                        no banco é necessário usar o comando "context.SaveChanges()"

    . Insira a linha abaixo no método "Main" da classe "Program.cs":


        ...
        static void Main( string[] args ){
            using( var context = new BlogDataContext() ){

                var tag = new Tag { Name = "ASP.NET", Slug = "aspnet" };    

                context.Tags.Add( tag );                                    

                context.SaveChanges();              // Linha inserida

            }
        }
        ...

    . Execute o projeto e verifique no banco se a linha acima foi criada com sucesso na tabela "tag"


Aula 11. Update
---------------

    . Altere o método "Main" como abaixo:

        ...
        static void Main( string[] args ){
            using( var context = new BlogDataContext() ){

                // var tag = new Tag { Name = "ASP.NET", Slug = "aspnet" };    

                // context.Tags.Add( tag );                                    

                // context.SaveChanges();              

                var tag = context.Tags.FirstOrDefault( x => x == 2 )    // Linha inserida

                tag.Name = ".NET";                                      // Linha inserida

                tag.Slug = "dotnet";                                    // Linha inserida

                context.Update( tag );                                  // Linha inserida
                context.SaveChanges();              // Linha inserida
            }
        }
        ...

    . Execute o projeto e verifique no banco se a linha acima foi criada com sucesso na tabela "tag"

    . Quando fazemos a localização de uma ocorrência "context.Tags.FirstOrDefault" o EF traz diversas 
        informações do banco conhecida como METADADOS (Última atualização, data da criação, versão atual e a
        que está no banco ). Dessa forma que o EF consegue comparar as informações são alteradas dos DBSet.
        Por isso precisamos trazer as informações do banco para que o EF possa realizar essas comparações.

Aula 12. Delete
---------------

    . Altere o método "Main" como abaixo:

        ...
        static void Main( string[] args ){
            using( var context = new BlogDataContext() ){

                // var tag = new Tag { Name = "ASP.NET", Slug = "aspnet" };    

                // context.Tags.Add( tag );                                    

                // context.SaveChanges();              

                var tag = context.Tags.FirstOrDefault( x => x == 2 )    

                // tag.Name = ".NET";                                      

                // tag.Slug = "dotnet";                              

                // context.Update( tag )      

                context.Remove( tag );              // Linha inserida
                context.SaveChanges();              
            }
        }
        ...

    . Execute o projeto e verifique no banco se a linha acima foi criada com sucesso na tabela "tag"


Aula 13. ToList
---------------


    . Altere o método "Main" como abaixo:

        . Apague as linhas no interior do método "Main" e substitua pela abaixo:

            ...
            static void Main( string[] args ){
                using( var context = new BlogDataContext() ){

                    var tag1 = new Tag { Name = "ASP.NET", Slug = "aspnet" };    

                    context.Tags.Add( tag1 );                                    

                    var tag2 = new Tag { Name = ".NET", Slug = "aspnet" };    

                    context.Tags.Add( tag2 );                                    

                    context.SaveChanges();              
                }
            }
            ...

        . Execute o projeto.

        . Altere o método "Main" novamente.

            ...
            static void Main( string[] args ){
                using( var context = new BlogDataContext() ){

                    // var tag1 = new Tag { Name = "ASP.NET", Slug = "aspnet" };    

                    // context.Tags.Add( tag1 );                                    

                    // var tag2 = new Tag { Name = ".NET", Slug = "aspnet" };    

                    // context.Tags.Add( tag2 );                                    

                    // context.SaveChanges();              

                    // Execute o select internamente
                    var tags = context.Tags.ToList();

                    foreach( var tag in tags ){
                        System.Console.Write($"{tag.Name}");
                    }
                }
            }
            ...

        . Execute o projeto.

    . Algumas formas de executar o ToList()

        var tags = context
                    .Tags
                    .ToList()
                    .Where( x => x.Name.Contains(".NET"));  // Neste caso o filtro será aplicado em memória
                                                            // acarretando em lentidão

        var tags = context
                    .Tags
                    .Where( x => x.Name.Contains(".NET"));  // Neste caso o filtro será aplicado no banco no SQL
                    .ToList();

        . IMPORTANTE: A segunda forma é a mais rápida, dê preferência sempre colocar o "Where(...)" antes do "ToList()".


Aula 14. AsNoTracking
---------------------

    var tags = context
                .Tags
                .AsNoTracking()
                .ToList();

    . O "AsNoTracking" não traz as informações do METADADO. Deixando mais rápido as consultas ao usar "ToList".

    . IMPORTANTE: Quando utilizar ".Update()" ".Remove()" não use "AsNoTracking", porque para essas operações
                    precisam saber detalhes de chaves, alterações, etc. para efetivar a alteração
                    no banco.

                

Aula 15. First, Single
----------------------

    . Diferença entre "FirstOrDefault", "First", "Single"

        . FirtsOrDefaul         - Se tiver mais de um registro no banco o EF trará somente a primeira ocorrência
        . First                 - Se tiver mais de um registro no banco o EF dará erro
        . Single                - Idem, dará erro



OPERAÇÕES BÁSICAS
-----------------

Aula 16. DataAnnotations
------------------------

    . Tipos:

        . Fluent Mapping

            . Mapeamento fluente
            . Feito em uma classe externa
            . Não "polui" a classe principal
            . Não cria dependências na classe/projeto principal

        . Data Annotations

            . Feitos diretamente nas classes
            . Mais simples e diretos
            . Depende do System.ComponentModel.DataAnnotations
                . Alguns dependem do Microsof.EntityFrameworkCore 


    System.ComponentModel.DataAnnotations Attributes
    ------------------------------------------------

    Attribute	        Description
    ---------           -----------
    Key	                Can be applied to a property to specify a key property in an entity and make the 
                        corresponding column a PrimaryKey column in the database.
    Timestamp	        Can be applied to a property to specify the data type of a corresponding column 
                        in the database as rowversion.
    ConcurrencyCheck	Can be applied to a property to specify that the corresponding column should be 
                        included in the optimistic concurrency check.
    Required	        Can be applied to a property to specify that the corresponding column is a 
                        NotNull column in the database.
    MinLength	        Can be applied to a property to specify the minimum string length allowed in 
                        the corresponding column in the database.
    MaxLength	        Can be applied to a property to specify the maximum string length allowed in 
                        the corresponding column in the database.
    StringLength	    Can be applied to a property to specify the maximum string length allowed in the 
                        corresponding column in the database.

    System.ComponentModel.DataAnnotations.Schema Attributes
    -------------------------------------------------------

    Attribute	        Description
    ---------           -----------
    Table	            Can be applied to an entity class to configure the corresponding table name and 
                        schema in the database.
    Column	            Can be applied to a property to configure the corresponding column name, order 
                        and data type in the database.
    Index	            Can be applied to a property to configure that the corresponding column should 
                        have an Index in the database. (EF 6.1 onwards only)
    ForeignKey	        Can be applied to a property to mark it as a foreign key property.
    NotMapped	        Can be applied to a property or entity class which should be excluded from the 
                        model and should not generate a corresponding column or table in the database.
    DatabaseGenerated	Can be applied to a property to configure how the underlying database should 
                        generate the value for the corresponding column e.g. identity, computed or none.
    InverseProperty	    Can be applied to a property to specify the inverse of a navigation property that 
                        represents the other end of the same relationship.
    ComplexType	        Marks the class as complex type in EF 6. EF Core 2.0 does not support this attribute.

https://www.entityframeworktutorial.net/code-first/table-dataannotations-attribute-in-code-first.aspx