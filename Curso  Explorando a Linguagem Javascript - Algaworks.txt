1. Instalando as ferramentas:

    . Nodejs

        sudo apt-get install nodejs
        sudo apt-get install npm

        ou

        sudo apt-get install curl python-software-properties
        curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
        sudo apt-get install -y nodejs
        node -v
        npm -v

        23. Instalação do Git

        sudo apt-get install git
        git --version
        git config --global user.name "maransi"
        git config --global user.email "maransi"
        git config --list

    . Configurando o VSCode:

        . Instale o Plugin "Code Runner"

            Escreva o código javascript dentro do VSCode e execute com a Ctrl + Alt + N;
            Para parar a execução Ctrl + Alt + M

    . Se chamarmos o node iremos acessar o prompt de comandos javascript.

2. Variáveis

    . Declare sempre as variáveis no inicio do programa;
    . A nomenclatura dos nomes de variáveis pode ser a mesma do java;
    . Utilize sempre a palavra reservada "var" para declarar variáveis:

        var valor = 10.00;
        var nome;

    . A tipagem das variáveis é dinâmica.
    . O comando typeof mostra o tipo da variável:

        > typeof valor;
          'float'

    String
    ------

    . Para descobrir o tamanho da variável utlizamos a propriedade length:

        > var nome = "MARCO";
        > nome.length;
            5

    . Sempre que for comparar variáveis utilize o triplo "=":

        > var nomeUusario = "MARCO";
        > var nomeSupervisor = "MARCO";
        > nomeUsuario === nomeSupervisor;
        >    true

    . Para localizar a posição de determinado caracter dentro da variável:

        > var nome = "MARCO";
        > nome.indexOf("AR");   // A contagem começa pelo índice 0
        >   1
        
    . Para localizar a última posição da constante:

        > var nome = "MARCO ANTONIO DA SILVA";
        > nome.lastIndexOf("A");    // Se não encontrar retorna -1
            21

    . Para pegar um pedaço da string:

        > nome.substring(0,5);
        > 'MARCO'

    . Para atualizar o conteúdo de uma variável:

        > nome.replace("ANTONIO", "A");
            'MARCO A DA SILVA'
    
    . Demais funções:

        > nome.toUpperCase();       // Para colocar o conteúdo em caixa alta
        > nome.toLowerCase();       // Caixa baixa
        > "Olá ".concat( nome );    // Concatenação
        > nome.                     // Dando tab aparecerá todas as funções para variáveis String

    Boolean
    -------

    . [true]    [false]

    . 0 é considerado como false:

        > !0;
        >   true
        > !!0
        >   false

    . "" é considerado false:

        > !""
        >   true
        > !!""
        >   false

    . !!NAN , !!false, !!undefined, !!null todos são false.

3. Operadores lógicos

    && = and
    || = or

4. Operadores de comparação:

    ==      // Na maioria das situações isto funcionará
    ===     // Esta comparação é mais eficiente, pois além do conteúdo, compara o tipo

        > var x = 10;
        > var y = "10";
        > x == y;
        >   true
        > x === y;
        >   false

    !=
    !===    //  Tem a mesma lógica do "==="

    . Via de regra, utilizar sempre o "===" e o "!==". A excessão é quando tivermos que descobrir se o conteúdo de uma
        variável é nula, neste caso podemos utilizar "!=". Isto se deve para podermos numa única situação pegarmos null e undefined

        var x;

6. Funções

    > var     subtrair = function( a, b){
        return a - b;
    
      }

    > var subtraido = subtrair( 10, 6);
    > console.log("10 + 6 = ", subtraido);
    >   4

    ou como uma Clousure

    > function incrementar{
    >    var valor = 0;
    >
    >    return function(){
    >       return ++valor;
    >    }
    > 
    >    return ++valor;
    > }
    >
    > var fn = incrementar();
    >
    > console.log( fn() );

7. Objetos

    Exemplo

        var obj =   {   codigo : 1,
                        nome : "MARCO",
                        imprimir : function(){
                            return "A pessoa ".concat( this.nome, " tem o  código ", this.codigo );
                        }
                    }

        obj.imprimir();

        console.log( obj );

        console.log( obj['nome'] );  // Forma flexível, possibilita acessar o propriedade através de uma String

    . É possível adicionar uma propriedade dinamicamente:

        obj.idade = 30;

        console.log( obj );

        console.log( obj.idade );

    . Incluindo dinamicamente uma função/método:

        obj.autorizar = function(){
            console.log("Pessoa autorizada");
        }

        obj.autorizar();

        console.log( obj.autorizar() );

     . Colocando um objeto dentro de outro:

        var obj =   {   codigo : 1,
                        nome : "MARCO",
                        imprimir : function(){
                            return "A pessoa ".concat( this.nome, " tem o  código ", this.codigo );
                        },
                        endereco : {
                            logradouro : "R Carioba",
                            numero : 360,
                            cidade : "São Paulo",
                            estado : "SP",
                        }
                    }

        console.log( obj.endereco.endereco.logradouro );

    . Eliminado uma propriedade do objeto:

        delete obj.idade;

    . Comparação entre objetos:

            var objMarco =   {   codigo : 1,
                                 nome : "MARCO",
                                 equals : function(obj){
                                    return this.codigo === obj.codigo;
                                 };

            var obj = {     codigo : 1,
                            nome : "MARCO ANTONIO DA SILVA" };

            console.log( objMarco.equals( obj ) );
    
    . Iterando as propriedades do objeto:

        for( prop in obj ){
            console.log( prop + "->" + obj[prop]);
        }

8. Arrays

    . Declaração:

        var emails = [];

        var emails = ['maransi@gmail.com', 'gustavo.rochaspj@gmail.com'];


    . Acessando conteúdo:

        console.log( emails[0] );


    . Verificando o tamanho do array:

        console.log( emails.length );

    . Adicionando item:

        emails[2] = 'teste@gmail.com';

        emails.push('teste@gmail.com');     // inclui um item na última posição

        emails.unshift('teste@gmail.com');  // inclui o item na primeira posição

    . Eliminando uma ocorrência:

        emails.pop();       // Elimina a última ocorrência e retorna o item excluído

        emails.shift();     // Elimina a primeira ocorrência e retorna o item excluído;

    . Vaiações dos elementos dos arrays:

        var acessorios = { som : 'pioneer', banco : 'couro' };

        var ligar = function(){
            console.log('ligar...');
        }

        var fox = ['fox', 4, acessorios, ligar ];

        console.log( fox[2].som);   // Através do índice encontramos a referência e já acessamos a propriedade do objeto
        console.log( fox[3]() );    // Através do índice encontramos a referência e já executamos o método

    . Como iterar um array:

        Exemplo 1

            var emails = ['maransi@gmail.com', 'gustavo.rochaspj@gmail.com'];

            for (var i=0; i < emails.length; i++){
                console.log( emails[i] );
            }

        Exemplo 2

            var emails = ['maransi@gmail.com', 'gustavo.rochaspj@gmail.com'];

            emails.forEach( function( element ){
                console.log( element );            
            });


    


 




    