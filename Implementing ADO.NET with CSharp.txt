Implementing ADO.NET with C#
----------------------------

The Classes of ADO.NET
----------------------

    . Principais classes do ADO.NET:

        . Connection - Cria uma conexão com o banco de dados.

        . Transaction - Executa comandos dentro de uma transação.

        . Command - Envia DMLs para o banco de dados.

        . DataAdapter - É usado para preencher um DataSet, ou um DataTable com dados.

        . DataReader - Um rápido, forward-only cursor para leitura de dados.

        . ParameterCollection - Stores all parameters related to a Command and the mappings of
                                both table and column names to the DataSet columns.

        . Parameter - Defines parameters for parameterized SQL statements and stored procedures.

    . Classes Desconectadas:

        . DataSet - Coleção de um, ou mais, DataTables.

        . DataTable - Uma simples representação de uma tabela de dados.

        . DataView - Uma consulta dentro do DataTable.

        . DataRow - Uma linha de dados dentro do DataTable.

        . DataColumn - Uma coluna de dado num DataRow.

    . Classes de Construção:

        . ConnectionStringBuilder - Cria, ou quebra uma string de conexão.

        . CommandBuilder - Cria um comando insert, update, ou delete.

    . Provedores de dados:

        . Um provedor de conexão conecta fontes de dados como SQL Server, MySQL, Oracle, etc; promovendo um 
            caminho para executar comandos 

        . SQL Server - System.Data.SqlClient

            . Conjunto de classes que fazem parte deste provider são: SqlConnection, SqlCommand, SqlDataAdapter, etc.

        . OLE DB - System.Data.OleDb

            . Conjunto de classes que fazem parte deste provider são: OleDbConnection, OleDbCommand, OleDbDataAdapter, etc.

        . ODBC - System.Data.Odbc

            . Conjunto de classes são: OdbcConnection, OdbcCommand, OdbcDataAdapter, etc.

        . Oracle - System.Data.OracleClient

            . Conjunto de classes são: OracleConnection, OracleCommand, OracleDataAdapter, etc.

        . MySQL - MySql.Data.MySqlClient

            . Conjunto de classes são: MySqlConnection, MySqlCommand, MySqlAdapter

            . https://zetcode.com/csharp/mysql/

            . https://csharp.hotexamples.com/pt/examples/MySql.Data.MySqlClient/MySqlConnection/CreateCommand/php-mysqlconnection-createcommand-method-examples.html

            . https://dev.mysql.com/doc/connector-net/en/connector-net-introduction.html

            . https://dev.mysql.com/doc/connector-net/en/connector-net-tutorials-intro.html


ORMs and ADO.NET
----------------

    . Exemplos de ORMs:

        . EF
        . Dapper
        . NHibernate

    . Possui auto mapper.

    . Abstrai o banco de dados em objetos.

    . Podemos utilizar a linguagem LINQ (Trata-se de um “framework” dentro do .NET destinado a auxiliar os 
        desenvolvedores a escrever expressões de consulta diretamente em C# de maneira agnóstica)

        . Abstrai a complexidade envolvida na utilização de diferentes linguagens de consulta, como SQL, xPath e xQuery. 
            Essa abstração é feita em cima de uma API de alto nível compatível com as linguagens integrantes do .NET Framework. 
            Ou seja: você consegue consultar uma base de dados relacional, um arquivo XML uma coleção de objetos através 
            de uma API unificada, invocada através de uma linguagem integrante do .NET Framework. 
            
        . Trazendo para um exemplo mais palpável: você consegue unicamente com código C# fazer consultas a conjuntos de objetos, 
            bases de dados relacionais e arquivos XML, sendo o LINQ o encarregado de fazer a devida “tradução” para cada 
            uma das fontes a serem consultadas.


The Connection Class
--------------------

    . Passando string de conexão:

        var cnn = new SqlConnection( cnnString );

    . Podemos utilizar para o comando acima ODBC, SqlServer, OleDb, MySQL, etc.

    . Abrindo conexão:

        cnn.Open();

    . Fechando a conexão:

        cnn.Close();

    . Descartando recursos não gerenciados:

        cnn.Dispose();


Openning a Connection
---------------------

    . Digite os comandos abaixo no prompt do sistema operacional:

        cd /workspace-dotnet
        mkdir ADONet
        cd ADONet
        dotnet new sln --name ADONET
        dotnet new console -n AdoNetSystem -o adoNetSystem
        dotnet sln add adoNetSystem
        cd adoNetSystem
        dotnet add package MySql.Data
        code .

    . Acesse o arquivo Program.cs e substitua o código abaixo:

        using System;
        using MySql.Data.MySqlClient;

        string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

        using var con = new MySqlConnection(cs);

        con.Open();

        var stm = "SELECT * FROM cliente";
        var cmd = new MySqlCommand(stm, con);

        using MySqlDataReader rdr = cmd.ExecuteReader();

        while (rdr.Read())
        {
            Console.WriteLine("{0} {1} ", rdr.GetInt32(0), rdr.GetString(1));
        }

        Console.WriteLine($"MySQL version : {con.ServerVersion}");

    . Substitua o código do arquivo Programa.cs pelo código abaixo:

        using System;
        using MySql.Data.MySqlClient;

        string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

        using var con = new MySqlConnection(cs);

        con.Open();

        var cmd = con.CreateCommand();
        var stm = @"SELECT * FROM cliente WHERE nome LIKE '%DA%'";

        cmd.CommandText = stm;

        var rdr = cmd.ExecuteReader();

        while (rdr.Read())
        {
            Console.WriteLine("{0} {1} ", rdr.GetInt32(0), rdr.GetString(1));
        }

        Console.WriteLine($"MySQL version : {con.ServerVersion}");



 