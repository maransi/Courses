Implementing ADO.NET with C#
----------------------------

The Classes of ADO.NET
----------------------

    . Principais classes do ADO.NET:

        . Connection - Cria uma conexão com o banco de dados.

        . Transaction - Executa comandos dentro de uma transação.

        . Command - Envia DMLs para o banco de dados.

        . DataAdapter - É usado para preencher um DataSet, ou um DataTable com dados.

        . DataReader - Um rápido, forward-only cursor para leitura de dados.

        . ParameterCollection - Stores all parameters related to a Command and the mappings of
                                both table and column names to the DataSet columns.

        . Parameter - Defines parameters for parameterized SQL statements and stored procedures.

    . Classes Desconectadas:

        . DataSet - Coleção de um, ou mais, DataTables.

        . DataTable - Uma simples representação de uma tabela de dados.

        . DataView - Uma consulta dentro do DataTable.

        . DataRow - Uma linha de dados dentro do DataTable.

        . DataColumn - Uma coluna de dado num DataRow.

    . Classes de Construção:

        . ConnectionStringBuilder - Cria, ou quebra uma string de conexão.

        . CommandBuilder - Cria um comando insert, update, ou delete.

    . Provedores de dados:

        . Um provedor de conexão conecta fontes de dados como SQL Server, MySQL, Oracle, etc; promovendo um 
            caminho para executar comandos 

        . SQL Server - System.Data.SqlClient

            . Conjunto de classes que fazem parte deste provider são: SqlConnection, SqlCommand, SqlDataAdapter, etc.

        . OLE DB - System.Data.OleDb

            . Conjunto de classes que fazem parte deste provider são: OleDbConnection, OleDbCommand, OleDbDataAdapter, etc.

        . ODBC - System.Data.Odbc

            . Conjunto de classes são: OdbcConnection, OdbcCommand, OdbcDataAdapter, etc.

        . Oracle - System.Data.OracleClient

            . Conjunto de classes são: OracleConnection, OracleCommand, OracleDataAdapter, etc.

        . MySQL - MySql.Data.MySqlClient

            . Conjunto de classes são: MySqlConnection, MySqlCommand, MySqlAdapter

            . https://zetcode.com/csharp/mysql/

            . https://csharp.hotexamples.com/pt/examples/MySql.Data.MySqlClient/MySqlConnection/CreateCommand/php-mysqlconnection-createcommand-method-examples.html

            . https://dev.mysql.com/doc/connector-net/en/connector-net-introduction.html

            . https://dev.mysql.com/doc/connector-net/en/connector-net-tutorials-intro.html


ORMs and ADO.NET
----------------

    . Exemplos de ORMs:

        . EF
        . Dapper
        . NHibernate

    . Possui auto mapper.

    . Abstrai o banco de dados em objetos.

    . Podemos utilizar a linguagem LINQ (Trata-se de um “framework” dentro do .NET destinado a auxiliar os 
        desenvolvedores a escrever expressões de consulta diretamente em C# de maneira agnóstica)

        . Abstrai a complexidade envolvida na utilização de diferentes linguagens de consulta, como SQL, xPath e xQuery. 
            Essa abstração é feita em cima de uma API de alto nível compatível com as linguagens integrantes do .NET Framework. 
            Ou seja: você consegue consultar uma base de dados relacional, um arquivo XML uma coleção de objetos através 
            de uma API unificada, invocada através de uma linguagem integrante do .NET Framework. 
            
        . Trazendo para um exemplo mais palpável: você consegue unicamente com código C# fazer consultas a conjuntos de objetos, 
            bases de dados relacionais e arquivos XML, sendo o LINQ o encarregado de fazer a devida “tradução” para cada 
            uma das fontes a serem consultadas.


The Connection Class
--------------------

    . Passando string de conexão:

        var cnn = new SqlConnection( cnnString );

    . Podemos utilizar para o comando acima ODBC, SqlServer, OleDb, MySQL, etc.

    . Abrindo conexão:

        cnn.Open();

    . Fechando a conexão:

        cnn.Close();

    . Descartando recursos não gerenciados:

        cnn.Dispose();


Openning a Connection
---------------------

    . Digite os comandos abaixo no prompt do sistema operacional:

        cd /workspace-dotnet
        mkdir ADONet
        cd ADONet
        dotnet new sln --name ADONET
        dotnet new console -n AdoNetSystem -o adoNetSystem
        dotnet sln add adoNetSystem
        cd adoNetSystem
        dotnet add package MySql.Data
        code .

    . Para abrirmos uma conexão precisamos de uma string de conexão:
  
        string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

        . O caracter "@" serve para preservar os caracteres especiais dentro da expressão string. Para mais detalhes
            do caracter "@", consulte o link: http://www.macoratti.net/14/01/c_arroba.htm

        . Dentro da expressão string é necessário fornecer todos os detalhes da conexão, como por exemplo:
            o nome do servidor, usuário, senha, database, etc. Isto irá variar de banco para banco.

        . Para encontrar as diversas formas de montar uma string de conexão acesse o site https://www.connectionstrings.com/

    . Um exemplo que podemos utilizar, inclua a classe abaixo no projeto:

        using System;
        using System.Text;
        using MySql.Data.MySqlClient;

        namespace AdoNetSystem
        {
            public class ConnectionModel : IDisposable
            {
                public static void Main(string[] args){
                    ConnectionModel connectionModel = new ConnectionModel();

                    connectionModel.OpenConnection();
                }

                public void OpenConnection(){

                    string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

                    using ( MySqlConnection con = new MySqlConnection(cs)){
                        con.Open();

                        string connectionInformation = GetConnectionInformation(con);

                        Console.WriteLine( connectionInformation );

                        con.Close();

                        con.Dispose();
                    }
                }

                public string GetConnectionInformation(MySqlConnection con ){
                    StringBuilder sb = new StringBuilder(1024);
                    
                    sb.AppendLine("Connection String: " + con.ConnectionString);
                    sb.AppendLine("State: " + con.State.ToString());
                    sb.AppendLine("Connection Timeout: " + con.ConnectionTimeout.ToString());
                    sb.AppendLine("Database: " + con.Database);
                    sb.AppendLine("Data Source: " + con.DataSource);
                    sb.AppendLine("Server Version: " + con.ServerVersion);
        //            sb.AppendLine("Workstation ID: " + con.WorkstationId);

                    return sb.ToString();

                }

                void IDisposable.Dispose()
                {
                    throw new NotImplementedException();
                }

            }
        }

        . Connection.Close () simplesmente fechará a conexão com o servidor conforme definido na string de conexão. 
            A conexão pode ser usada/reaberta após este ponto.

        . Connection.Dispose() limpará completamente, removendo todos os recursos não gerenciados, evitando que a conexão 
            seja usada novamente. Uma vez que descartado é chamado, você não deve mais tentar usar o objeto. 
            Dentro de Dispose(), Close () `certamente todos serão chamados também.

        . No método "OpenConnection()" utilizamos o bloco "using". Um detalhe para se destacar que a classe "ConnectionModel" precisa
            implementar a interface "IDisposable" se quisermos utiliza-la num bloco "using". Neste caso, implementaremos o método "IDisposable.Dispose()"
            nesta classe para liberar recursos utilizados pela classe em questão. Para mais detalhes acesse: https://www.devmedia.com.br/entendendo-o-bloco-using-no-csharp/16967

    . O projeto poderá ser executado de duas formas. Ou pela classe principal do projeto "Program.cs", ou diretamente pela classe "Model" "ConnectionModel";

        . Acesse a classe Programa.cs e implemente o código abaixo:

            using AdoNetSystem;

            using ( ConnectionModel connectionModel = new ConnectionModel()){
                connectionModel.OpenConnection();
            }

        . Acesse a classe "ConnectionModel"; comente o código da classe "Program.cs" para que ele não seja executado no lugar da classe "Model";
            e execute o projeto.


. Catching Connection Exceptions

    . Implemente o bloco Try, catch dentro do método "OpenConnection" como abaixo:

        public void OpenConnection(){
            try{
                string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

                using ( MySqlConnection con = new MySqlConnection(cs)){
                    con.Open();

                    string connectionInformation = GetConnectionInformation(con);

                    Console.WriteLine( connectionInformation );

                    con.Close();

                    con.Dispose();
                }
            }
            catch( Exception ex){
                throw new Exception( "Ocorreu o seguinte Erro: " + ex.ToString());
            }
        }

        . Altere alguma informação da string de conexão para dar erro e cair na excessão.

    . Execute o projeto.

. Retrieving a Scalar Value using a Command Object

    . Para executar alguma sentença DML precisamos faze-lo pela classe "Command".

    . Implemente o método abaixo na classe "ConnectionModel".

        public long GetClientesCountScala(){
            long rowsAffected = 0;

            try{

                string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

                string sql = "SELECT COUNT(*) FROM cliente";

                using ( MySqlConnection con = new MySqlConnection(cs)){
                    using( MySqlCommand cmd = new MySqlCommand(sql, con)){
                        con.Open();

                        rowsAffected = (long)cmd.ExecuteScalar();

                        Console.WriteLine( "Linhas Afetadas: " + rowsAffected.ToString() );
                    }
                }
            }catch( Exception ex){
                throw new Exception( "Ocorreu o seguinte Erro: " + ex.ToString());
            }

            return rowsAffected;
        }

    . Implemente a linha abaixo no método "main", ou substitua ele na classe "Program.cs":

            long rowsAffected = connectionModel.GetClientesCountScala();

    . Execute o projeto debugando a partir da linha acima da classe "ConnectionModel" e veja o resultado.

    . ExecuteScalar - Retorna apenas um valor após a execução de uma consulta. Use quando quiser um valor apenas 
        (uma linha e uma coluna). por exemplo para pegar o total de registros de uma tabela. 
        
    . ExecuteReader - Retorna um DataReader com os dados da consulta e executa apenas o comando SELECT.
        Use quando for preencher um DropDownList, CheckBoxList, RadioButtonList. ExecuteReader é somente leitura e 
        não pode ser usado para outros fins.

    . ExecuteNonQuery - Não retorna dados de consulta, mas retorna o número de linhas afetadas em UPDATE, INSERT e DELETE 
        (para os demais retornará -1), é utilizado geralmente para fazer Inserts, Updates e Deletes. Use para inserir, atualizar
        e apagar dados do banco de dados.

    https://cbsa.com.br/post/diferencas-entre-executereader-executenonquery-executescalar-quando-usar-e-qual-usar.aspx


. Submit an INSERT Statement using ExecuteNonQuery

    . Implemente o método abaixo:























        
            















    . Acesse o arquivo Program.cs e substitua o código abaixo:

        using System;
        using MySql.Data.MySqlClient;

        string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

        using var con = new MySqlConnection(cs);

        con.Open();

        var stm = "SELECT * FROM cliente";
        var cmd = new MySqlCommand(stm, con);

        using MySqlDataReader rdr = cmd.ExecuteReader();

        while (rdr.Read())
        {
            Console.WriteLine("{0} {1} ", rdr.GetInt32(0), rdr.GetString(1));
        }

        Console.WriteLine($"MySQL version : {con.ServerVersion}");

    . Substitua o código do arquivo Programa.cs pelo código abaixo:

        using System;
        using MySql.Data.MySqlClient;

        string cs = @"server=localhost;userid=marco;password=brasil2;database=desenv";

        using var con = new MySqlConnection(cs);

        con.Open();

        var cmd = con.CreateCommand();
        var stm = @"SELECT * FROM cliente WHERE nome LIKE '%DA%'";

        cmd.CommandText = stm;

        var rdr = cmd.ExecuteReader();

        while (rdr.Read())
        {
            Console.WriteLine("{0} {1} ", rdr.GetInt32(0), rdr.GetString(1));
        }

        Console.WriteLine($"MySQL version : {con.ServerVersion}");



 