Curso .NETCore 3.1 ou NET5.0 - CSharp API Arquitetura DDD na Prática - UDEMY
----------------------------------------------------------------------------

Aula 6 - Download linux Peppermint OS 9
---------------------------------------

    . Acessar a URL https://www.osboxes.org/virtualbox-images/ para baixar a imagem pronta da 
        distribuição Peppermint

    . Acesse o Virtualbox, crie uma vm com o nome Peppermint.

    . Após download descompacte a vm em ~/Virtualbox VMs/Peppermint

    . Importe a VM baixada.


Aula 8. Alterar Algumas Configurações do Linux Peppermint OS 9    
--------------------------------------------------------------

    . Inicie e acesse a VM. O usuário e senha são osboxes.org / osboxes.org

    . Altere o layout do teclado para Português Brasil

    . Altere o fuso horário

    . Acesse o terminal e execute os comandos abaixo:

        sudo apt-get update && sudo apt-get upgrade

        sudo apt-get install virtualbox-guest-utils virtualbox-guest-x11 virtualbox-guest-dkms -y


Aula 9. Alterar Senha OsBoxes.org
---------------------------------

    passwd 


Aula 11. Instalar AspNetCore 3.1
--------------------------------

    . Acesse o link abaixo para baixar o .NET Core 3.1

        https://dotnet.microsoft.com/download

    . Acesse o download "All .NET Core downloads" e baixe a versão 3.1

    . Acesse o link "Package manager instructions" 

    . Localize a versão do Ubuntu que está sendo utilizado, copie e execute os comandos no 
        terminal:

        wget https://packages.microsoft.com/config/ubuntu/20.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update;   sudo apt-get install -y apt-transport-https &&   sudo apt-get update &&   sudo apt-get install -y dotnet-sdk-5.0
        sudo apt-get update;   sudo apt-get install -y apt-transport-https &&   sudo apt-get update &&   sudo apt-get install -y aspnetcore-runtime-5.0

    . Para testar a instalação execute os comandos abaixo:

        dotnet --version
        dotnet --help
        dotnet --list
        dotnet --list-runtimes
        dotnet --list-sdks

Aula 12. Instalar MySQL e WorkBench
------------------------------

    . Abra o terminal e execute os comandos abaixo:

            sudo apt update 
            sudo apt upgrade

            # No passo abaixo use <Tab> para mover entre as opções e dê <OK> para finalizar a escolha
            wget http://repo.mysql.com/mysql-apt-config_0.8.13-1_all.deb

            sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb
            sudo apt update 
            sudo apt install mysql-server
            sudo systemctl restart mysql

            # Passo opcional caso queira melhorar o nivel de segurança do banco
            # sudo mysql_secure_installation

            create user 'marco'@'localhost' identified by 'brasil2';

            GRANT ALL PRIVILEGES ON *.* to 'marco'@'localhost' WITH GRANT OPTION;


            mysql -u marco -p

    . Acesse o site https://dev.mysql.com/downloads/workbench/ e realize o download do mysql-workdbenck

    . Acesse o local do download e execute os comandos abaixo:

        sudo dpkg -i mysql-workbench-community_8.0.23-1ubuntu20.10_amd64.deb 
        sudo apt-get install -f
        sudo dpkg -i mysql-workbench-community_8.0.23-1ubuntu20.10_amd64.deb 

    . Acesse o mysql-workbench e altere a conexão que está com o usuário root pelo marco.


Aula 13. Instalar Visual Studio Code
------------------------------------

    . Acesse o site do Visual Studio, faça o download e a instalação

    . Instale as extensions abaixo:

        C#
        C# Extensions
        C# XML Documentation Comments
        vscode-icons (Opcional)
        

Aula 19. Documentação do C# e o que eu posso fazer com C#
---------------------------------------------------------

    . A documentação da Microsoft encontra-se no link abaixo:

        https://docs.microsoft.com/pt-br/dotnet/csharp


Aula 20. Criar uma Solution
---------------------------

    . Crie uma pasta com o nome CSharpBasico

    . Digite o comando abaixo para verificar as opções do compilador dotnet:

        dotnet new

    . Dentro da pasta CSharpBasico digite o comando abaixo:

        dotnet new sln --name CSharpBasico

    . Para acessar a solução com o VisualStudio Code digite o comando abaixo:

        code .

    . Dentro da "Solution" criaremos um projeto, do tipo console:

        dotnet new console -n HelloWorld -o helloWorld
        
        -n : name da aplicação (Nome do projeto HelloWorld.csproj )
        -o : output (nome da pasta que será criado para criar as classes)

    . A estrutura de pastas ficará:

        CSharpBasico
            |
            +----------- obj
            |
            +----------- helloWorld
            |               +----   HelloWorld.csproj
            |               +----   Program.cs
            CSharpBasico.sln

    . Agora precisamos associar o projeto a solution

        dotnet sln add helloWorld/

    . Digite o comando abaixo para verificar os projetos que compoem a solution:

        dotnet sln list

    . O arquivo Program.cs possui um método main. Para executarmos a classe Program.cs digite os
        comandos abaixo:

        cd CSharpBasico/helloWorld

        dotnet run


Aula 21. O que é uma Namespace
------------------------------

    . Namespace tem a mesma lógica de packages do java. Obedecendo critérios de imports das classes.


Aula 24. Tipos Primitivos
-------------------------

    . As variáveis value type contém dentro delas um valor, enquanto as reference type contém uma referência. Isso significa 
        que se copiar uma variável do tipo value type para dentro de outra o valor é copiado e, se o mesmo for feito com uma 
        do tipo reference type será copiado apenas a referência do objeto.

    . Value Type existem duas categorias: struct e enum.

        . Struct: é dividida em tipos numéricos, bool e estruturas personalizadas pelo usuário.
    
            Os tipos numéricos:

                Tipo de dados	Intervalo
                -------------   ---------
                byte	        0 ..255
                sbyte	        -128 ..127
                short	        -32,768 ..32,767
                ushort	        0 ..65,535
                int	            -2,147,483,648 ..2,147,483,647
                uint	        0 ..4,294,967,295
                long	        -9,223,372,036,854,775,808..9,223,372,036,854,775,807
                ulong	        0 ..18,446,744,073,709,551,615
                float	        -3.402823e38 ..3.402823e38
                double	        -1.79769313486232e308 ..1.79769313486232e308
                decimal	        -79228162514264337593543950335..79228162514264337593543950335
                char	        U+0000 .. U+ffff

        . Enum:  permite criar um tipo que é formado por várias constante

            . Exemplo 1:

                class Pedido
                {
                    enum Situacao
                    {
                        Aberto,
                        Faturado,
                        Cancelado
                    }

                    public int numero;
                    public DateTime dataHora;
                    public int situacao;

                }            

                class Program
                {
                    static void Main(string[] args)
                    {
                        Pedido pedido = new Pedido();

                        pedido.numero = 1;
                        pedido.dataHora = DateTime.Now;

                        // A propriedade situacao recebe o valor via cast 
                        // porque o tipo dela é int
                        pedido.situacao = (int) Situacao.Faturado;

                        Console.WriteLine("Número do pedido: "
                        + pedido.numero.ToString());
                        Console.WriteLine("Número do pedido: "
                        + pedido.dataHora.ToString());
                        Console.WriteLine("Número do pedido: "
                        + pedido.situacao.ToString());

                    }
                }


            . Exemplo 2: Mudando o enum para public e colocando o valor da propriedade
                            Pedido.situacao diretamento o conteúdo do enum
                            Situacao.Faturado

                class Pedido
                {
                    public enum Situacao
                    {
                        Aberto,
                        Faturado,
                        Cancelado
                    }

                    public int numero;
                    public DateTime dataHora;
                    public int situacao;

                }            

                class Program
                {
                    static void Main(string[] args)
                    {
                        Pedido pedido = new Pedido();

                        pedido.numero = 1;
                        pedido.dataHora = DateTime.Now;

                        pedido.situacao = Situacao.Faturado;

                        Console.WriteLine("Número do pedido: " + pedido.numero.ToString());
                        Console.WriteLine("Número do pedido: " + pedido.dataHora.ToString());
                        Console.WriteLine("Número do pedido: " + pedido.situacao );

                    }
                }

    . Reference Types - armazenam apenas a referência do objeto. 
        Os tipos de referência são: class, interface, delegate, object, string e Array.

        . Tipo object: todos os tipos são derivados da classe Object, sendo assim é possível 
            converter qualquer tipo para object.

        . Tipo string: é utilizado para se armazenar caracteres e uma string deve estar entre aspas

        Exemplos:

            string nome = "DevMedia";
            tipo[] nomeDoArray = {item, item, item};

            string[] array = {"Quadrado", "Círculo", "Triângulo", "Retângulo"};
            string forma =  array[2];

    . Constantes:

        Exemplo: const double medida = 10.5;

    . Ao invés de declarar o tipo da variável é possivel declarar com o tipo "var", onde o tipo da variável
        será determinado pelo seu conteúdo:

        var nome = "Marco";
        var idade = 54;
        var casado = true;

    . Quando for utilizar variáveis em classes deve obedecer os modificadores de acesso como abaixo:

        Modificador	            Funcionamento
        -----------             -------------
        public	                O acesso não é restrito.
        protected	            O acesso é limitado às classes ou tipos derivados daclasse que a variável está.
        Internal	            O acesso é limitado ao conjunto de módulos(assembly) corrente.
        protected internal	    O acesso é limitado ao conjunto corrente ou tipos derivados da classe recipiente.
        private	                O acesso é limitado à classe que a variável está.


Aula 26. Operadores Aritméticos
-------------------------------

    Operador Aritmético	    Descrição
    -------------------     ---------
        +	                Adição
        -	                Subtração
        *	                Multiplicação
        /	                Divisão
        %	                Módulo (resto da divisão)

    Exemplos:

        int a = 5, b = 10, c = 15, d = 20; // declaramos quatro variáveis do tipo int
        Console.WriteLine(a + d); // operação de soma
        Console.WriteLine(c - a); // operação de subtração
        Console.WriteLine(b * c); // operação de multiplicação
        Console.WriteLine(d / b); // operação de divisão
        Console.WriteLine(c % b); // operação de módulo (resto de divisão)
        Console.ReadKey();

    . Operadores Aritméticos de Atribuição Reduzida

        Operador Aritmético	    Descrição
        -------------------     ---------
            + =	                mais igual
            - =	                menos igual
            * =	                vezes igual
            / =	                dividido igual
            % =	                módulo igual

        Exemplos:

            int x = 5;
            x += 5; // é a mesma coisa que x = x + 5
            Console.WriteLine("Valor do x = " + x);
            Console.ReadKey();

    . Operadores incrementais e decrementais

        (++)    Incremento
        (--)    Decremento

        Exemplo:

            Console.WriteLine("Pré-Incremento:\n");

            int x = 0;
            Console.WriteLine("x = " + x);

            Console.WriteLine("\n++x +20 = \n");
            Console.WriteLine(++x +20 + "\n");

            Console.WriteLine("\nPós-Incremento:\n");
            x = 0;

            Console.WriteLine("\nx++ +20 = \n");
            Console.WriteLine(x++ + 20 + "\n");

            Console.WriteLine("\nPré-Decremento:\n");
            x = 0;

            Console.WriteLine("x = " + x);

            Console.WriteLine("\n--x +20 = \n");
            Console.WriteLine(--x + 20 + "\n");

            Console.WriteLine("\nPós-Decremento:\n");
            x = 0;

            Console.WriteLine("\nx-- +20 = \n");
            Console.WriteLine(x-- + 20 + "\n");

            Console.ReadKey();

    . Operadores Relacionais

        Operador Relacional	        Descrição
        -------------------         ---------
                ==	                Igual a
                !=	                Diferente de
                >	                Maior que
                <	                Menor que
                >=	                Maior do que ou igual a
                <=	                Menor do que ou igual a

        Exemplo:

            int a = 10, b = 25, c = 50, d = 100; // declaramos quatro variáveis de tipo int

            Console.WriteLine(a == d); // avaliamos a igualdade entre a e d
            Console.WriteLine(b != c);  // avaliamos a desigualdade entre b e c
            Console.WriteLine(a > b); // avaliamos se a é maior que b
            Console.WriteLine(c < d);  // avaliamos se c é menor que d
            Console.WriteLine(c >= a); // avaliamos se c é maior ou igual que a
            Console.WriteLine(d <= b); // avaliamos se d é menor ou igual que b

            Console.ReadKey();


    . Operadores Lógicos

        Operador Lógico	        Descrição
        ---------------         ---------
        &&	                    AND = E
        ||	                    OR = Ou
        !	                    NOT = Não

        Exemplo:

            int a = 5, b = 10, c = 15, d = 20; // declaramos quatro variáveis do tipo int

            Console.WriteLine(a == 5 && d == 10); // avaliamos se a é igual a 5 e se d é igual a 10
            Console.WriteLine(c < b || d == 20); // avaliamos se c é menor que b ou se d é igual a 20
            Console.WriteLine(! (b > a)); // negamos que b é maior que a

            Console.ReadKey();

    . Operadores Ternários

        . O operador ternário é composto por três operandos separados pelos sinais ? e : e tem o 
            objetivo de atribuir o valor a uma variável de acordo com o resultado de um teste lógico. 
            A sintaxe dele é: teste lógico ? valor se verdadeiro : valor se falso;

        . Exemplo

            int x = 5, y = 10; // declaradas duas variáveis de tipo int

            Console.WriteLine(x < y ? "sim" : "não"); // expressão x < y é avaliada
            // se for verdadeira exibe "sim"
            // se não for verdadeira exibe "não"
            Console.ReadKey();


Aula 30. If/Else (Se/Senão)
---------------------------

    Exemplo 1

        double media = 8;
        if (media >= 7)
        {
            Console.WriteLine("Aluno aprovado!");
        }
        else if (media < 7 && media >=5)
        {
            Console.WriteLine("Aluno em recuperação!");
        }
        else
        {
            Console.WriteLine("Aluno reprovado!");
        }

    Exemplo 2

        double media = 8;
        string resultado = "Olá aluno, você foi ";
        resultado += media >= 7 ? "aprovado." : "reprovado.";
        Console.WriteLine(resultado);


Aula 31. For (Para Cada)
------------------------

    Exemplo 1

        for (int contador = 0; contador < 5; contador++)
        {
            Console.WriteLine(contador);
        }

    Exemplo 2

        string[] nomes = { “André”, “Bruna”, “Carla”, “Daniel” };

        foreach (string nome in nomes)
        {
            Console.WriteLine(nome);
        }


Aula 32. While...Continue...Break (Enquanto)
--------------------------------------------

    Exemplo 1

       int a = 10;
         
         /* do loop execution */
         do {
            Console.WriteLine("value of a: {0}", a);
            a = a + 1;
         } 
         while (a < 20);

         Console.ReadLine();

    Exemplo 2: while / break

        int i = 1;
        while (i < 10)
        {
            if(i == 5)
                break;
                
            Console.WriteLine(i);
            i++;
        }

    Exemplo 3: while / continue

        int i = 0;
        while(i < 10){
            i++;
            
            if(i %2 == 0)
                continue;
            
            Console.WriteLine(i);
        }


Aula 33. Switch...Case (Caso)
-----------------------------

    Exemplo

        switch (mes)
        {
            case "Janeiro":
            case "Março":
            case "Maio":
            case "Julho":
            case "Agosto":
            case "Outubro":
            case "Dezembro":
                                Console.WriteLine("Este mês tem 31 dias");
                                break;
            case "Fevereiro":
                                Console.WriteLine("Este mês tem 28 ou 29 dias");
                                break;
            default:
                                Console.WriteLine("Este mês tem 30 dias");
                                break;
        }

