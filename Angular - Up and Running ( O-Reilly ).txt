Angular - Up and Running ( O-Reilly )
-------------------------------------

https://www.tutorialspoint.com/angular8/index.htm

# What¬¥s new between versions 2 and 17 
https://www.calibraint.com/blog/the-evolution-of-angular-versions

# Introdu√ß√£o ao Angular 17
https://consolelog.com.br/introducao-ao-angular-17/


# Video Tutoriais do Youtube

# ùêÄÃ≤ùêùÃ≤ùê¶Ã≤ùê¢Ã≤ùêßÃ≤ùêãÃ≤ùêìÃ≤ùêÑÃ≤ ùüëÃ≤ -Ã≤ ùêÄÃ≤ùêßÃ≤ùê†Ã≤ùêÆÃ≤ùê•Ã≤ùêöÃ≤ùê´Ã≤ ùüèÃ≤ùüîÃ≤
https://www.youtube.com/watch?v=BYOMbwlqWWs

# 2 maneiras de instalar o Bootstrap em um projeto Angular
https://www.youtube.com/watch?v=_0_-w07p3mI&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=132

# Como usar mascaras nos inputs com ngx-mask
https://www.youtube.com/watch?v=53S4LlPLwrI&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=130

# Angular Templates - Parte 01
https://www.youtube.com/watch?v=s0qV5TbwRBA&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=126

# Angular Templates - Parte 02
https://www.youtube.com/watch?v=yv_5155Kvgo&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=127

# Angular - Negular - Smarttable (Datatable)
https://www.youtube.com/watch?v=i6Utt5N8pXA&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=127

# Create Admin Dashboard Basic Layout in Angular with collapsible Sidebar
https://www.youtube.com/watch?v=sON9WnBDjJg&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=128

# Criando arquitetura de autentica√ß√£o com Angular - Parte 1
https://www.youtube.com/watch?v=RQB4Jwkc-c0

# Criando arquitetura de autentica√ß√£o com Angular - Parte 2
https://www.youtube.com/watch?v=k1O3z7Gqvfc&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=132

# Free Angular 15 template CoreUI : Set Up (Part 1)
https://www.youtube.com/watch?v=I1W2enZmgOA&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=133

# Free Angular 15 template CoreUI : Explanation (part 2)
https://www.youtube.com/watch?v=d0oVpfBSe3s&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=134

# Angular 15 Starter Project with Responsive Layout Sidebar
# Pegar o projeto pronto e replicar - https://github.com/Talha-Ahrar/angular15-starter-project
https://www.youtube.com/watch?v=UIN-SDM-ljo&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=135

# How to Create Sidebar Using Bootstrap 5 | Responsive Sidebar With Bootstrap | Sidebar Menu
# Acompanhar a prograama√ß√£o pelo video, mas pegar o projeto em https://github.com/codzsword/sidebar-bootstrap
https://www.youtube.com/watch?v=i7uJAOFEd4g&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=136

# ANGULAR 17 NOVIDADES COM EXEMPLOS PRATICOS
https://www.youtube.com/watch?v=MntMrlywYb8&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=122

# 5 APIs gratuitas super √∫teis para desenvolvedores - WDEV
# APIs Free  https://dummyjson.com/
https://www.youtube.com/watch?v=RKYCRsa5WRM&list=PL7yxJa4Na-ipxalMfzYWdj4HMzOvzOhL6&index=114


1. Configurando o ambiente de desenvolvimento
---------------------------------------------

    . Instala√ß√£o do Nodejs

        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | $SHELL
        nvm --version

        # Para instalar a vers√£o lts mais recente
        nvm install --lts

        # Se quiser instalar uma vers√£o especifica, utilize:
        # nvm install 18.20.4

        # Se quiser listar as vers√µes do node disponivel no repositorio remoto
        # nvm ls-remote

        # Se quiser listar as vers√µes instalada na m√°quina atual
        # nvm ls

        # Para usar uma vers√£o instalada na m√°quina atual
        # nvm use 20.17.0

        # Para desinstalar uma vers√£o do node js
        # nvm uninstall 18.20.4

        node -v
        npm -v

    . Instala√ß√£o do VSCode:

        . Acessar a pagina de download da microsoft:

            https://code.visualstudio.com/download

        . Baixar o arquivo .deb 

        . Abrir o terminal e acessar a pasta Downloads

        . Executar o comando abaixo:

            sudo dpkg -i code_1.37.1-1565886362_amd64.deb

        . Atalhos

            Alt + 1, 2, 3, 4, ...	Posiona na aba no.
            Ctrl + b				Ativar o menu lateral esquerdo 
            Ctrl + Alt + P			Para ativar a linha de comandos 
            Ctrl + P 				Localiza um determinado arquivo
            Ctrl + W				Fecha a aba corrente
            Ctrl + Shift + W		Fecha todas as abas abertas

            Ctrl + Rolagem do Mouse	
                    sobre as abas 
                    abertas			Faz a rolagem das abas.

            Ctrl + K + C ou 
            Ctrl + /				Comenta linha atual, ou bloco selecionado

            Ctrl + K + U ou
            Ctrl + /				Descomenta linha, ou bloco selecionado.

            Ctrl + Shift + 
                    Acento Agudo	Abre o terminal na parte inferior

            Ctrl + X				Apaga linha
            Ctrl + H				Localiza e atualiza uma express√£o
            Ctrl + F2				Selecione um texto e pressionando Ctrl + F2 
                                    muda todos os textos equivalente a medida
                                    que vai se digitando
            Alt + Arrow(up/Down)    Move a linha para cima, ou para baixo.
            Ctrl + Shift + O		Abre a lista de fun√ß√µes/m√©todos da classe atual
            Ctrl + G				Posicionar na linha No. que for digitado
            Alt + Backspace			Apaga palavra inteira a esquerda
            Ctrl + Shift + .		Mostra os m√©todos da classe
            Ctrl + Shift + L		Altera dinamicamente em todo o arquivo a palavra que est√° sendo alterada
            Ctrl + M				Para cercar um conjunto de tags numa p√°gina HTML ( Precisa de configurar, verifique como fazer em "Configura√ß√µes" logo abaixo)
            cTRL + Ctrl + -			Para apagar uma tag que abra√ßa um conjunto de tags HTML ( Precisa de configurar, verifique como fazer em "Configura√ß√µes" logo abaixo)

        . Instale as seguinte Extens√µes:

            . Angular Extension Pack
            . Material Icon

        . Configura√ß√µes:

            . Digite Ctrl K+S, localize o item "Delete Line" e configure Ctrl + D
            . Acesse View / Minimap para retirar o scroll de c√≥digo da direita
            . Acessar configura√ß√µes, ir em "Settings", Text editors, Sugestions:
                . Na op√ß√£o "Accept Suggestion On Enter" deixar como off
                . Na op√ß√£o "Suggest: Insert Mode" deixar como replace
                . Na op√ß√£o "Quick Suggestions Delay" deixar como 1000
            . Acesse "Keyboard Shortcuts" em configura√ß√µes:
                . Digite "Emmet: Wrap..." e altere o "Keybinding" para "Alt + M"
                    . De agora em diante, ao editar uma p√°gina HTML e quiser cercar um bloco de tags com uma outra, 
                        basta:
                        . Selecionar o bloco
                        . Digitar "Alt + M"
                        . Informar a tag que deseja colocar, somente a identifica√ß√£o sem "<>", por exemplo: "div"
                . Digite "Emmet: Remove Tag" e altere o "Keybinding" para "Alt+Shift+-", o "-" deve ser do bloco numerico
                    . De agora em diante, se precisar apagar uma tag HTML que cerca um conjunto de outras tags, basta posicioinar
                        o cursor sobre a "TAg" que deseja apagar e pressionar "Ctrl+Shift+-"
            . Digite "Ctrl+Shift+P" e digite "Preference: Open User Settings (JSON)"
                . Digite a configura√ß√£o abaixo:

                    ...
                    "editor.linkedEditing": true,
                    "html.format.unformatted": "input",
                    "workbench.tree.indent": 20,
                    "workbench.tree.renderIndentGuides": "always",
                    "workbench.colorCustomizations": {
                        "tree.indentGuidesStroke": "#c8e0be"
                    }
            . Acesse Configura√ß√µes -> Profile -> Import Profile 
                . Informe o link "https://vscode.dev/profile/github/12bd0215e34ffe344361b7dcf767842b" para resgatar as configura√ß√µes para desenvolvimento em .NET

    . Instala√ß√£o do JSon Server

        # Instala√ß√£o do JSon Server global use -g, sem esse par√¢metro o start do json-server ser√° pelo comando "npx"
        npm install json-server -g

        # Crie o arquivo json abaixo com o nome de db.json
        {
            "posts": [
                { "id": "1", "title": "a title", "views": 100 },
                { "id": "2", "title": "another title", "views": 200 }
            ],
            "comments": [
                { "id": "1", "text": "a comment about post 1", "postId": "1" },
                { "id": "2", "text": "another comment about post 1", "postId": "1" }
            ],
            "profile": {
                "name": "typicode"
            }
        }


        # Execute o comando abaixo
        json-server db.json

        ou

        npx json-server db.json
        

        # Testando as rotas
        curl http://localhost:3000/posts/1

        curl http://localhost:3000/posts

    . Instala√ß√£o do do Angular

        # Instala√ß√£o do Angular
        sudo npm install -g @angular/cli@15

        # Verifica√ß√£o da vers√£o do Angular
        ng version


        # Para desinstalar
        # npm uninstall -g @angular/cli
        # npm cache clean --force

        # Para atualizar
        # sudo npm install --save-dev @angular/cli@latest

2. Gerando o Projeto
--------------------

    . Criando um componente com o AngularCli

        . O comando "ng" √© um atalho para o Angular CLI (Command Line Interface), que √© uma ferramenta de linha de comando para 
            desenvolver aplicativos Angular. O Angular CLI fornece uma s√©rie de comandos que permitem executar tarefas comuns, 
            como criar novos componentes, executar testes, construir aplicativos, entre outros.

            . Uso do comando "ng"

                # cria um novo projeto Angular com o nome especificado.
                ng new nome-do-projetos

                # gera um novo componente Angular com o nome especificado.
                ng generate component nome-do-componente

                # inicia um servidor de desenvolvimento local para o projeto Angular atual.
                ng serve

                # executa os testes unit√°rios do projeto Angular atual.
                ng test

                # constr√≥i o projeto Angular atual para produ√ß√£o.
                ng build

                # inicia um servidor de desenvolvimento local para o projeto Angular atual em modo de produ√ß√£o.
                ng serve --prod

            . Abrevia√ß√µes do comando "ng"

                # Abrevia√ß√£o para ng new, cria um novo projeto Angular.
                ng n

                # Abrevia√ß√£o para ng generate, gera um novo componente, diretiva, pipe, servi√ßo, etc.
                ng g

                # Abrevia√ß√£o para ng serve, inicia um servidor de desenvolvimento local para o projeto Angular atual.
                ng s

                # Abrevia√ß√£o para ng test, executa os testes unit√°rios do projeto Angular atual.
                ng t

                # Abrevia√ß√£o para ng build, constr√≥i o projeto Angular atual para produ√ß√£o.
                ng b

                # Abrevia√ß√£o para ng update, atualiza as depend√™ncias do projeto Angular atual.
                ng update

                # Abrevia√ß√£o para ng add, adiciona uma nova depend√™ncia ao projeto Angular atual.
                ng add

            . Abrevia√ß√µes par os tipos de arquivos que podem ser criados com o comand "ng"

                # Abrevia√ß√£o para ng g component, gera um novo componente Angular.
                ng g c
                
                # Abrevia√ß√£o para ng g directive, gera uma nova diretiva Angular.
                ng g d
                
                # Abrevia√ß√£o para ng g pipe, gera um novo pipe Angular.
                ng g p
                
                # Abrevia√ß√£o para ng g service, gera um novo servi√ßo Angular.
                ng g s
                
                # Abrevia√ß√£o para ng g module, gera um novo m√≥dulo Angular.
                ng g m

            . Exemplo

                ng generate component bem-vindo --skip-tests

                # ou

                $ ng g c bem-vindo --skip-tests

            . O comando do exemplo acima criar√° o componente "src/bem-vindo/bem-vindo.component.ts"

                import { Component } from '@angular/core'

                @Component({
                    selector : 'app-bem-vindo',
                    templateUrl : './bem-vindo.component.html',
                    styleUrls : ['./bem-vindo.component.css']
                })

                export class BemVindoComponent{

                }
            
            . Para utilizar o componente acima, basta acessarmos o html "app.componente.html" e inserir a linha abaixo

                    <app-bem-vindo></app-bem-vindo>

            . Ao levantarmo o projeto com o comando abaixo, a p√°gina renderizada apresentar√° o conte√∫do da p√°gina "bem-vindo.component.html"

                ng serve --open

                ou

                ng s -o

    . Demo

        . Crie um projeto com os comandos abaixo:

            # No questionamento "Would you like to add Angular routing?" Responda "Y"
            # No questionamento " Which stylesheet format would you like to use? " Responda "CSS"
            ng new stock-market
            
            cd stock-market/

            # Op√ß√£o ao comando abaixo seria "ng s --open", ou "npm start"
            ng serve --open

    . Estrutura de pastas dos projetos Angular:

        +----node_modules --------------------------->  Depend√™ncias do Node.JS necess√°rias no projeto.                  
        +----src
            +----app      --------------------------->  Encontram-se todos os arquivos do projeto, como: componentes, diretivas, filtros e m√≥dulos da aplica√ß√£o
                +----app.routing.module.ts
                +----app.component.css / app.component.scss
                +----app.component.html
                +----app.component.spec.ts
                +----app.component.ts
                +----app.module.ts
            +----assets   --------------------------->  Recursos externos do projeto, como CSS, imagens, bibliotecas JavaScript, etc.
            +----index.html
            +----main.ts
        +----.angular-cli.json

        . Arquivos da pasta src/app:

            . app.routing.app:              M√≥dulo que configura as rotas para navegar entre as diferentes p√°ginas ou componentes da aplica√ß√£o

            . app.component.css/.scss:      Arquivo respons√°vel pelo estilo do nosso m√≥dulo. Com o Angular n√≥s trabalhamos 
                                            com os estilos separados para cada componente, assim conseguimos ter um desacoplamento de estilos. 
                                            Nesse exemplo n√≥s criamos um projeto com a extens√£o .css, mas tamb√©m temos a possibilidade de 
                                            trabalhar com arquivos Sass. Para que possamos alterar, basta executar o comando ng set 
                                            defaults.styleExt scss, ele ir√° configurar para que os pr√≥ximos componentes sejam criados 
                                            com a extens√£o do .scss.

            . app.component.html:           Arquivo HTML do nosso componente App, segue o mesmo pensamento que os arquivos de estilo.

            . app.component.spec.ts:        Arquivo de teste do nosso componente.

            . app.component.ts:             √â o componente principal da aplica√ß√£o. Ele √© respons√°vel por definir a estrutura e o comportamento da 
                                            aplica√ß√£o.

                . Definir a estrutura do componente principal da aplica√ß√£o

                . Definir o template HTML e o estilo CSS do componente

                . Definir as propriedades e m√©todos do componente

            . app.module.ts:                O Angular √© um framework modular, ele precisa de um ou mais m√≥dulos para que possamos 
                                            gerenciar os nossos componentes, esse m√≥dulo acaba sendo um default, mas podemos criar outros modules e 
                                            chamar eles dentro dele.

        . Arquivos da pasta src:

            . index.html:                   Esse seria o nosso arquivo root, dentro dele rodamos a nossa SPA (Single Page Application).

            . main.ts:                      √â o ponto de entrada da aplica√ß√£o. Ele √© respons√°vel por iniciar a aplica√ß√£o e configurar o ambiente de execu√ß√£o

            . styles.css/.scss:             Como todos os nossos componentes tem o seu pr√≥prio arquivo .css ou .scss, n√≥s podemos 
                                            utilizar esse arquivo para criar algo global como vari√°veis para nossa aplica√ß√£o.

        . Pasta raiz do projeto:

            . tsconfig.app.json e 
                tsconfig.spec.json:         s√£o os nossos arquivos de configura√ß√£o do TypeScript.

            . .gitignore:                   Arquivo do git que utilizamos para o gerenciamento dos arquivos que ser√£o ignorados no momento do 
                                            nosso commit.

            . package.json:                 Esse arquivo √© o respons√°vel por gerenciar as depend√™ncias do nosso projeto, quando executamos o comando  
                                            npm install [biblioteca] --save, ele verifica os pacotes que est√£o dentro desse arquivo e 
                                            baixa para o nosso diret√≥rio node_modules conforme foi visto no passo anterior. O par√¢metro --save √© para deixar
                                            registrado a depend√™ncia da biblioteca no arquivo package.json.

            . README.md:                    Arquivo Markdown para documenta√ß√£o da nossa aplica√ß√£o.

            . tsconfig.json:                Arquivo de configura√ß√£o do TypeScript.

            . tslint.json:                  O tslint fica verificando se estamos escrevendo o nosso c√≥digo corretamente, ele verifica a 
                                            sintaxe do nosso projeto em tempo de execu√ß√£o e em caso de algum erro ou warning ele lan√ßa uma exception 
                                            no console.    

    . Obrigatoriedade de conte√∫do das vari√°veis:

        . Existem v√°rias configura√ß√µes poss√≠veis que permitem declarar uma propriedade sem ter que inicializ√°-la em um componente Angular. 
            Aqui est√£o algumas delas:

            . Usar o tipo "any", ou "undefined"
            
                . Podemos declarar uma propriedade com o tipo any, permitir√° que a propriedade seja inicializada posteriormente.

                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-exemplo',
                        template: '<p>Exemplo</p>'
                    })

                    export class ExemploComponent {
                        name: any;                  // <----------- Tipo any
                        description: undefined;     // <----------- Tipo undefined
                    }

            . Usar o operador "?", ou "!":

                . Podemos usar o operador "?", ou "!", para declarar uma propriedade que pode ser null ou undefined.

                . O simbolo de "!" significa que a propriedade sempre ter√° um valor n√£o nulo

                . O simbolo de "?" significa que a propriedade poder√° ter valor nulo

                . Exemplo

                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-exemplo',
                        template: '<p>Exemplo</p>'
                    })

                    export class ExemploComponent {
                        name?: string;                  // <----------- Operador "!"
                        description!: string;           // <----------- Operador "?"
                    }

            . Podemos adicionar a seguinte configura√ß√£o ao arquivo tsconfig.json para permitir declarar propriedades sem inicializ√°-las:

                // tsconfig.json
                {
                    ...
                    "compilerOptions": {
                        "strictPropertyInitialization": false,
                        ...
                    }
                    ...
                }

                . Exemplo

                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-exemplo',
                        template: '<p>Exemplo</p>'
                    })

                    export class ExemploComponent {
                        name: string;
                        description: string; 
                    }

                . Essa configura√ß√£o desativa a verifica√ß√£o de inicializa√ß√£o de propriedades estritas, permitindo que voc√™ declare 
                    propriedades sem inicializ√°-las.

            . Podemos utilizar o m√©todo construtor para iniciar o valor:

                import { Component } from '@angular/core';

                @Component({
                    selector: 'app-exemplo',
                    template: '<p>Exemplo</p>'
                })

                export class ExemploComponent {
                    name: string;
                    description: string; 

                    constructor() {
                        name = "Bill Gates";                // Inicializa√ß√£o pelo m√©todo construtor
                        description = "Microsoft";
                    }
                }

    . Sequ√™ncia de execu√ß√£o do Angular:

        . O inicio do projeto ocorrer√° pelo componente src/main.ts:

            import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

            import { AppModule } from './app/app.module';       // Importa√ß√£o do modulo para iniciar a aplica√ß√£o


            platformBrowserDynamic().bootstrapModule(AppModule)
                .catch(err => console.error(err));


            . Identificar√° o arquivo src/app/app.module.ts para iniciar a constru√ß√£o da p√°gina principal.

        . O arquivo src/app/app.module.ts faz a associa√ß√£o com os componentes principais da p√°gina principal:

            import { BrowserModule } from '@angular/platform-browser';
            import { NgModule } from '@angular/core';

            import { AppComponent } from './app.component';     // abrir√° o arquivo src/app/app.component.ts

            @NgModule({
                declarations: [
                    AppComponent                    
                ],
                imports: [
                    BrowserModule
                ],
                providers: [],
                bootstrap: [AppComponent]       // Componente principal que iniciar√° a aplica√ß√£o 
            })

            export class AppModule { }

            . Observe que √© feito a importa√ß√£o do arquivo "./app.component" que iniciar√° a constru√ß√£o da p√°gina inicial:

            . Propriedades do arquivo app.module.ts

                . declarations: The components, directives, and pipes that belong to this NgModule.

                . exports: The subset of declarations that should be visible and usable in the component 
                            templates of other NgModules.

                . imports: Other modules whose exported classes are needed by component templates declared in this NgModule.

                . providers: Creators of services that this NgModule contributes to the global collection of services;
                            they become accessible in all parts of the application. (You can also specify providers at the component level.)

                . bootstrap: The main application view, called the root component, which hosts all other application views.
                            Only the root NgModule should set the bootstrap property.

        . A partir da defini√ß√£o do componente principal o framework do angular abrir√° o arquivo src/app/app.component.ts

            import { Component } from '@angular/core';

            @Component({
                selector: 'app-root',
                templateUrl: './app.component.html',
                styleUrls: ['./app.component.scss']
            })
            export class AppComponent {
                title = 'weather-app';
            }

        . O arquivo "app.component.ts" √© o componente principal da aplica√ß√£o:

            import { Component } from '@angular/core';

            @Component({
                selector: 'app-root',
                templateUrl: './app.component.html',
                styleUrls: ['./app.component.scss']
            })
            export class AppComponent {
                title = 'stock-app';
            }

            . Aqui est√° o que cada parte desse c√≥digo faz:

                import { Component } from '@angular/core';:     Importa a classe Component do m√≥dulo @angular/core. Essa 
                                                                classe √© usada para definir um componente Angular.

                @Component({...}):                              Define o componente AppComponent com as seguintes propriedades:

                    selector: 'app-root':                       Define o seletor do componente, que √© usado para identificar o 
                                                                componente no HTML.

                    templateUrl: './app.component.html':        Define o arquivo HTML que ser√° usado como template para o componente.

                    styleUrls: ['./app.component.css']:         Define o arquivo CSS que ser√° usado para estilizar o componente.

                export class AppComponent { ... }:              Define a classe AppComponent que ser√° exportada e usada como componente.

                title = 'stock-app';:                           Define uma propriedade title com o valor 'my-app'. Essa propriedade pode 
                                                                ser usada no template HTML para exibir o t√≠tulo da aplica√ß√£o.

        . O app.component.ts ir√° vincular com o template src/app/app.component.html

        . Onde criar√° a p√°gina index.html fazendo a substitui√ß√£o da tag <app-root>

        . Fluxo de execu√ß√£o

                +-------------------+
                |   src/main.ts     |   import { AppModule } from './app/app.module'; 
                +-------------------+
                        |
                        |
                        V
            +---------------------------+
            |   src/app/app.module.ts   |   import { AppComponent } from './app.component'
            +---------------------------+   ... bootstrap: [AppComponent]
                        |                   export class AppModule { }
                        |
                        |
                        V                       @Component({
            +-------------------------------+       selector: 'app-root',
            |   src/app/app.component.ts    |       templateUrl: './app.component.html', 
            +-------------------------------+       styleUrls: ['./app.component.scss'] 
                        |                       })
                        |
                        V
            +-------------------------------+
            |   src/app/app.component.html  |
            +-------------------------------+
                        |
                        |
                        V
                +---------------+
                |   index.html  |           <app-root></app-root>
                +---------------+

     . A cria√ß√£o de um componente no projeto √© feito atrav√©s do comando:

        ng generate component [nome do componente]

        ou

        ng g c [nome do componente]
        
    . Demo

        . Crie o componente "stock-item" de acordo com a linha abaixo:

            ng generate component stock/stock-item            

            # O comando angularCli apresentar√° o seguinte resultado na tela
            # CREATE src/app/stock/stock-item/stock-item.component.css (0 bytes)
            # CREATE src/app/stock/stock-item/stock-item.component.html (25 bytes)
            # CREATE src/app/stock/stock-item/stock-item.component.spec.ts (621 bytes)
            # CREATE src/app/stock/stock-item/stock-item.component.ts (217 bytes)
            # UPDATE src/app/app.module.ts (495 bytes)

        . Altere o componente "stock-item.component.ts" como abaixo:

            import { Component, OnInit } from '@angular/core';      // Acrescente no import a interface "OnInit"

            @Component({
                selector: 'app-stock-item',
                templateUrl: './stock-item.component.html',
                styleUrls: ['./stock-item.component.css']
            })

            export class StockItemComponent implements OnInit {     // Implemente a interface "OnInit"
                public name!: string;                               // Implemente as propriedades
                public code!: string;                               // Implemente as propriedades
                public price!: number;                              // Implemente as propriedades
                public previousPrice!: number;                      // Implemente as propriedades

                ngOnInit(): void {                                  // Crie o m√©todo "ngOnInit" da interface "OnInit"
                    this.name = "Test Stock Company";               // Atualize os valores das propriedades
                    this.code = "TSC"                               // Atualize os valores das propriedades
                    this.price = 85;                                // Atualize os valores das propriedades
                    this.previousPrice = 80;                        // Atualize os valores das propriedades
                }
            }

        . Altere o conte√∫do do componente "stock-item.component.html" com o conte√∫do abaixo:

            <h1>Welcome to app!</h1>
            <div class="stock-container">
                <div class="name">
                    <h3>{{name}}</h3> - <h4>({{code}})</h4>
                </div>
                <div class="price">$ {{price}}</div>
            </div>

        . Atualize o conte√∫do do componente "stock-item.component.css" com o conte√∫do abaixo:

            .stock-container {
                border: 1px solid black;
                border-radius: 5px;
                display: inline-block;
                padding: 10px;
            }

            .stock-container .name h3,
            .stock-container .name h4 {
                display: inline-block;
            }

        . Atualize o conte√∫do do componente "app.component.html" com a linha abaixo:

            <app-stock-item></app-stock-item>

        . Execute o projeto com o comando abaixo:

            ng s -o       

    . Mudan√ßas feitas no arquivo "app.module.ts" automaticamente, ap√≥s a geran√ß√£o do componentes "stock-item":

        import { BrowserModule } from '@angular/platform-browser';
        import { NgModule } from '@angular/core';
        import { AppComponent } from './app.component';
        import { StockItemComponent } from './stock/stock-item/stockitem.component';    // Linha inserida

        @NgModule({
            declarations: [
                AppComponent,
                StockItemComponent                                                      // Linha inserida
            ],
            imports: [
                BrowserModule
            ],
            providers: [],
            bootstrap: [AppComponent]
        })

        export class AppModule { }

    . Entendimento do que foi feito:

        . Componente criado "stock-item.component.ts"

        import { Component, OnInit } from '@angular/core';

        @Component({
            selector: 'app-stock-item',                         //  seletor do componente, utilizado para identificar o componente no HTML.
            templateUrl: './stock-item.component.html',
            styleUrls: ['./stock-item.component.css']
        })

        export class StockItemComponent implements OnInit {
            constructor() { }
            
            ngOnInit() {
            }
        }

        . Bibliotecas utilizadas

            . Bibliotecas criadas automaticamente na cria√ß√£o do projeto:

                . NgModule

                    . Um m√≥dulo √© definido usando o decorator @NgModule, que recebe um objeto com v√°rias propriedades:

                        . declarations: lista de componentes, diretivas e pipes que fazem parte do m√≥dulo
                        . imports: lista de m√≥dulos que s√£o importados pelo m√≥dulo atual
                        . providers: lista de servi√ßos que s√£o fornecidos pelo m√≥dulo
                        . bootstrap: lista de componentes que s√£o carregados inicialmente quando o m√≥dulo √© iniciado

                    . A biblioteca NgModule serve para:

                        . Organizar a aplica√ß√£o em m√≥dulos independentes e reutiliz√°veis
                        . Fornecer uma forma de gerenciar as depend√™ncias entre os componentes e servi√ßos
                        . Habilitar a funcionalidade de lazy loading, que permite carregar m√≥dulos apenas quando necess√°rio

                . BrowserModule

                    . Fornece o mecanismo de renderiza√ß√£o para o navegador

                    . Habilita a funcionalidade de roteamento

                    . Fornece servi√ßos para trabalhar com o DOM (Document Object Model)

                    . Habilita a funcionalidade de eventos do navegador

    . Demo - Instalando a biblioteca CSS do Bootstrap

        . No prompt do terminal, acesse a pasta raiz do projeto e instale o bootstrap com o comando abaixo:

            $ npm install bootstrap@5.3.3 --save

        . Acesse o arquivo angular.json da pasta raiz do projeto, localize o atributo "styles" e inclua a configura√ß√£o do 
            bootstrap como abaixo:

            ...
            "styles": [
                /* "styles.css",  apague esse linha */
                "./node_modules/bootstrap/dist/css/bootstrap.css"
            ],
            ...

        . Acesse o arquivo app.component.html da pasta raiz e substitua pelo c√≥digo abaixo:

            <div class="container">
                <div class="jumbotron">
                    <h1 class="display-4">Hello, world!</h1>
                    <p class="lead">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
                    <hr class="my-4">
                    <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>
                    <a class="btn btn-primary btn-lg" href="#" role="button">Learn more</a>
                </div>
            </div>

3. Data Binding
----------------

    . Fonte de pesquisa:

        https://www.tutorialspoint.com/angular8/angular8_data_binding.htm

    . √â uma t√©cnica fundamental no Angular que permite ligar os dados do componente √† view, de forma que os 
        dados sejam atualizados automaticamente quando o componente √© atualizado.

    . Vantagens

        . Atualiza√ß√£o autom√°tica

        . Redu√ß√£o de c√≥digo

        . Melhoria na manuten√ß√£o.

    . Desvantagens

        . Complexidade

        . Desempenho, se for utilizado incorretamente.

    . O data binding pode ser feito de duas forma:

        . One-way - √â uma intera√ß√£o unidirecional entre o componente e seu modelo. Se voc√™ executar qualquer 
                    altera√ß√£o em seu componente, ele refletir√° os elementos HTML.

        . Two-way - √â uma intera√ß√£o bidirecional, os dados fluem em ambas as dire√ß√µes (do componente para as 
                    visualiza√ß√µes e das visualiza√ß√µes para o componente)

    . One-way Data Binding

        . Data binding √© uma t√©cnica, onde o dado fica sincronizado entre o componente e a vis√£o.

        . Essa t√©cnica √© dividida em 6 grupos:

            . Property binding: [property]="valor propriedade" - utilizado para ligar o dado de uma propriedade de um componente para 
                                o elemento DOM, onde "property" seria a propriedade do elemento: disabled, autocomplete, required, etc; e
                                o "valor da propriedade" seria o valor necess√°rio da propriedade: true/false, 50, etc.

                    // *.component.ts
                    export class TestComponent { 
                        userName:string = "Peter"; 
                    }

                    // *.component.html
                    // userName property is bind to an attribute of a DOM element <input> tag
                    <input type="text" [value]="userName" [disabled]="true" >

            . String Interpola√ß√£o: {{nome}} - onde nome √© uma propriedade do componente, entre {{ }}

                // *.component.ts
                export class TestComponent implements OnInit { 
                    appName = "My first app in Angular 4"; 
                }

                // *.component.html 
                <h1>{{appName}}</h1>            

                // app.component.html
                <app-test></app-test>

            . Style binding  √© usado para ligar o dado do componente para a propriedade de estilo do HTML:

                // *.component.ts
                export class TestComponent { 
                    myColor = 'brown';
                }

                // *.component.html
                <p [style.color]="myColor">Text color is styled using style binding</p>            

            . Event Binding: (evento)="fun√ß√£o do componente Angular", onde o evento √© nome do evento do elemento 
                                HTML: click(), hover(), doubleClick(), etc, que ser√° associado ao m√©todo do componente Angular:

                // *.component.ts
                export class TestComponent { 
                    showData(event: any){ 
                        console.log("button is clicked!"); if(event) { 
                            console.log(event.target); 
                            console.log(event.target.value); 
                        } 
                    } 
                }

                // *.component.html
                <h2>Event Binding</h2> 
                <button (click)="showData($event)">Click here</button>


                // ou podemos utilizar o prefixo "on" + o nome do evento

                <button on-click="showData($event)">Click here</button>

            . Class binding √© usado para ligar o dado do componente para a propriedade class do HTML:

                // *.component.ts
                export class TestComponent { 
                    myCSSClass = "red"; 
                    applyCSSClass = false; 
                }

                // *.component.html
                <p [class]="myCSSClass">This paragraph class comes from *myClass* property </p> 
                <p [class.blue]="applyCSSClass">This paragraph class does not apply</p>

            . Attribute binding: [attr:attribute name]="Nome da Propriedade do Componente" - √© usado para ligar o dado de um componente para o 
                                atributo HTML:

                // *.component.ts
                import { Component } from '@angular/core';  // Obrigat√≥rio importa√ß√£o do "Component"

                @Component({
                    selector: 'app-root',
                    templateUrl: './app.component.html',
                    styleUrls: ['./app.component.css']
                })

                export class AppComponent {

                    // Declara√ß√£o das propriedade para ser usado nos Attribute Binding
                    titulo = 'Este √© um exemplo de Attribute Binding';
                    isDisabled = true;
                    placeholder = 'Digite seu nome';
                    estilo = 'color: blue; font-size: 24px;';
                    classe = 'exemplo-classe';

                    acao() {
                        console.log('Bot√£o clicado!');
                    }
                }

                // *.component.html
                <div [attr.title]="titulo">Este √© um exemplo de Attribute Binding</div>

                <button (click)="acao()" [attr.disabled]="isDisabled">Clique aqui</button>

                <input [attr.placeholder]="placeholder" type="text">

                <div [attr.style]="estilo">Este √© um exemplo de Attribute Binding</div>

                <div [attr.class]="classe">Este √© um exemplo de Attribute Binding</div>

        . Demo - Property Binding

                . Altere o componenete "stock-item.component.ts" como abaixo:

                    import { Component, OnInit } from '@angular/core';
                        @Component({
                            selector: 'app-stock-item',
                            templateUrl: './stock-item.component.html',
                            styleUrls: ['./stock-item.component.css']
                        })

                        export class StockItemComponent implements OnInit {
                            public name!: string;
                            public code!: string;
                            public price!: number;
                            public previousPrice!: number;
                            public positiveChange!: boolean;                 // Linha inserida

                            constructor() { }

                            ngOnInit() {
                                this.name = 'Test Stock Company';
                                this.code = 'TSC';
                                this.price = 85;
                                this.previousPrice = 80;
                                this.positiveChange = this.price >= this.previousPrice;     // Linha inserida
                            }
                    }        

                . Insira as linhas abaixo no arquivo "stock-item.component.css":

                    ...
                    .positive {
                        color: green;
                    } 
                    .negative {
                        color: red;
                    }

                . Insira as linhas abaixo no arquivo "stock-item.component.html"

                    <div class="stock-container">
                        <div class="name">
                            <h3>{{name}}</h3> - <h4>({{code}})</h4>
                        </div>
                        
                        <!-- DIV alterada 
                        
                        <div class="price">$ {{price}}</div>
                        
                        Fim da altera√ß√£o -->

                        <div [class]="positiveChange ? 'positive' : 'negative'">
                            $ {{price}}
                        </div>
                        </div>            
                    </div>            

                . Altere o conte√∫do do arquivo "stock-item.component.html" pelo abaixo:

                    <app-stock-item></app-stock-item>

                . Execute o projeto e veja o resultado:

                    ng s -o

        . Demo - Event Binding

            . Crie as linhas abaixo na classe "stock-item.component.ts"


                export class StockItemComponent implements OnInit {
                    ...
                    public favorite: boolean;           // Propriedade criada
                    
                    constructor() { }
                    ...

                    // M√©todo criado
                    toggleFavorite() {
                        console.log('We are toggling the favorite state for this stock');
                        this.favorite = !this.favorite;
                    }
                }

            . Crie as linhas abaixo na no arquivo "stock-item.component.html"

                <div class="stock-container">
                    <div class="name">
                        {{name + ' (' + code + ')'}}
                    </div>

                    <div [class]="positiveChange ? 'positive' : 'negative'">
                        $ {{price}}
                    </div>

                    <!-- Button Criado -->
                    <button (click)="toggleFavorite()" 
                            [disabled]="favorite"
                            class="btn btn-primary">
                        Add to Favorite
                    </button>
                </div>        

            . Execute o projeto e veja se o resultado foi o bot√£o desabilitado quando √© clicado:

                ng s -o

            . Envio do evento disparado

                . Inclua o envio do evento como abaixo na classe "stock-item.component.ts"

                    export class StockItemComponent implements OnInit {
                        ...
                        public favorite: boolean;      
                        
                        constructor() { }
                        ...

                        // Inclua na assinatura do m√©todo o par√¢metro "evento". 
                        toggleFavorite( event: any ) {
                            console.log('We are toggling the favorite state for this stock', event);       // Altere a linha
                            console.log('We are toggling the favorite state for this stock', event.target);       // Altere a linha
                            this.favorite = !this.favorite;
                        }
                    }

                . Crie as linhas abaixo na no arquivo "stock-item.component.html"

                    <div class="stock-container">
                        <div class="name">{{name + ' (' + code + ')'}}</div>
                            <div  [class]="positiveChange ? 'positive' : 'negative'">
                                $ {{price}}
                            </div>

                            <!-- Adicione o par√¢metro $event na chamada do m√©todo -->
                            <button (click)="toggleFavorite( $event )"
                                    [disabled]="favorite">
                                Add to Favorite
                            </button>
                    </div>        

            . Execute o projeto e veja o resultado no console do navegador

                ng s -o


        . Models Class no desenvolvimento 

            . A utiliza√ß√£o de "Models Class" auxilia na clareza do c√≥digo.

            . As principais vantagens s√£o:

                . Separa√ß√£o de Concerns: As classes modelos permitem separar a l√≥gica de neg√≥cios da l√≥gica de apresenta√ß√£o, 
                    tornando o c√≥digo mais organizado e f√°cil de manter.

                . Reutiliza√ß√£o de C√≥digo: As classes modelos podem ser reutilizadas em diferentes componentes e servi√ßos, 
                    reduzindo a duplica√ß√£o de c√≥digo e melhorando a efici√™ncia.

                . Tipagem Forte: As classes modelos permitem a utiliza√ß√£o de tipagem forte, o que ajuda a evitar erros de 
                    tipo e melhora a seguran√ßa do c√≥digo.

                . Legibilidade: As classes modelos tornam o c√≥digo mais leg√≠vel, pois as propriedades e m√©todos s√£o claramente 
                    definidos e organizados.

                . Manuten√ß√£o: As classes modelos facilitam a manuten√ß√£o do c√≥digo, pois as altera√ß√µes podem ser feitas em um 
                    √∫nico local, sem afetar outras partes do sistema.

                . Testabilidade: As classes modelos tornam o c√≥digo mais test√°vel, pois as propriedades e m√©todos podem ser 
                    facilmente isolados e testados.

                . Escalabilidade: As classes modelos permitem que o sistema seja escalado de forma mais f√°cil, pois as classes 
                    podem ser adicionadas ou removidas sem afetar a estrutura geral do sistema.

                . Integra√ß√£o com Outros Componentes: As classes modelos podem ser facilmente integradas com outros componentes e 
                    servi√ßos, tornando a comunica√ß√£o entre eles mais f√°cil e eficiente.

                . Melhoria da Performance: As classes modelos podem ajudar a melhorar a performance do sistema, pois as propriedades e 
                    m√©todos podem ser otimizados para reduzir a carga de processamento.

                . Conformidade com Padr√µes: As classes modelos permitem que o sistema seja desenvolvido de acordo com padr√µes e 
                    conven√ß√µes estabelecidas, o que ajuda a garantir a qualidade e a manutenibilidade do c√≥digo.

            . Al√©m disso, as classes modelos tamb√©m permitem a utiliza√ß√£o de recursos como:

                . Inje√ß√£o de Depend√™ncias: As classes modelos podem ser injetadas com depend√™ncias, o que torna a cria√ß√£o de 
                    inst√¢ncias mais f√°cil e flex√≠vel.

                . Heran√ßa: As classes modelos podem herdar propriedades e m√©todos de outras classes, o que permite a cria√ß√£o de 
                    hierarquias de classes mais complexas.

                . Polimorfismo: As classes modelos podem ser polim√≥rficas, o que permite que as mesmas propriedades e m√©todos 
                    sejam utilizados de forma diferente em diferentes contextos.

        . Demo (Models Class)

            . Execute o comando abaixo na pasta raiz do projeto

                ng generate class model/stock --skip-tests

            . Adapte a classe model criada conforme abaixo:

                export class Stock {
                    favorite: boolean = false;

                    constructor(public name: string,
                                public code: string,
                                public price: number,
                                public previousPrice: number) {}

                    isPositiveChange(): boolean {
                        return this.price >= this.previousPrice;
                    }
                }

            . Altere o c√≥digo do componente "stock-item.component.ts" como abaixo:

                import { Component, OnInit } from '@angular/core';
                import { Stock } from '../../model/stock';                  // Linha inserida

                @Component({
                    selector: 'app-stock-item',
                    templateUrl: './stock-item.component.html',
                    styleUrls: ['./stock-item.component.css']
                })

                export class StockItemComponent implements OnInit {
                    /*                                                      Linhas eliminadas
                        public name!: string;
                        public code!: string;
                        public price!: number;
                        public previousPrice!: number;
                        public positiveChange!: boolean;                 
                        public favorite!: boolean;                       
                    */

                    public stock!: Stock;                                           // Linha Inserida

                    constructor() { }
                    
                    ngOnInit() {
                        /*                                                          Linhas eliminadas
                            this.name = "Test Stock Company";
                            this.code = "TSC"
                            this.price = 85;
                            this.previousPrice = 80;
                            this.positiveChange = this.price >= this.previousPrice;     // Linha inserida
                        */

                        this.stock = new Stock('Test Stock Company', 'TSC', 85, 80);    // Linha inserida
                    } 
                    
                    toggleFavorite(event) {
                        console.log('We are toggling the favorite state for this stock', event);

                        // this.favorite = !this.favorite;                              // Linha eliminada


                        this.stock.favorite = !this.stock.favorite;                     // Linha inserida
                    }
                }

            . Altere o c√≥digo do componente "stock-item.component.html" como abaixo:

                <div class="stock-container">
                    <div class="name">
                        {{stock.name + ' (' + stock.code + ')'}}            <!-- Linha alterada -->
                    </div>
                
                    <!-- Div inteira alterada -->
                    <div class="price"                                      
                        [class]="stock.isPositiveChange() ? 'positive' :
                                                            'negative'">    
                        $ {{stock.price}}
                    </div>

                    <!-- Div alterada -->
                    <button (click)="toggleFavorite($event)"
                            [disabled]="stock.favorite"
                            class="btn btn-primary">
                        Add to Favorite
                    </button>
                </div>

            . Execute o projeto e veja o resultado est√° funcionando como antes:

                ng s -o

        . Class Binding

            . [ngClass] e [class] binding √© usado para ligar o dado do componente para a propriedade class do HTML:

                . ngClass

                    . Usada para adicionar ou remover classes CSS dinamicamente em um elemento HTML com base em uma condi√ß√£o ou express√£o.

                        // *.component.html
                        <div [ngClass]="{'ativo': isAtivo, 'desabilitado': isDesabilitado}">
                            <p>Texto do componente</p>
                            <button (click)="toggleAtivo()">Toggle Ativo</button>
                            <button (click)="toggleDesabilitado()">Toggle Desabilitado</button>
                        </div>

                        // *.component.css
                        .ativo {
                            background-color: #007bff;
                            color: #fff;
                            padding: 10px 20px;
                        }
                        
                        .desabilitado {
                            background-color: #6c757d;
                            color: #fff;
                            padding: 10px 20px;
                            opacity: 0.5;
                        }

                        // *.component.ts
                        import { Component } from '@angular/core';
                        
                        @Component({
                            selector: 'app-ngclass-example',
                            templateUrl: './ngclass-example.component.html',
                            styleUrls: ['./ngclass-example.component.css']
                        })
                        export class NgClassExampleComponent {
                            isAtivo = true;
                            isDesabilitado = false;
                        
                            toggleAtivo() {
                            this.isAtivo = !this.isAtivo;
                            }
                        
                            toggleDesabilitado() {
                            this.isDesabilitado = !this.isDesabilitado;
                            }
                        }

                        // app.component.html 
                        <app-ngclass-example></app-ngclass-example>

                    . Nesse exemplo, temos um componente que possui uma div com a diretiva ngClass que aplica as classes 
                        CSS ativo e desabilitado com base nas propriedades isAtivo e isDesabilitado. Quando o bot√£o 
                        "Toggle Ativo" √© clicado, a propriedade isAtivo √© alternada e a classe CSS ativo √© aplicada 
                        ou removida. Da mesma forma, quando o bot√£o "Toggle Desabilitado" √© clicado, a propriedade 
                        isDesabilitado √© alternada e a classe CSS desabilitado √© aplicada ou removida.


                                                                                                // *.component.ts
                                                                                                import { Component } from '@angular/core';
                                                                                                ...
                                                                                                export class NgClassExampleComponent {
                                                                                                    isAtivo = true;
                                                +---------------------------+-------------->        isDesabilitado = false;
                                                |                           |                        ...
                                                |                           |                   }
                                                |                           |
                                                |                           |
                        [ngClass]="{'ativo': isAtivo, 'desabilitado': isDesabilitado}">
                                        |                   |
                                        +-------------------+------------------------------>    // *.component.css
                                                                                                .ativo {
                                                                                                    ...
                                                                                                }
                                                                                                
                                                                                                .desabilitado {
                                                                                                    ...
                                                                                                }

                . class

                    . Usada para adicionar ou remover classes CSS de um elemento HTML. Ela √© uma diretiva de liga√ß√£o de propriedade 
                        que permite vincular uma express√£o a uma classe CSS.

                        // *.component.css
                        .ativo {
                            background-color: #ccc;
                            color: #333;
                        }

                        // *.component.html
                        <div [class]="ativo ? 'ativo' : ''">Este √© um elemento</div>

                        // *.component.ts
                        import { Component } from '@angular/core';
                        
                        @Component({
                            selector: 'app-exemplo',
                            templateUrl: './exemplo.component.html',
                            styleUrls: ['./exemplo.component.css']
                        })
                        export class ExemploComponent {
                            ativo = true;
                        }

                . A diferen√ßa entre as diretivas [class] e [ngClass] √© que:

                    . [class] - depende somente de uma condi√ß√£o para adicionar/remover um estilo css. Como se fosse um IF/ELSE

                    . [ngClass] - Utiliza um case/switch de op√ß√µes para encontrar o estilo, como se fosse um CASE/WHEN, ou um SWITCH

                . Use class quando voc√™ precisa adicionar ou remover apenas uma classe CSS e a l√≥gica √© simples.

                . Use ngClass quando voc√™ precisa adicionar ou remover v√°rias classes CSS com base em condi√ß√µes 
                    diferentes ou quando a l√≥gica √© mais complexa.
        
        . Demo - Class Binding "ngClass e class"

            . Adicione as linhas abaixo no stock-item.component.css

                ...
                .large-change {
                    font-size: 1.2em;
                } 

                .small-change {
                    font-size: 0.8em;
                }   

            . Adicione as linhas abaixo no stock-item.component.html

                <div class="stock-container">
                        <div class="name">{{stock.name + ' (' + stock.code + ')'}}</div>
                        
                        <div    class="price"
                                [ngClass]="stockClasses">           <!-- Div alterada -->
                            $ {{stock.price}}
                        </div>
                        
                        <button (click)="toggleFavorite($event)"
                                [disabled]="stock.favorite">
                            Add to Favorite
                        </button>
                </div>

            . Adicione as linhas abaixo no stock-item.component.ts

                import { Component, OnInit } from '@angular/core';
                import { Stock } from '../../model/stock';

                @Component({
                    selector: 'app-stock-item',
                    templateUrl: './stock-item.component.html',
                    styleUrls: ['./stock-item.component.css']
                })

                export class StockItemComponent implements OnInit {
                    public stock: Stock;
                    public stockClasses!: any;        // Linha inserida

                    constructor() { }

                    ngOnInit() {
                        this.stock = new Stock('Test Stock Company', 'TSC', 85, 80);

                        let diff = (this.stock.price / this.stock.previousPrice) - 1;   // Linha inserida
                        let largeChange = Math.abs(diff) > 0.01;                        // Linha inserida
                        this.stockClasses = {                                           // Linha/objeto inserido
                            "positive": this.stock.isPositiveChange(),
                            "negative": !this.stock.isPositiveChange(),
                            "large-change": largeChange,
                            "small-change": !largeChange
                        };

                    } 

                    toggleFavorite(event) {
                        console.log('We are toggling the favorite state for this stock', event);
                        this.stock.favorite = !this.stock.favorite;
                    }
                }                    

            . Execute o projeto e veja o resultado est√° funcionando como antes:

                ng s -o

            . Altere o c√≥digo do componente "stock-item.component.html" com o conte√∫do abaixo:

                <div class="stock-container">
                    <div class="name">
                        {{stock.name + ' (' + stock.code + ')'}} 
                    </div>

                                        <!--                Atributo alterado                   -->
                    <div class="price"  [class]="stock.isPositiveChange() ? 'positive' : 'negative'"> 
                        $ {{stock.price}}
                    </div>

                    <button (click)="toggleFavorite($event)" [disabled]="stock.favorite">
                        Add to Favorite
                    </button>

                </div>

            . Execute o projeto e veja o resultado est√° funcionando como antes:

                ng s -o

            . Altere o c√≥digo do componente "stock-item.component.html" com o conte√∫do abaixo:

                <div class="stock-container">
                    <div class="name">
                        {{stock.name + ' (' + stock.code + ')'}} 
                    </div>

                                        <!--                Atributo alterado                   -->
                    <div class="price"  [class.positive]="stock.isPositiveChange()" [class.negative]="!stock.isPositiveChange()"  >  <!-- [ngStyle]="stockStyles"> --> <!-- Div alterada -->
                        $ {{stock.price}}
                    </div>

                    <button (click)="toggleFavorite($event)" [disabled]="stock.favorite">
                        Add to Favorite
                    </button>

                </div>

        . Style Binding

            . [ngStyle], [attr...]  

                . [ngStyle] - Trabalha de forma parecida do [ngClass] 

                    <div [ngStyle]="{'background-color': 'red', 'color': 'white'}">...</div>

                    <div [ngStyle]="{'background-color': isActive ? 'red' : '', 'color': isActive ? 'white' : ''}">...</div>

                    <div [ngStyle]="objStyle">...</div>

        . Demo - Style Binding "ngStyle"

            . Altere o arquivo "stock-item.component.ts" como abaixo:

                import { Component, OnInit } from '@angular/core';
                import { Stock } from '../../model/stock';

                @Component({
                    selector: 'app-stock-item',
                    templateUrl: './stock-item.component.html',
                    styleUrls: ['./stock-item.component.css']
                })

                export class StockItemComponent implements OnInit {
                    public stock!: Stock;
                    public stockStyles!: any;                                              // Linha inserida

                    constructor() { }

                    ngOnInit() {
                        this.stock = new Stock('Test Stock Company', 'TSC', 85, 80);
                        let diff = (this.stock.price / this.stock.previousPrice) - 1;
                        let largeChange = Math.abs(diff) > 0.01;

                        this.stockClasses = {                                           
                            "positive": this.stock.isPositiveChange(),
                            "negative": !this.stock.isPositiveChange(),
                            "large-change": largeChange,
                            "small-change": !largeChange
                        };


                        this.stockStyles = {                                                // Objeto inserido
                            "color": this.stock.isPositiveChange() ? "green" : "red",
                            "font-size": largeChange ? "1.2em" : "0.8em"
                        };
                    } 

                    toggleFavorite(event) {
                        console.log('We are toggling the favorite state for this stock',
                        event);
                        this.stock.favorite = !this.stock.favorite;
                    }
                }


            . Altere o componente "stock-item.component.html" como abaixo:

                <div class="stock-container">
                    <div class="name">
                        {{stock.name + ' (' + stock.code + ')'}}
                    </div>

                    <div    class="price"
                            [ngStyle]="stockStyles">            <!-- Div alterada -->
                        $ {{stock.price}}
                    </div>

                    <button (click)="toggleFavorite($event)"
                            [disabled]="stock.favorite">
                        Add to Favorite
                    </button>
                </div>

            . Execute o projeto e veja o resultado est√° funcionando como antes:

                ng s -o

    . Two-way Data Binding

        . ngModel 

            . Forma One-Way:

                <input type="text" 
                    class="form-control"
                    (input)="alterarNome($event)"
                    [value]="nome">

            . Forma Two-Way:

                <input type="text"
                        class="form-control"
                        name="nome"
                        [(ngModel)]="nome">

            . Para utilizar [(ngModel)] √© obrigat√≥rio informar o atributo "name" na tag HTML

            . Usada para criar uma liga√ß√£o bidirecional entre o formul√°rio e o modelo de dados, permitindo que 
                    os dados sejam atualizados automaticamente quando o usu√°rio interage com o formul√°rio.

                <input type="text" [(ngModel)]="nome">

                <!-- 
                    . Quando o usu√°rio digita algo no campo, o modelo de dados √© atualizado automaticamente.
                    . Quando o modelo de dados √© atualizado, o campo de formul√°rio √© atualizado automaticamente.
                -->

            . Quando usamos o "ngModel" sem o s√≠mbolo "[()]" em torno dele, ele funciona de forma unidirecional. Isso significa que o 
                valor do elemento de formul√°rio √© atualizado automaticamente na propriedade do componente, mas o valor da propriedade do 
                componente n√£o √© atualizado automaticamente no elemento de formul√°rio.

                <input type="text" ngModel="nome">
                
                <!-- 
                    Nesse caso, quando o usu√°rio digita algo no formul√°rio, o valor √© atualizado automaticamente na propriedade nome do componente. 
                    No entanto, se voc√™ atualizar a propriedade nome do componente em algum lugar do seu c√≥digo, o valor n√£o ser√° atualizado 
                    automaticamente no formul√°rio.
                --!>

            . "ngModel" encontra-se no pacote "FormsModule":

                . FormsModule -  Um pacote que serve para fornecer funcionalidades de formul√°rios para a aplica√ß√£o

                    . Fornece diretivas para criar e gerenciar formul√°rios

                    . Permiti a valida√ß√£o de dados de formul√°rio

                    . Fornece funcionalidades de binding de dados para formul√°rios

                    . Fornece diretivas, como:

                        . ngModel: diretiva para criar um binding de dados entre um formul√°rio e um componente

                        . ngForm: diretiva para criar um formul√°rio. Fornece uma forma de gerenciar os dados de formul√°rio e 
                                    realizar valida√ß√µes de forma autom√°tica.

                        . ngFormGroup: diretiva para criar um grupo de formul√°rios e gerenciar os dados de formul√°rio

                        . ngFormControl: diretiva para criar um controle de formul√°rio e gerenciar os dados de formul√°rio 

                        . ngFormArray: diretiva para criar um array de formul√°rios e gerenciar os dados de formul√°rio                

            . Para trabalhar com ngModel √© necess√°rio importar o pacote "FormsModule" dentro do componente "app.module.ts":

                ...
                import { FormsModule } from '@angular/forms';
                ...
                imports :[
                    ...
                    FormsModule
                ]

            . Exemplos

                Exemplo 1

                    // *.component.ts
                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-root',
                        templateUrl: './app.component.html',
                        styleUrls: ['./app.component.css']
                    })
                    export class AppComponent {
                        nome = 'Jo√£o';
                    }

                    // *.component.html
                    <input type="text" [(ngModel)]="nome">
                    <p>Ol√°, {{ nome }}!</p>

                Exemplo 2

                    // *.component.ts
                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-root',
                        templateUrl: './app.component.html',
                        styleUrls: ['./app.component.css']
                    })
                    export class AppComponent {
                        cor = 'azul';
                    }


                    // *.component.html
                    <select [(ngModel)]="cor">
                        <option value="vermelho">Vermelho</option>
                        <option value="azul">Azul</option>
                        <option value="verde">Verde</option>
                    </select>
                    <p>A cor selecionada √©: {{ cor }}</p>

                Exemplo 3

                    // *.component.ts
                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-root',
                        templateUrl: './app.component.html',
                        styleUrls: ['./app.component.css']
                    })
                    export class AppComponent {
                        aceito = false;
                    }


                    // *.component.html
                    <input type="checkbox" [(ngModel)]="aceito">
                    <p>Voc√™ aceitou os termos? {{ aceito }}</p>

                Exemplo 4

                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-root',
                        templateUrl: './app.component.html',
                        styleUrls: ['./app.component.css']
                    })
                    export class AppComponent {
                        opcao = 'opcao1';
                    }

                    <input type="radio" [(ngModel)]="opcao" value="opcao1"> Op√ß√£o 1
                    <input type="radio" [(ngModel)]="opcao" value="opcao2"> Op√ß√£o 2
                    <p>A op√ß√£o selecionada √©: {{ opcao }}</p>

        . Demo - ngModel

            . Execute a linha abaixo na raiz do projeto

                ng g component stock/create-stock  --skip-tests          

            . Altere o componente "create-stock.component.ts" com o conte√∫do abaixo:

                import { Component, OnInit } from '@angular/core';
                import { Stock } from 'src/app/model/stock';                    // Linha inserida

                @Component({
                    selector: 'app-create-stock',
                    templateUrl: './create-stock.component.html',
                    styleUrls: ['./create-stock.component.css']
                })

                export class CreateStockComponent {
                    public stock: Stock;                                    // Linha inserida

                    constructor() {                                         // Construtor e conte√∫do inserido
                        this.stock = new Stock('test', '', 0, 0);
                    }
                }

            . Altere o conte√∫do do componente "create-stock.component‚Äã.html" com as linhas abaixo:

                <h2>Create Stock Form</h2>

                <div class="form-group">
                    <form>
                        <div class="stock-name">
                            <input type="text"
                                    placeholder="Stock Name"
                                    [value]="stock.name"
                                    (input)="stock.name=$any($event.target).value">

                                    <!--    Poderiamos fazer desta forma tamb√©m 
                                            (input)="onInputName($event)"> 
                                    -->
                                    <!--                    
                                            onInputName(event: any) {
                                                this.stock.name = event.target.value;
                                            }
                                    -->
                        </div>
                    </form>
                    <button (click)="stock.name='test'">Reset stock name</button>
                </div>

                <h4>Stock Name is {{stock.name}}</h4>

            . Altere o conte√∫do do componente "app.component.html" com o conte√∫do abaixo:

                <app-create-stock></app-create-stock>

            . Execute o projeto e veja se o resultado saiu conforme o esperado

                ng s -o

            . Altere o componente "app.modules.ts" como abaixo:

                ...
                import { FormsModule } from '@angular/forms';       // Linha inserida

                @NgModule({
                    declarations: [
                        ...
                    ],
                    imports: [
                        ...,
                        FormsModule                                 // Linha inserida
                    ],
                    providers: [],
                    bootstrap: [AppComponent]
                })
                export class AppModule { }

            . Altere o componente "create-stock.component.html" como abaixo:

                <h2>Create Stock Form</h2>

                <div class="form-group">
                    <form>

                        <!-- Inclus√£o do atributo "name" √© a diretiva [(ngModel)] -->

                        <div class="stock-name">
                            <input type="text"
                                    placeholder="Stock Name"
                                    name="stockName"
                                    [(ngModel)]="stock.name">
                        </div>
                    </form>
                    <button (click)="stock.name='test'">Reset stock name</button>
                </div>

                <h4>Stock Name is {{stock.name}}</h4>

            . Execute o projeto e veja se o resultado saiu conforme o esperado

                ng s -o


        . ngModelChange

            . √â um evento do Angular que √© disparado quando o valor de um campo de formul√°rio √© alterado. Ele √© utilizado em 
                conjunto com a diretiva ngModel para criar uma liga√ß√£o bidirecional entre o campo de formul√°rio e o modelo de dados.

                <!-- HTML -->
                <input type="text" [ngModel]="nome" (ngModelChange)="onNomeChange($event)">

                // Typescript
                onNomeChange(event: any) {
                    console.log('Nome alterado:', event);
                    this.nome = event;
                }

        . ngSubmit

            . √â um evento do Angular que √© disparado quando um formul√°rio √© submetido.

                <!-- HTML -->
                <form (ngSubmit)="onSubmit()">
                    <input type="text" name="nome">
                    <input type="text" name="sobrenome">
                    <button type="submit">Enviar</button>
                </form>


                // Typescript
                @Component({
                    selector: 'app-exemplo',
                    templateUrl: './exemplo.component.html',
                    styleUrls: ['./exemplo.component.css']
                })

                export class ExemploComponent {
                    onSubmit() {
                        console.log('Formul√°rio submetido');
                        // Processar os dados do formul√°rio
                    }
                }

        . Demo - ngModelChange e ngSubmit

            . Altere o model "stock.ts" com o abaixo:

                export class Stock {
                    favorite = false;

                    constructor(public name: string,
                        public code: string,
                        public price: number,
                        public previousPrice: number,
                        public exchange: string) {}             // Par√¢metro incluido

                    isPositiveChange(): boolean {
                        return this.price >= this.previousPrice;
                    }
                }



            . Altere o componente "create-stock.component.ts" conforme abaixo:

                import { Component, OnInit } from '@angular/core';
                import { Stock } from 'app/model/stock';

                @Component({
                    selector: 'app-create-stock',
                    templateUrl: './create-stock.component.html',
                    styleUrls: ['./create-stock.component.css']
                })

                export class CreateStockComponent {
                    public stock: Stock;
                    public confirmed = false;                                   // Linha inserida

                    constructor() {
                        this.stock = new Stock('test', '', 0, 0, 'NASDAQ');     // Linha alterada
                    } 
                    
                    setStockPrice(price: any) {                                      // M√©todo criado
                        this.stock.price = price;
                        this.stock.previousPrice = price;
                    } 
                    
                    createStock() {                                             // M√©todo criado
                        console.log('Creating stock ', this.stock);
                    }
                }

            . Altere todo conte√∫do do coomponente "create-stock.component.html" com o conte√∫do abaixo:

                <h2>Create Stock Form</h2>
                <div class="form-group">
                    <form (ngSubmit)="createStock()">
                        <div class="row">
                            <div class="col-4">
                                <label for="stockName">Stock Name</label>
                                <input type="text"
                                        placeholder="Stock Name"
                                        name="stockName"
                                        id="stockName"
                                        class="form-control form-control-sm"
                                        [(ngModel)]="stock.name">
                            </div>
                            <div class="col-4">
                                <label for="stockCode">Stock Code</label>
                                <input type="text"
                                            placeholder="Stock Code"
                                            name="stockCode"
                                            id="stockCode"
                                            class="form-control form-control-sm"
                                            [(ngModel)]="stock.code">
                            </div>
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="stockPrice">Stock Price</label>
                                    <input type="number"
                                    placeholder="Stock Price"
                                    name="stockPrice"
                                    id="stockPrice"
                                    class="form-control form-control-sm"
                                    [ngModel]="stock.price"
                                    (ngModelChange)="setStockPrice($event)">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 mt-2">
                                <div class="form-group">
                                    <label for="stockExchange">Stock Change:&nbsp;&nbsp;</label>
                                    <input type="radio"
                                        name="stockExchange"
                                        class="form-check-input"
                                        [(ngModel)]="stock.exchange"
                                        value="NYSE">NYSE
                                    <input type="radio"
                                        name="stockExchange"
                                        class="form-check-input"
                                        [(ngModel)]="stock.exchange"
                                        value="NASDAQ">NASDAQ
                                    <input type="radio"
                                        name="stockExchange"
                                        class="form-check-input"
                                        [(ngModel)]="stock.exchange"
                                        value="OTHER">OTHER
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 mt-2">
                                <input type="checkbox"
                                    name="stockConfirm"
                                    class="form-check-input"
                                    [(ngModel)]="confirmed">
                                    I confirm that the information provided above is accurate!
                            </div>
                        </div>

                        <div class="row" style="padding: 10px;">
                            <div class="col-2">
                                <button [disabled]="!confirmed" class="btn btn-primary" type="submit">Create</button>
                            </div>
                        </div>

                    </form>
                </div>

                <h4>Stock Name is {{stock | json}}</h4>
                <br>
                <h4>confirmed is {{confirmed}}</h4>

            . Execute o projeto e verifique na console do navegador as informa√ß√µes:

                ng s -o

    . Diretivas 

        . Diretivas s√£o instru√ß√µes que passamos para os templates.

        . Existem 3 tipos de diretivas:

            Componente - que passamos para o template:

                <app-curso></app-curso>

            Estrutural - Podem ser anexadas a elementos DOM (e componentes, pois s√£o elementos DOM) para modificar a estrutura do DOM.

                <h2 *ngIf="logado">Ol√° {{nome}}</h2>

                <ul>
                    <li *ngFor="let item of itens">{{ item.nome }}</li>
                </ul>

            Atributo - Podem ser anexadas a elementos DOM (e componentes, pois s√£o elementos DOM) para modificar a apar√™ncia 
                        ou o comportamento de um elemento e n√£o altera a estrutura do DOM.

                <h2 [style.color]="'red'">{{nome}}</h2>

                <div [ngStyle]="{'background-color': 'red', 'color': 'white'}">...</div>

                <div [ngClass]="{'ativo': isAtivo, 'desabilitado': isDesabilitado}">
                    <p>Texto do componente</p>
                    <button (click)="toggleAtivo()">Toggle Ativo</button>
                    <button (click)="toggleDesabilitado()">Toggle Desabilitado</button>
                </div>

        . ngIf

            . √â uma diretiva do Angular que permite controlar a exibi√ß√£o de elementos HTML com base em uma condi√ß√£o.

            . Quando utilizamos a diretiva ngIf, podemos especificar uma express√£o que ser√° avaliada. Se a express√£o for 
                avaliada como verdadeira, o elemento HTML associado √† diretiva ser√° exibido. Se a express√£o for avaliada 
                como falsa, o elemento HTML n√£o ser√° exibido.

                <!-- HTML -->
                <div *ngIf="condicao">
                    Este elemento ser√° exibido se a condi√ß√£o for verdadeira.
                </div>

                // Typescript
                @Component({
                    selector: 'app-exemplo',
                    templateUrl: './exemplo.component.html',
                    styleUrls: ['./exemplo.component.css']
                })
    
                export class ExemploComponent {
                    condicao = true;
                }

        . Demo - ngIf

            . Altere o conte√∫do do arquivo "stock-item.component.html" com o conte√∫do abaixo:

                <div class="stock-container">
                    <div class="name">{{stock.name + ' (' + stock.code + ')'}}</div>
                    <div class="price" 
                            [class]="stock.isPositiveChange() ? 'positive' : 'negative'">
                        $ {{stock.price}}
                    </div>

                    <!-- Button Alterado -->
                    <button (click)="toggleFavorite($event)" 
                            *ngIf="!stock.favorite">
                        Add to Favorite
                    </button>
                </div>

            . Altere o conte√∫do do componente "app.component.html" pelo abaixo:

                <app-stock-item></app-stock-item>

            . Execute o projeto e verifique o resultado se ao clicar no bot√£o "Add to Favorite" ir√° desaparecer.

                ng s -o

        . ngFor

            . √â uma diretiva do Angular que permite iterar sobre uma cole√ß√£o de dados e exibir seus elementos em HTML.

                <!-- HTML -->
                <ul>
                    <li *ngFor="let item of itens">{{ item.nome }}</li>
                </ul>

                // Typescript
                @Component({
                  selector: 'app-exemplo',
                  templateUrl: './exemplo.component.html',
                  styleUrls: ['./exemplo.component.css']
                })
                export class ExemploComponent {
                  itens = [
                    { nome: 'Item 1' },
                    { nome: 'Item 2' },
                    { nome: 'Item 3' }
                  ];
                }

        . Demo - ngFor

            . Altere o componente "stock-item.component.ts" com o conte√∫do abaixo:

                import { Component, OnInit } from '@angular/core';
                import { Stock } from 'src/app/model/stock';

                @Component({
                    selector: 'app-stock-item',
                    templateUrl: './stock-item.component.html',
                    styleUrls: ['./stock-item.component.css']
                })
                export class StockItemComponent implements OnInit {
                    ...
                    public saved: boolean = false;    // Linha inserida

                    ngOnInit(): void {
                        // this.stock = new Stock('Test Stock Company', 'TSC', 85, 80, '');   // Linha eliminida

                        this.onInitStock();                                                     // Linha inserida

                        ...
                    }

                    // M√©todo inserido
                    onInitStock() {
                        this.stock = new Stock('', '', 0, 0, '');
                    }

                    ...

                    // M√©todo inserido
                    onSave() {
                        console.log('We are saving the stock', this.stock);
                        this.onInitStock();
                        this.saved=true;
                    }
                }

            . Atualize o componente "stock-item.component.html" com o conte√∫do abaixo:

                <h1>Welcome to stock-item</h1>

                <div class="container">
                    <div class="alert alert-success" role="alert" *ngIf="!saved">
                        Product Name : <strong> {{stock.name}} </strong>
                    </div>

                    <div class="row">
                        <div class="col-2">
                            <div class="form-group">
                                <label for="stockCode">Stock Code</label>
                                <input type="text" 
                                        class="form-control form-control-sm" 
                                        id="stockCode" name="stockCode" 
                                        [(ngModel)]="stock.code"
                                        (focus)="saved=false">
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-group">
                                <label for="stockName">Stock Name</label>
                                <input type="text" 
                                        class="form-control form-control-sm" 
                                        id="stockName" 
                                        name="stockName" 
                                        [(ngModel)]="stock.name">
                            </div>
                        </div>

                        <div class="col-2">
                            <div class="form-group">
                                <label for="stockPrice">Stock Price</label>
                                <input type="number" 
                                        class="form-control form-control-sm" 
                                        id="stockPrice" 
                                        name="stockPrice" 
                                        [(ngModel)]="stock.price">
                            </div>
                        </div>
                        <div class="col-2">
                            <div class="form-group">
                                <label for="stockPreviousPrice">Stock Previous Price</label>
                                <input type="number"
                                        class="form-control form-control-sm"
                                        id="stockPreviousPrice"
                                        name="stockPreviousPrice"
                                        [(ngModel)]="stock.previousPrice">
                            </div>
                        </div>

                        <div class="col-2">
                            <div class="form-group">
                                <label for="stockExchange">Stock Exchange</label>
                                <select class="form-select form-select-sm" 
                                        id="stockExchange" 
                                        name="stockExchange" 
                                        [(ngModel)]="stock.exchange">
                                    <option value="NYSE" selected>NYSE</option>
                                    <option value="NASDAQ">NASDAQ</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="row mt-2">
                        <div class="col-12">
                            <button type="button" 
                                    class="btn btn-primary" 
                                    (click)="onSave()"
                                    [disabled]="stock.name.length == 0 || stock.code.length == 0">
                                Salvar
                            </button>
                        </div>
                    </div>
                </div>

            . Execute o projeto e verifique atrav√©s da console do navegador se as informa√ß√µes est√£o chegando corretamente 
                no componente.

                ng s -o

            . Altere o componente "stock-item.component.ts" com o conte√∫do abaixo:

                import { Component, OnInit } from '@angular/core';
                import { Stock } from 'src/app/model/stock';

                @Component({
                    selector: 'app-stock-item',
                    templateUrl: './stock-item.component.html',
                    styleUrls: ['./stock-item.component.css']
                })
                export class StockItemComponent implements OnInit {
                    ...
                    public saved: boolean = false;    

                    // public productsStock: Stock[] = [];               
                    public productsStock: Array<Stock> = [];        // Linha inserida

                    ngOnInit(): void {
                        ...
                    }

                    onInitStock() {
                        ...
                    }

                    toggleFavorite(event: any, index: number) {     // Parametro incluido


                        console.log('We are toggling the favorite state for this stock event.target ', event.target);
                        console.log('We are toggling the favorite state for this stock event.target.value ', event.target.value);
                        console.log('We are toggling the favorite state for this stock index ', index);                             // Linha inserida
                        console.log('We are toggling the favorite state for this stock ', this.productsStock[index]);               // Linha inserida
                    }

                    onSave() {
                        console.log('We are saving the stock', this.stock);
                        this.productsStock.push(this.stock);                // Linha inserida
                        this.onInitStock();
                        this.saved=true;

                    }
                }

            . Insira o trecho abaixo no componente "stock-item.component.html"

                <div class="container">
                    <div class="alert alert-success" role="alert" *ngIf="!saved">
                        Product Name : <strong> {{stock.name}} </strong>
                    </div>

                    <div class="row">
                        ...
                    </div>

                    <div class="row mt-2">
                        ...
                    </div>

                    <!-- Div inserida -->
                    <div class="row" style="margin-top: 20px;" >
                        <div class="col-6" 
                            style="padding-top: 10px; padding-bottom: 10px; border: 1px solid black;"
                            *ngFor="let p of productsStock" >
                            <div class="row">
                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Code</p>
                                        <p class="fs-6">{{p.code}}</p>
                                    </div>
                                </div>
                                <div class="col-8">
                                    <div class="form-group">
                                        <p class="fw-bold">Name</p>
                                        <p class="fs-6">{{p.name}}</p>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Price</p>
                                        <p class="fs-6">{{p.price}}</p>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Previous Price</p>
                                        <p class="fs-6">{{p.previousPrice}}</p>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Exchange</p>
                                        <p class="fs-6">{{p.exchange}}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>

            . Execute o projeto e verifique atrav√©s da console do navegador se as informa√ß√µes est√£o chegando corretamente 
                no componente.

                ng s -o

            . Insira o trecho abaixo no componente "stock-item.component.html"

                <div class="container">
                    <div class="alert alert-success" role="alert" *ngIf="!saved">
                        Product Name : <strong> {{stock.name}} </strong>
                    </div>

                    <div class="row">
                        ...
                    </div>

                    <div class="row mt-2">
                        ...
                    </div>

                    <div class="row" style="margin-top: 20px;" >
                        <div class="col-6" 
                            style="padding-top: 10px; padding-bottom: 10px; border: 1px solid black;"
                            *ngFor="let p of productsStock; index as i" >                               <!-- Incluido "index as i" -->
                            <div class="row">
                                ...
                            </div>
                            <div class="row">
                                ...
                            </div>


                            <!-- Div inserido -->
                            <div class="row">
                                <div class="col-12">
                                    <button class="btn btn-primary" 
                                            (click)="toggleFavorite($event, i)" >
                                        Choice Item to See Values
                                    </button>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

            . Execute o projeto e verifique atrav√©s da console do navegador se as informa√ß√µes est√£o chegando corretamente 
                no componente.

                ng s -o

        . √â possivel utilizar ngFor e ngIf juntos:

            <div *ngFor="let stock of stocks">
                <div *ngIf="stock.active">
                    {{ stock.favorite }}
                </div>
            </div>



4. Modularizando projetos

    . A medida que a aplica√ß√£o for crescendo, o AppModule ficar√° muito grande. Neste
        caso seria interessante criar "features modules", ou modulos de funcionalidades
        para organizar melhor o nosso projeto.

        . Para criar um m√≥dulo de funcionalidade: acesse o terminal, acesse a pasta raiz do projeto e 
            digite o comando abaixo:

            ng g m [Nome do M√≥dulo]

            Exemplo:

                ng g m curso

            . Este comando criar√° uma pasta com o nome do m√≥dulo e um arquivo dentro dela com o nome [nome modulo].module.ts:

                import { NgModule } from '@angular/core';
                import { CommonModule } from '@angular/common';

                @NgModule({
                    imports: [
                        CommonModule
                    ],
                    declarations: []
                })
                export class CursoModule { }

                . A diferen√ßa entre o m√≥dulo de funcionalidade e o de raiz seria que: o de funcionalidade √© bem reduzido e somente
                    importa o "CommonModule".

    . Demo

        . Acesse a pasta raiz do projeto e digite o comando abaixo:

            # Ir√° criar a pasta "contabilidade" dentro da pasta "./src/app"
            ng g m contabilidade

            # Ir√° criar a pasta "ativo" dentro da pasta "./src/app/contabilidade"
            ng g c ./contabilidade/ativo --module=contabilidade

        . Acesse o ./src/app/contabilidade/contabilidade.module.ts e fa√ßa a declara√ß√£o do componente curso:

            import { NgModule } from '@angular/core';
            import { CommonModule } from '@angular/common';
            import { AtivoComponent } from './ativo/ativo.component';       // Observe que foi feito o import do componente

            @NgModule({
                imports: [
                    CommonModule
                ],
                declarations: [
                    AtivoComponent                                          // Observe que foi feito a declara√ß√£o do componente
                ],
                exports : [ 
                    AtivoComponent                                          // Insira o bloco "exports"
                ]
            })
            export class ContabilidadeModule { }

        . Acesse a classe src/app/app.module.ts, insira dentro do metadado "imports" o "ContabilidadeModule" e fa√ßa o import.

            ...
            import { ContabilidadeModule } from './contabilidade/contabilidade.module';     // Insira o import do module

            @NgModule({
                ...
                imports: [
                    BrowserModule,
                    ContabilidadeModule                                                     // Insira o import do module
                ],
                ...
            })
            export class AppModule { }

        . Acesse o arquivo src/app/app.component.html e inclua a tag abaixo:

            <app-ativo></app-ativo>

        . Execute o projeto e verifique se a modulariza√ß√£o deu certo:

            ng serve --open

        . Verifique se a p√°gina exibida saiu a mensagem do "Ativo"

5. Input e Output
-----------------

    . Input

        . Representado pelo decorator @Input

        . √â usado para passar dados de um componente pai para um componente filho. Ele permite que voc√™ defina uma 
            propriedade no componente filho que pode ser atualizada pelo componente pai.

            // componente-pai.component.ts
            import { Component } from '@angular/core';
            
            @Component({
              selector: 'app-componente-pai',
              template: `
                <app-componente-filho [nome]="nomePai"></app-componente-filho>
              `
            })
            export class ComponentePai {
              nomePai = 'Jo√£o';
            }


            // componente-filho.component.ts
            import { Component, Input } from '@angular/core';
            
            @Component({
              selector: 'app-componente-filho',
              template: `
                <p>Ol√°, meu nome √© {{ nome }}!</p>
              `
            })
            export class ComponenteFilho {
              @Input() nome: string;
            }

        . Algumas coisas importantes a saber sobre o @Input:

            . O @Input √© usado para passar dados de um componente pai para um componente filho.

            . A propriedade decorada com @Input deve ser p√∫blica.

            . O valor da propriedade pode ser atualizado pelo componente pai a qualquer momento.

            . O componente filho pode usar a propriedade decorada com @Input em sua template ou em seu c√≥digo TypeScript.

        . Tamb√©m √© poss√≠vel usar o @Input com alias, o que permite que voc√™ defina um nome diferente para a propriedade no 
            componente filho.

            // componente-pai.component.ts
            import { Component } from '@angular/core';
            
            @Component({
              selector: 'app-componente-pai',
              template: `
                <app-componente-filho [nomePai]="nomePai"></app-componente-filho>
              `
            })
            export class ComponentePai {
              nomePai = 'Jo√£o';
            }



            // componente-filho.component.ts
            import { Component, Input } from '@angular/core';
            
            @Component({
              selector: 'app-componente-filho',
              template: `
                <p>Ol√°, meu nome √© {{ nome }}!</p>
              `
            })
            export class ComponenteFilho {
              @Input('nomePai') nome: string;
            }     

        . Demo

            . Acesse a raiz do projeto e execute o comando abaixo no prompt do SO:

                ng g c stock/stock-card --skip-tests

            . Altere o componente "stock-card.component.ts" com o conte√∫do abaixo:

                import { Component, Input } from '@angular/core';
                import { Stock } from 'src/app/model/stock';        // Linha inserida

                @Component({
                    selector: 'app-stock-card',
                    templateUrl: './stock-card.component.html',
                    styleUrls: ['./stock-card.component.css']
                })
                export class StockCardComponent {

                    @Input()                                    // Linha inserida
                    public stockItem!: Stock;                       // Linha inserida
                }

            . C√≥pie o c√≥digo HTML abaixo para o arquivo src/app/stock-card/stock-card.component.html

                <div class="card">
                    <img src="https://randomuser.me/api/portraits/women/{{stockItem.code}}.jpg" 
                        class="card-img-top" 
                        style="width: 100%; height: auto;">
                    
                    <div class="card-body">
                        <h5 class="card-title">{{stockItem.name}}</h5>
                        <p class="card-text">
                            R$ {{stockItem.price}} <br>
                            {{ stockItem.exchange}} 
                        </p>
                    </div>
                </div>  

            . Altere o c√≥digo HTML abaixo no arquivo "stock-item.component.html":

                <div class="container">
                    <div class="alert alert-success" role="alert" *ngIf="!saved">
                        ...
                    </div> 

                    <div class="row">
                        ..
                    </div>

                    <div class="row mt-2">
                        ...
                    </div>

                    <div class="row" style="margin-top: 20px;" >
                        <!--                                        Trecho eliminado
                        <div class="col-6" 
                            style="padding-top: 10px; padding-bottom: 10px; border: 1px solid black;"
                            *ngFor="let p of productsStock; index as i" >           
                            <div class="row">
                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Code</p>
                                        <p class="fs-6">{{p.code}}</p>
                                    </div>
                                </div>
                                <div class="col-8">
                                    <div class="form-group">
                                        <p class="fw-bold">Name</p>
                                        <p class="fs-6">{{p.name}}</p>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Price</p>
                                        <p class="fs-6">{{p.price}}</p>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Previous Price</p>
                                        <p class="fs-6">{{p.previousPrice}}</p>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-group">
                                        <p class="fw-bold">Exchange</p>
                                        <p class="fs-6">{{p.exchange}}</p>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-12">
                                    <button class="btn btn-primary" 
                                            (click)="toggleFavorite($event, i)" >
                                        Choice Item to See Values
                                    </button>
                                </div>
                            </div>
                        </div>
                        -->

                        <!-- Trecho adicionado -->
                        <div class="col-2" 
                            style="padding-top: 10px; padding-bottom: 10px; "
                            *ngFor="let p of productsStock; index as i" >           
                            <app-stock-card [stockItem]="p"></app-stock-card>
                        </div>
                    </div>
                </div>

            . Execute o projeto e verifique se a modulariza√ß√£o deu certo:

                ng serve --open


    . Output

        . √â um decorador do Angular que permite que um componente emita eventos para os seus pais ou outros componentes. 
            Ele √© usado para criar uma comunica√ß√£o entre componentes, permitindo que um componente notifique outros 
            componentes sobre mudan√ßas ou a√ß√µes que ocorreram.

                // Componente filho
                import { Component, Output, EventEmitter } from '@angular/core';

                @Component({
                    selector: 'app-filho',
                    template: `
                        <select (change)="emitirEvento($event)">    <!-- 1 -->
                        <option value="opcao1">Op√ß√£o 1</option>
                        <option value="opcao2">Op√ß√£o 2</option>
                        <option value="opcao3">Op√ß√£o 3</option>
                        </select>
                    `
                })
                export class FilhoComponent {
                    @Output() eventoEmitido = new EventEmitter();

                    emitirEvento(valor: any) {
                        this.eventoEmitido.emit(valor.target.value);    // 1
                        console.log(valor);
                        
                    }
                }


                // Componente pai
                import { Component } from '@angular/core';

                @Component({
                    selector: 'app-pai',
                    template: `
                        <app-filho (eventoEmitido)="tratarEvento($event)"></app-filho>
                    `
                })
                export class PaiComponent {
                    tratarEvento(evento: string) {
                        console.log(evento);
                    }
                }


            . Quando o m√©todo this.eventoEmitido.emit(valor); √© executado, o seguinte fluxo de eventos ocorre:

                1. Emiss√£o do evento: O m√©todo emit() √© chamado no objeto eventoEmitido, que √© uma inst√¢ncia de EventEmitter. 
                    Isso faz com que o evento seja emitido para os ouvintes registrados.
                
                2. Notifica√ß√£o dos ouvintes: O EventEmitter notifica todos os ouvintes registrados que o evento foi emitido. 
                    Nesse caso, o ouvinte √© o componente pai que tem um m√©todo tratarEvento() que foi registrado para ouvir o evento.
                
                3. Chamada do m√©todo de tratamento: O m√©todo tratarEvento() √© chamado no componente pai, passando o valor 
                    do evento como par√¢metro. Nesse caso, o valor do evento √© o valor que foi passado como par√¢metro para o m√©todo emit().
                
                4. Execu√ß√£o do m√©todo de tratamento: O m√©todo tratarEvento() √© executado no componente pai, processando o 
                    valor do evento e realizando as a√ß√µes necess√°rias.

                +------------------+
                |  FilhoComponent  |
                +------------------+
                       |
                       |  emitirEvento()
                       |  this.eventoEmitido.emit(valor)
                       |
                       v
                +----------------+
                |  EventEmitter  |
                +----------------+
                       |
                       |  notificar ouvintes
                       |
                       v
                +----------------+
                |  PaiComponent  |
                +----------------+
                       |
                       |  tratarEvento()
                       |  processar valor do evento
                       |
                       v
                +---------------+
                |  Resultado    |
                +---------------+


        . Demo

            . Altere o conte√∫do do arquivo "create-stock.component.ts" com o conte√∫do abaixo:

                import { Component, EventEmitter, Output } from '@angular/core';      // Linha alterada
                import { Stock } from 'src/app/model/stock';

                @Component({
                    selector: 'app-create-stock',
                    templateUrl: './create-stock.component.html',
                    styleUrls: ['./create-stock.component.css']
                })
                export class CreateStockComponent {
                    public stock: Stock;                                    
                    public confirmed = false;                                   

                    @Output()                                                // Linha inserida
                    public eventoEmitido = new EventEmitter<Stock>();

                    constructor() {                                         
                        this.stock = new Stock('test', '', 0, 0, 'NASDAQ');     

                    }

                    onSubmit() {
                        console.log(this.stock.name);
                    }

                    onChangeName(event: any) {
                        this.stock.name = event.target.value;
                    }
                    setStockPrice(price: any) {                                      
                        this.stock.price = price;
                        this.stock.previousPrice = price;
                    }

                    createStock() {                                             
                        console.log('Creating stock ', this.stock);
                    }

                    emitirEvento(valor: any) {                          // M√©todo adicionado
                        this.eventoEmitido.emit(valor);    
                        console.log(valor);
                        this.stock = new Stock('test', '', 0, 0, 'NASDAQ');     
                    }


                }

            . Altere o conte√∫do do arquivo "create-stock.component.html" conforme abaixo:

                <h2>Create Stock Form</h2>
                <div class="form-group">
                    <!--                                         Linha alterada
                    <form (ngSubmit)="createStock()">
                    -->
                    <form>                                  <!-- Linha alterada -->
                        <div class="stock-name">
                            <input type="text" 
                                    placeholder="Stock Name"
                                    name="stockName" 
                                    [(ngModel)]="stock.name">
                        </div>

                        <div class="stock-code">
                            <input type="text" 
                                    placeholder="Stock Code"
                                    name="stockCode" 
                                    [(ngModel)]="stock.code">
                        </div>

                        <div class="stock-code">
                            <input type="number" 
                                    placeholder="Stock Price"
                                    name="stockPrice" 
                                    [ngModel]="stock.price"
                                    (ngModelChange)="setStockPrice($event)">
                        </div>

                        <div class="stock-exchange">
                            <div>
                                <input type="radio" 
                                        name="stockExchange"
                                        [(ngModel)]="stock.exchange" 
                                        value="NYSE">NYSE
                            </div>
                            
                            <div>
                                <input type="radio" 
                                        name="stockExchange"
                                        [(ngModel)]="stock.exchange" 
                                        value="NASDAQ">NASDAQ
                            </div>

                            <div>
                                <input type="radio" 
                                        name="stockExchange"
                                        [(ngModel)]="stock.exchange" 
                                        value="OTHER">OTHER
                            </div>
                        </div>
                        <div class="stock-confirm">
                            <input type="checkbox" 
                                    name="stockConfirm"
                                    [(ngModel)]="confirmed">
                            I confirm that the information provided above is accurate!
                        </div>

                        <!-- Tag alterada - alterado o m√©todo (click) -->

                        <!-- Tag alterada - alterado o m√©todo (click) -->
                        <div class="row" style="padding: 10px;">
                            <div class="col-2">
                                <button [disabled]="!confirmed" 
                                        (click)="emitirEvento(stock)"
                                        class="btn btn-primary" 
                                        type="submit">
                                    Create
                                </button>
                            </div>
                        </div>
                    </form>
                </div>

                <h4>Stock Name is {{stock | json }}</h4>
                <br>
                <h4>confirmed is {{confirmed}}</h4>

            . Altere o componente "app.component.html" com o conte√∫do abaixo:

                <app-create-stock></app-create-stock>

            . Execute o projeto e verifique se o model "stock" est√° chegando com sucesso no objeto "create-stock.component.ts" na
                console do navegador:

                ng serve --open

            . Execute o comando abaixo na pasta raiz do projeto:

                ng g c stock/create-stock-item --skip-tests

            . Altere o conte√∫do do componente "create-stock-item.component.ts" conforme abaixo:

                import { Component } from '@angular/core';
                import { Stock } from 'src/app/model/stock';

                @Component({
                    selector: 'app-create-stock-item',
                    templateUrl: './create-stock-item.component.html',
                    styleUrls: ['./create-stock-item.component.css']
                })

                export class CreateStockItemComponent  {
                    public stocksItem: Array<Stock> = [];

                    onSave(stock: Stock) {
                        console.log('We are saving the stock', stock);
                        this.stocksItem.push(stock);
                    }
                }

            . Altere o conte√∫do do arquivo "create-stock-item.component.html" com o conte√∫do abaixo:

                <app-create-stock (eventoEmitido)="onSave($event)"></app-create-stock>

            . Altere o conte√∫do do componente "app.component.ts" pelo conte√∫do abaixo:

                <app-create-stock-item></app-create-stock-item>

            . Execute o projeto e verifique se o model "stock" est√° chegando com sucesso no objeto "create-stock-item.component.ts":

                ng serve --open

6. Ciclo de vida dos componentes do Angular
-------------------------------------------

    . O Angular primeiro chamar√° o construtor para qualquer componente e, em seguida, as
        v√°rias etapas mencionadas anteriormente em ordem. Algumas delas, como OnInit
        e AfterContentInit (basicamente, qualquer m√©todo/evento do ciclo de vida terminando com Init)
        s√£o chamadas apenas uma vez, quando um componente √© inicializado, enquanto as outras s√£o
        chamadas sempre que qualquer conte√∫do muda. O m√©todo OnDestroy tamb√©m √© chamado
        apenas uma vez para um componente.

    . Cada uma dessas etapas do ciclo de vida vem com uma interface que deve ser
        implementada quando um componente se importa com aquele ciclo de vida espec√≠fico, e
        cada interface fornece uma fun√ß√£o come√ßando com ng que precisa ser
        implementada. 
        
        . Por exemplo, a etapa do ciclo de vida OnInit precisa de uma fun√ß√£o
            chamada ngOnInit para ser implementada no componente e assim por diante.

    . √â um conjunto de m√©todos que s√£o chamados em diferentes est√°gios do ciclo de vida de um componente, conhecidas como "Hook". 
        Aqui est√° uma vis√£o geral dos principais Hooks/m√©todos do ciclo de vida:

        . ngOnChanges: Chamado quando as propriedades de entrada do componente s√£o atualizadas.

        . ngOnInit: Chamado ap√≥s a inicializa√ß√£o do componente, quando as propriedades de entrada est√£o dispon√≠veis.

        . ngDoCheck: Chamado ap√≥s a inicializa√ß√£o do componente e ap√≥s cada atualiza√ß√£o das propriedades de entrada.

        . ngAfterContentInit: Chamado ap√≥s a inicializa√ß√£o do conte√∫do do componente.

        . ngAfterViewInit: Chamado ap√≥s a inicializa√ß√£o da view do componente.

        . ngAfterViewChecked: Chamado ap√≥s a verifica√ß√£o da view do componente.

        . ngOnDestroy: Chamado antes da destrui√ß√£o do componente.

    . Representa√ß√£o visual da sequ√™ncia de execu√ß√£o

        +---------------+
        |  Constructor  |
        +---------------+
            |
            |
            v
        +---------------+
        |  ngOnChanges  |
        +---------------+
            |
            |
            v
        +---------------+
        |  ngOnInit     |
        +---------------+
            |
            |
            v
        +---------------+
        |  ngDoCheck    |
        +---------------+
            |
            |
            v
        +--------------------+
        | ngAfterContentInit |
        +--------------------+
            |
            |
            v
        +------------------+
        | ngAfterViewInit  |
        +------------------+
            |
            |
            v
        +--------------------+
        | ngAfterViewChecked |
        +--------------------+
            |
            |
            v
        +---------------+
        |  ngOnDestroy  |
        +---------------+

    . Demo - Ciclo de vida dos componentes do Angular

        . Implemente todo o conte√∫do do componente  "app.component.ts" pelo abaixo:

            import {
                Component, SimpleChanges, OnInit, OnChanges, OnDestroy,
                DoCheck, AfterViewChecked, AfterViewInit,
                AfterContentChecked,
                AfterContentInit
            } from '@angular/core';                                 

            import { Stock } from './model/stock';

            @Component({
                selector: 'app-root',
                templateUrl: './app.component.html',
                styleUrls: ['./app.component.css']
            })

            export class AppComponent implements OnInit, OnChanges, OnDestroy,
                DoCheck, AfterContentChecked,
                AfterContentInit,
                AfterViewChecked,
                AfterViewInit {

                title = 'app works!';
                public stock!: Stock;

                onToggleFavorite(stock: Stock) {
                    console.log('Favorite for stock ', stock, ' was triggered');
                    this.stock.favorite = !this.stock.favorite;
                }
                ngOnInit(): void {
                    this.stock = new Stock('Test Stock Company', 'TSC', 85, 80, '');
                    console.log('App Component - On Init');
                } 
                
                ngAfterViewInit(): void {
                    console.log('App Component - After View Init');
                } 
                
                ngAfterViewChecked(): void {
                    console.log('App Component - After View Checked');
                } 
                
                ngAfterContentInit(): void {
                    console.log('App Component - After Content Init');
                } 
                
                ngAfterContentChecked(): void {
                    console.log('App Component - After Content Checked');
                } 
                
                ngDoCheck(): void {
                    console.log('App Component - Do Check');
                } 
                
                ngOnDestroy(): void {
                    console.log('App Component - On Destroy');
                } 
                
                ngOnChanges(changes: SimpleChanges): void {
                    console.log('App Component - On Changes - ', changes);
                }
            }

        . Execute o projeto e vejo o log de execu√ß√£o na console do navegador:

            ng s -o

7. Mec√¢nismos para se trabalhar com formul√°rios no Angular
----------------------------------------------------------

    . Existem dois mecanismos principais para trabalhar com formul√°rios no Angular: Template-Driven Forms e Reactive Forms.

        . Template-Driven Forms

            . Nesse mecanismo, os formul√°rios s√£o criados usando diretivas no template HTML. As diretivas s√£o usadas para vincular os 
                campos do formul√°rio a propriedades do componente.

            . Vantagens:

                . F√°cil de usar e entender

                . N√£o requer conhecimento de Observables ou RxJS

                . Pode ser usado com valida√ß√£o de formul√°rio


            . Desvantagens:

                . N√£o √© t√£o flex√≠vel quanto os Reactive Forms

                . N√£o √© poss√≠vel usar valida√ß√£o de formul√°rio personalizada

                . N√£o √© poss√≠vel usar formul√°rios aninhados

            . Exemplo

                <!-- HTML -->
                <form #form="ngForm" (ngSubmit)="submitForm(form)">
                    <div>
                        <label for="nome">Nome:</label>
                        <input  type="text" 
                                id="nome" 
                                name="nome" 
                                [(ngModel)]="usuario.nome" 
                                required 
                                minlength="3" 
                                maxlength="50">

                        <div *ngIf="form.controls.nome?.invalid && (form.controls.nome?.dirty || form.controls.nome?.touched)">
                            <div *ngIf="form.controls.nome?.errors?.required">
                                O nome √© obrigat√≥rio.
                            </div>
                            <div *ngIf="form.controls.nome?.errors?.minlength">
                                O nome deve ter pelo menos 3 caracteres.
                            </div>
                            <div *ngIf="form.controls.nome?.errors?.maxlength">
                                O nome deve ter no m√°ximo 50 caracteres.
                            </div>
                        </div>
                    </div>

                    <div>
                        <label for="email">E-mail:</label>
                        <input  type="email" 
                                id="email" 
                                name="email" 
                                [(ngModel)]="usuario.email" 
                                required 
                                email>
                        <div *ngIf="form.controls.email?.invalid && (form.controls.email?.dirty || form.controls.email?.touched)">
                            <div *ngIf="form.controls.email?.errors?.required">
                                O e-mail √© obrigat√≥rio.
                            </div>
                            <div *ngIf="form.controls.email?.errors?.email">
                                O e-mail deve ser v√°lido.
                            </div>
                        </div>
                    </div>
                    
                    <button type="submit" [disabled]="!form.valid">Enviar</button>
                </form>



                // Typescript
                import { Component } from '@angular/core';
                
                @Component({
                selector: 'app-exemplo',
                templateUrl: './componente.html'
                })
                export class ExemploComponent {
                usuario = {
                    nome: '',
                    email: ''
                };
                
                submitForm(form: any) {
                    if (form.valid) {
                    console.log('Formul√°rio v√°lido:', form.value);
                    } else {
                    console.log('Formul√°rio inv√°lido:', form.value);
                    }
                }
                }

        . Reactive Forms

            . Nesse mecanismo, os formul√°rios s√£o criados usando classes e m√©todos no componente. As classes s√£o usadas para criar formul√°rios reativos que podem ser manipulados programaticamente.

            . Vantagens:

                . Mais flex√≠vel do que os Template-Driven Forms

                . Permite valida√ß√£o de formul√°rio personalizada

                . Permite formul√°rios aninhados

                . Pode ser usado com Observables e RxJS


            . Desvantagens:

                . Mais complexo do que os Template-Driven Forms

                . Requer conhecimento de Observables e RxJS

                . Pode ser mais dif√≠cil de usar para desenvolvedores iniciantes

            . Exemplo

                import { FormGroup, FormControl, Validators } from '@angular/forms';

                @Component({
                    selector: 'app-exemplo',
                    template: `
                        <form [formGroup]="form">
                            <input type="text" formControlName="nome">
                            <input type="email" formControlName="email">
                            <button type="submit">Enviar</button>
                        </form>
                    `
                })

                export class ExemploComponent {
                    form = new FormGroup({
                        nome: new FormControl('', Validators.required),
                        email: new FormControl('', Validators.email)
                    });
                }

    . Template-Driven Forms

        . Diretiva "ngForm"

            . √â uma diretiva do Angular que √© usada para criar um formul√°rio que pode ser validado e enviado. Ela √© parte 
                do m√≥dulo FormsModule do Angular.

            . Quando voc√™ usa a diretiva ngForm em um formul√°rio, o Angular cria um objeto FormGroup que representa o 
                formul√°rio e seus campos. Esse objeto pode ser usado para validar o formul√°rio e enviar os dados p
                ara o servidor.

            . Gerenciamento de Formul√°rio**: A diretiva `ngForm` atua como um controlador para o formul√°rio, permitindo que 
                o Angular rastreie o estado dos campos, como se eles est√£o v√°lidos ou inv√°lidos, sujos ou limpos, e se foram 
                tocados ou n√£o. Isso √© essencial para a valida√ß√£o e manipula√ß√£o dos dados do formul√°rio.

            . Refer√™ncia ao Formul√°rio**: Quando voc√™ usa `ngForm` em um elemento `<form>`, pode criar uma refer√™ncia local a 
                ele usando a sintaxe `#nomeDaVariavel="ngForm"`. Isso permite acessar propriedades do formul√°rio diretamente 
                no template, como `valid`, `invalid`, `dirty`, e `pristine`.

            . Submiss√£o de Formul√°rio**: A diretiva facilita a submiss√£o do formul√°rio atrav√©s do evento `(ngSubmit)`, que √© 
                disparado quando o formul√°rio √© enviado. Voc√™ pode vincular esse evento a um m√©todo no seu componente para 
                processar os dados do formul√°rio.

            . A diretiva faz parte da biblioteca "FormsModule", portanto √© preciso importa-la no m√≥dulo do formul√°rio que
                pretendemos utilizar a diretiva "NgForm". Vide ponto abaixo como fazer:

            . Exemplo

                // *.component.html
                <form #form="ngForm" (ngSubmit)="onSubmit()" >
                    <input type="text"
                            name="cpfCnpj"
                            [(ngModel)]="cpfCnpj"
                            [required]="true"
                            placeholder="Informe o CPF do cliente">
                    <br>
                    <input type="text"
                            name="nome"
                            [(ngModel)]="nome"
                            [required]="true"
                            placeholder="Informe o nome do cliente">
                    <br>
                    <button type="submit" [disabled]="!form.valid">Enviar</button>
                    <!-- <button type="submit" >Enviar</button> -->
                </form>

                // *.component.ts
                import { Component } from '@angular/core';

                @Component({
                    selector: 'app-acordo',
                    templateUrl: './acordo.component.html',
                    styleUrls: ['./acordo.component.scss']
                })
                export class AcordoComponent {
                    cpfCnpj = '';
                    nome = '';

                    onSubmit() {
                        console.log(this.cpfCnpj);
                        console.log(this.nome);
                    }
                }

                // *.modules.ts
                ...
                import { FormsModule } from '@angular/forms';   // Declara√ß√£o do FormsModule

                @NgModule({
                    ...
                    imports: [
                        FormsModule                             // Importa√ß√£o do FormsModule
                    ],
                    ...
                })
                export class FinanceiroModule { }

        . Diretiva "ngModel"

            . Integra√ß√£o com ngModel**: A diretiva `ngForm` trabalha em conjunto com a diretiva `ngModel`, que √© utilizada 
                para criar controles de entrada vinculados ao modelo de dados. Cada campo de entrada que utiliza `ngModel` 
                ser√° automaticamente registrado no controlador de formul√°rio gerenciado pelo `ngForm`, permitindo que os 
                dados sejam coletados e validados facilmente.

            . A diretiva "ngModel" faz parte da biblioteca "FormsModule", portanto √© preciso importa-la no m√≥dulo do formul√°rio que
                pretendemos utilizar a diretiva. 
                
            . A diretiva "ngModel" ir√° configurar o estado do objeto, dizendo se ele est√° v√°lido, ou inv√°lido, de acordo com suas
                valida√ß√µes (required, minlength, range, etc.)

                . Aqui est√£o algumas das propriedades dos elementos do formul√°rio (inputs) que s√£o usadas para valida√ß√£o:

                    . valid: indica se o campo de formul√°rio √© v√°lido ou n√£o.

                    . invalid: indica se o campo de formul√°rio √© inv√°lido ou n√£o.

                    . dirty: indica se o campo de formul√°rio foi modificado pelo usu√°rio ou n√£o.

                    . touched: indica se o campo de formul√°rio foi tocado pelo usu√°rio ou n√£o.

                    . errors: retorna um objeto com as mensagens de erro para o campo de formul√°rio.

                    . pristine: retorna se o usu√°rio n√£o fez nenhuma altera√ß√£o no valor do campo desde que o formul√°rio foi carregado.

            . Sempre que utilizarmos a diretiva "ngModel" precisamos ter identificar o elemento com o atributo "name=...".

            . Exemplo

                // *.component.html
                <form #form="ngForm" (ngSubmit)="onSubmit()" >
                    <input type="text"
                            name="cpfCnpj"
                            ngModel
                            [(ngModel)]="cpfCnpj"
                            [required]="true"
                            placeholder="Informe o CPF do cliente">
                    <br>
                    <input type="text"
                            name="nome"
                            ngModel
                            [(ngModel)]="nome"
                            [required]="true"
                            ngModel
                            placeholder="Informe o nome do cliente">
                    <br>
                    <button type="submit" [disabled]="!form.valid">Enviar</button>
                    <!-- <button type="submit" >Enviar</button> -->
                </form>



        . Vari√°veis de refer√™ncia 
        
            . S√£o usadas para vincular um elemento do template a uma vari√°vel no componente. Isso permite que voc√™ acesse o 
                elemento do template no componente e fa√ßa opera√ß√µes com ele.

            . As vari√°veis de refer√™ncia s√£o definidas no template usando o s√≠mbolo # seguido do nome da vari√°vel. Por exemplo:

                <input #nome type="text">

            . A vari√°vel de refer√™ncia nome √© definida e vinculada ao elemento input do tipo text.

                . No componente, voc√™ pode acessar a vari√°vel de refer√™ncia usando o nome da vari√°vel. Por exemplo:

                    import { Component } from '@angular/core';

                    @Component({
                        selector: 'app-example',
                        template: `
                                <input #nome type="text">
                                <button (click)="mostrarValor(nome.value)">Mostrar valor</button>
                            `
                    })
                    export class ExampleComponent {
                        mostrarValor(valor: string) {
                            console.log(valor);
                        }
                    }

        . Demo "Template-Driven Forms"

            . Altere o componente "stock-item.component.html" com o conte√∫do abaixo:

                <h1>Welcome to stock-item</h1>

                <div class="container">
                    <div class="alert alert-success" role="alert" *ngIf="!saved">
                        Product Name : <strong> {{stock.name}} </strong>
                    </div>

                    <!-- Tag <form. inserida -->

                    <form #stockForm="ngForm" (ngSubmit)="onSave()">
                        <div class="row">
                            <div class="col-2">
                                <div class="form-group">
                                    <label for="stockCode">Stock Code</label>

                                    <!-- Atribute [required] inserido -->
                                    <input type="text"
                                            class="form-control form-control-sm"
                                            id="stockCode" name="stockCode"
                                            [required]="true"
                                            [(ngModel)]="stock.code"
                                            (focus)="saved=false">
                                </div>
                            </div>

                            <div class="col-4">
                                <div class="form-group">
                                    <label for="stockName">Stock Name</label>

                                    <!-- Atribute [required] inserido -->
                                    <input type="text"
                                            class="form-control form-control-sm"
                                            id="stockName"
                                            name="stockName"
                                            required 
                                            minlength="3" 
                                            maxlength="15"
                                            [(ngModel)]="stock.name">
                                </div>
                            </div>

                            <!-- Atribute [required, min ] inserido -->
                            <div class="col-2">
                                <div class="form-group">
                                    <label for="stockPrice">Stock Price</label>
                                    <input type="number"
                                            class="form-control form-control-sm"
                                            id="stockPrice"
                                            name="stockPrice"
                                            min="1"
                                            required
                                            [(ngModel)]="stock.price">
                                </div>
                            </div>

                            <!-- Atribute [required, min ] inserido -->
                            <div class="col-2">
                                <div class="form-group">
                                    <label for="stockPreviousPrice">Stock Previous Price</label>
                                    <input type="number"
                                            class="form-control form-control-sm"
                                            id="stockPreviousPrice"
                                            name="stockPreviousPrice"
                                            min="1"
                                            required
                                            [(ngModel)]="stock.previousPrice">
                                </div>
                            </div>

                            <div class="col-2">
                                <div class="form-group">
                                    <label for="stockExchange">Stock Exchange</label>
                                    <select class="form-select form-select-sm" 
                                        id="stockExchange" 
                                        name="stockExchange"
                                        [required]="true"
                                        [(ngModel)]="stock.exchange">
                                        <option value="NYSE" selected>NYSE</option>
                                        <option value="NASDAQ">NASDAQ</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="col-12">

                                <!-- Tag button eliminado -->
                                <!--
                                <button type="button" class="btn btn-primary" (click)="onSave()"
                                    [disabled]="stock.name.length == 0 || stock.code.length == 0">
                                -->

                                <!-- Tag button submit inserida -->
                                <button type="submit"
                                        class="btn btn-primary"
                                        [disabled]="stockForm.invalid">
                                    Salvar
                                </button>
                            </div>
                        </div>

                        <div class="row" style="margin-top: 20px;">
                            <div class="col-2" style="padding-top: 10px; padding-bottom: 10px; "
                                *ngFor="let p of productsStock; index as i">
                                <app-stock-card [stockItem]="p"></app-stock-card>
                            </div>
                        </div>
                    </form>
                </div>

            . Inseri a tag abaixo no componente "app.component.ts"

                <app-stock-item></app-stock-item>

            . Execute a aplica√ß√£o e verifique se o bot√£o ficar√° habilitado caso as valida√ß√µes dos campos sejam atendidas:

                ng s -o

        . Valida√ß√£o de Formul√°rios:

            . Recordando, abaixo a rela√ß√£o de valida√ß√µes permitidas no HTML:

                Regra	            Valida√ß√£o
                ------              ---------
                email	            Se definido como true, o campo s√≥ aceitar√° e-mails v√°lidos;
                required	        Se definido como true, o campo √© de preenchimento obrigat√≥rio;
                min	                Define um n√∫mero ou valor m√≠nimo v√°lido. Por exemplo, se definimos como 4, o usu√°rio s√≥ poder√° 
                                    informar um n√∫mero maior igual a 4. Abaixo disso a informa√ß√£o √© inv√°lida;
                max	                Define um n√∫mero ou valor m√°ximo v√°lido. Por exemplo, se definimos como 10, o usu√°rio s√≥ poder√° 
                                    informar um n√∫mero que seja menor ou igual a 10. Acima disso a informa√ß√£o √© inv√°lida;
                range	            Determina um intervalo, contendo um valor m√≠nimo e m√°ximo v√°lido. Por exemplo, se definirmos 
                                    como [10, 20], o usu√°rio s√≥ poder√° informar um n√∫mero que seja maior ou igual a 10 e menor ou 
                                    igual a 20;
                minlength	        Determina uma quantidade m√≠nima de caracteres. Por exemplo, se definirmos como 10, o usu√°rio s√≥ 
                                    poder√° informar um valor com no m√≠nimo 10 caracteres. Abaixo disso a informa√ß√£o √© inv√°lida;
                maxlength	        Define uma quantidade m√°xima de caracteres. Por exemplo, se definirmos como 5, o usu√°rio s√≥ 
                                    poder√° informar um valor com no m√°ximo 5 caracteres. Acima disso a informa√ß√£o √© inv√°lida;
                rangelength	        Define um intervalo, contendo uma quantidade m√≠nima e m√°xima de caracteres v√°lidos. Por exemplo, 
                                    se definirmos como [2, 6], o usu√°rio s√≥ poder√° informar um valor com nom√≠nimo 2 e no m√°ximo 6 
                                    caracteres;
                url	                Se definido como true, o campo s√≥ aceitar√° URLs v√°lidas;
                date	            Se definido como true, o campo s√≥ aceitar√° datas v√°lidas;
                dateISO	            Caso definido como true, o input s√≥ aceitar√° datas no formato ISO;
                number	            Caso definido como true, o input s√≥ aceitar√° n√∫meros inteiros ou decimais;
                digits	            Caso definido como true, o input s√≥ permitir√° d√≠gitos;
                creditcard	        Se definido como true, o input s√≥ permitir√° n√∫mero de cart√£o de cr√©dito v√°lido;
                remote	            Caso defina uma URL de verifica√ß√£o, por exemplo ‚Äúverificar_se_existe_cpf.php‚Äù. Ent√£o o Validation 
                                    realiza uma verifica√ß√£o remota com a url e com o valor informado no campo, assim, se a resposta para 
                                    a requisi√ß√£o de valida√ß√£o for false, ent√£o o Validation entende que a informa√ß√£o no campo n√£o √© v√°lida, 
                                    agora caso a resposta for true ent√£o a informa√ß√£o √© v√°lida. Por exemplo: verificar se o CFP j√° existe 
                                    na aplica√ß√£o;
                equalTo	            Verifica se o valor dois campos s√£o iguais. Por exemplo: Verificar se as senhas s√£o iguais, no cen√°rio 
                                    de inserir uma senha e repetir a senha novamente.
                accept	            Esta regra √© utilizada para o campo ‚Äúinput= file‚Äù para upload de arquivo, onde podemos definir quais 
                                    mime-types s√£o permitidos. Por exemplo, se definimos esta regra com o valor ‚Äúaudio/*‚Äù, ent√£o estamos 
                                    dizendo ao Validation que s√≥ √© permitido apenas arquivos de √°udio;
                extension	        Nesta regra podemos definir uma certa extens√£o de arquivo que poder√° ser aceito;
                phoneUs	            Se definido como true, o campo s√≥ aceitar√° valor de telefone v√°lido dos EUA
                require_from_group  Garante que pelo o menos um campo deve ser v√°lido dentro de um grupo de campos.

            . Atrav√©s do "ngForm" e "ngModel" podemos integrar a valida√ß√£o de formul√°rio do HTML com o Angular.

            . "noPropertyAccessFromIndexSignature": essa propriedade encontra-se no arquivo "tsconfig.json", √© usada para controlar como o 
                TypeScript lida com a acessibilidade de propriedades em objetos que t√™m uma assinatura de √≠ndice (index signature).
                Quando essa propriedade √© definida como true, o TypeScript n√£o permite que voc√™ acesse propriedades em objetos que t√™m uma 
                assinatura de √≠ndice usando a sintaxe de ponto (.). Em vez disso, voc√™ precisa usar a sintaxe de colchetes ([]) para acessar 
                as propriedades.


                <!-- Como utilizar as propriedade dos objetos quando estiver configurado "noPropertyAccessFromIndexSignature: true" -->
                <div *ngIf="stockName.errors && stockName.errors['required']">
                    Stock Name is Mandatory
                </div>                 


                <!-- Como utilizar as propriedade dos objetos quando estiver configurado "noPropertyAccessFromIndexSignature: false" -->
                <div *ngIf="stockName?.errors?.required">
                    Stock Name is Mandatory
                </div>                 

            . No "Template-Driven Forms" definimos as propriedades do formul√°rio no modelo HTML e o Angular cuida da valida√ß√£o e do 
                gerenciamento dos dados:

                <form #form="ngForm" (ngSubmit)="submitForm(form)">
                <label>Nome:</label>                  
                <input type="text" name="nome" ngModel required>  <!-- atributo de valida√ß√£o "required" -->

                <!-- "form.controls.nome?.invalid" -> Valida o estado do controle do formul√°rio -->
                <!-- "form.controls.nome?.dirty" e "form.controls.nome?.touched" -> Valida o estdo do controle -->
                <!-- "form.controle.nome?.errors?.required" valida o conte√∫do do controle do formul√°rio -->

                <div *ngIf="form.controls.nome?.invalid && (form.controls.nome?.dirty || form.controls.nome?.touched)">
                    <div *ngIf="form.controls.nome?.errors?.required">
                    O nome √© obrigat√≥rio.
                    </div>
                </div>

                <!-- "!form.valid" -> Valida o estado do formul√°rio -->
                <button type="submit" [disable]="!form.valid">Enviar</button>
                </form>

            . No "Reactive Forms" utilizamos o "FormControl" e o "FormGroup" para criar formul√°rios. Voc√™ define as propriedades do formul√°rio 
                no componente e o Angular cuida da valida√ß√£o e do gerenciamento dos dados.

                import { Component } from '@angular/core';
                import { FormGroup, FormControl, Validators } from '@angular/forms';
                
                @Component({
                selector: 'app-form',
                template: `
                    <form [formGroup]="form" (ngSubmit)="submitForm()">
                    <label>Nome:</label>
                    <input formControlName="nome" type="text">
                    <button type="submit" [disabled]="!form.valid">Enviar</button>
                    </form>
                `
                })
                export class FormComponent {

                    // Objetos FormControl e FormGroup para gerenciar os estados dos formul√°rios
                    // associado com a diretiva do formul√°rio "[formGroup]='form'"
                    form = new FormGroup({
                        nome: new FormControl('', Validators.required)
                    });
                    
                    submitForm() {
                        if (this.form.valid) {              // Verifica o estado do formul√°rio.
                        // c√≥digo para enviar o formul√°rio
                        }
                    }
                }

            . O ngModel pode alterar o CSS dos elementos HTML na valida√ß√£o usando as seguintes t√©cnicas:

                . Classes de valida√ß√£o: O ngModel adiciona classes de valida√ß√£o aos elementos HTML quando eles s√£o v√°lidos ou inv√°lidos. 
                                        As classes de valida√ß√£o mais comuns s√£o:

                    . ng-valid: adicionada quando o elemento √© v√°lido.

                    . ng-invalid: adicionada quando o elemento √© inv√°lido.

                    . ng-dirty: adicionada quando o elemento foi modificado pelo usu√°rio.

                    . ng-touched: adicionada quando o elemento foi tocado pelo usu√°rio.

            . Estilos condicionais: O ngModel pode ser usado para aplicar estilos condicionais aos elementos HTML com base na valida√ß√£o. 

                <!-- HTML -->
                <input type="text" [(ngModel)]="nome" required>
                <div [class.ng-invalid]="nome.invalid && nome.dirty">O nome √© obrigat√≥rio.</div>


                <input type="text" [(ngModel)]="nome" required>
                <div [ngClass]="{'ng-invalid': nome.invalid && nome.dirty}">O nome √© obrigat√≥rio.</div>


                /* CSS */
                .ng-invalid {
                border: 1px solid red;
                background-color: #f2dede;
                }
                
                .ng-valid {
                border: 1px solid green;
                background-color: #dff0d8;
                }

            . Exemplo - Template-Driven Forms

                <form #form="ngForm">
                    <label for="nome">Nome:</label>
                    <input type="text" id="nome" name="nome" [(ngModel)]="nome" required minlength="3" maxlength="50">
                    
                    <div *ngIf="nome.invalid && (nome.dirty || nome.touched)">
                        <div *ngIf="nome.errors.required">
                            O nome √© obrigat√≥rio.
                        </div>

                        <div *ngIf="nome.errors.minlength">
                            O nome deve ter pelo menos 3 caracteres.
                        </div>

                        <div *ngIf="nome.errors.maxlength">
                            O nome deve ter no m√°ximo 50 caracteres.
                        </div>
                    </div>
                </form>

        . Demo - Template-Driven Forms

            . Insira as linhas abaixo no arquivo "create-stock.component.html":

                <h2>Create Stock Form</h2>
                <div class="form-group">
                    <form #form="ngForm" (ngSubmit)="createStock(form)">               <!-- Tag form alterada -->
                        <div class="row">
                            <div class="col-3">
                                <label for="stockName">Stock Name</label>

                                <!-- Atributo "required" inserido -->

                                <input type="text"
                                        placeholder="Stock Name"
                                        name="stockName"
                                        id="stockName"
                                        required
                                        minlength="3"
                                        autocomplete="off"
                                        class="form-control form-control-sm"
                                        [(ngModel)]="stock.name">
                            </div>
                            <div class="col-3">
                                ...
                            </div>
                            <div class="col-3">
                                ...
                            </div>

                            <div class="col-3 mt-4">
                                ...
                            </div>
                            <div class="row">
                                ...
                            </div>

                            <div class="row" style="padding: 10px;">
                                <div class="col-2">

                                    <!-- diretiva "[disabled]" alterada e event binding "(click)" alterado
                                    <button [disabled]="!form.valid" 
                                            class="btn btn-primary" 
                                            type="submit">
                                        Create
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <h4>Stock Name is {{stock | json}}</h4>
                <br>
                <h4>confirmed is {{confirmed}}</h4>

            . Altere o componente "create-stock.component.ts" como abaixo:

                // M√©todo alterado
                createStock( form: any){
                    console.log("Stock Form: ", form);
                    console.log("Stock Name: ", form.controls.stockName.value);
                }

            . Altere o conte√∫do do arquivo "app.component.html" pelo abaixo:

                <app-create-stock></app-create-stock>

            . Execute o projeto e verifique se o formul√°rio est√° validando o estado do formul√°rio em fun√ß√£o da obrigatoriedade do 
                preenchimento do campo "Stock Name". Verifique o resultado apresentado na console do navegador:

                ng s -o

            . Altere a propriedade "noPropertyAccessFromIndexSignature" para "false" no arquivo "tsconfig.json":

                {
                    ...,
                    "compilerOptions": {
                        "noPropertyAccessFromIndexSignature": false,
                        ...
                    }
                    ...
                },
                ...

            . Insira as linhas abaixo no arquivo "create-stock.component.html":

                <h2>Create Stock Form</h2>
                <div class="form-group">
                    <form #form="ngForm"  (ngSubmit)="createStock(form)>    
                        <div class="row">
                            <div class="col-3">
                                <label for="stockName">Stock Name</label>

                                <!-- Atributo "#stockName="ngModel" inserido -->
                                <input type="text"
                                        placeholder="Stock Name"
                                        name="stockName"
                                        id="stockName"
                                        required
                                        minlength="3"
                                        #stockName="ngModel"
                                        autocomplete="off"
                                        class="form-control form-control-sm"
                                        [(ngModel)]="stock.name">

                            <!-- div inserida no lugar da alterada -->  
                            <div *ngIf="stockName.errors?.required">
                                Stock Name is Mandatory
                            </div>                 

                            <!-- div inserida no lugar da alterada -->
                            <div *ngIf="stockName.errors?.minlength">
                                Minimum length Stock Name will be 3 characteres
                            </div>                 

                            </div>
                            <div class="col-3">
                                ...
                            </div>
                            <div class="col-3">
                                ...
                            </div>

                            <div class="col-3 mt-4">
                                ...
                            </div>
                            <div class="row">
                                ...
                            </div>

                            <div class="row" style="padding: 10px;">
                                <div class="col-2">
                                    <button [disabled]="!form.valid" 
                                            class="btn btn-primary" 
                                            type="submit">
                                        Create
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <h4>Stock Name is {{stock | json}}</h4>
                <br>
                <h4>confirmed is {{confirmed}}</h4>

            . Execute o projeto e verifique se as mensagems informativas de valida√ß√£o est√£o aparecendo 

                ng s -o

        . Controle de estado dos elementos de entrada do formul√°rio

            . O estado, que nos permite espiar o estado do controle de formul√°rio, se o usu√°rio o visitou, se o usu√°rio o
                alterou e, finalmente, se ele est√° em um estado v√°lido.

                . valid: indica se o campo de formul√°rio √© v√°lido ou n√£o.

                . invalid: indica se o campo de formul√°rio √© inv√°lido ou n√£o.

                . dirty: indica se o campo de formul√°rio foi modificado pelo usu√°rio ou n√£o.

                . touched: indica se o campo de formul√°rio foi tocado pelo usu√°rio ou n√£o.

                . errors: retorna um objeto com as mensagens de erro para o campo de formul√°rio.

            . A validade, que nos diz se um controle do formul√°rio √© v√°lido ou n√£o, e se n√£o for v√°lido, o motivo subjacente 
                (ou motivos) pelo qual o elemento de formul√°rio √© inv√°lido.

        . Demo - Template-Driven Forms

            . Insira as linhas abaixo no arquivo "create-stock.component.css":

                .error-message {
                    color: red;
                    font-size: 12px;
                    margin-top: 5px;
                }

                input.invalid {
                    border: 1px solid #f00;
                }

            . Fa√ßa as altera√ß√£o abaixo no componente "create-stock.component.html"

                <h2>Create Stock Form</h2>
                <div class="form-group">
                    <form #form="ngForm"  (ngSubmit)="createStock(form)>               
                        <div class="row">
                            <div class="col-3">
                                <label for="stockName">Stock Name</label>

                                <!-- Inserido o diretiva de class [ngClass], id, ngModel e placeholder-->

                                <input type="text"
                                        placeholder="Stock Name"
                                        name="stockName"
                                        id="stockName"
                                        name="stockName"
                                        required
                                        minlength="3"
                                        ngModel
                                        #stockName="ngModel"
                                        [ngClass]="{'invalid': stockName.invalid && (stockName.dirty || stockName.touched), 'form-control.form-control-sm': stockName.valid}"
                                        class="form-control form-control-sm"
                                        autocomplete="off"
                                        [(ngModel)]="stock.name"> 

                                <!-- Div inserida -->
                                <div *ngIf="stockName.invalid && (stockName.dirty || stockName.touched)"
                                        [ngClass]="{'error-message': stockName.invalid && (stockName.dirty || stockName.touched) }">
                                    <div *ngIf="stockName.errors?.required">
                                        * Stock Name is Mandatory
                                    </div>                 

                                    <div *ngIf="stockName.errors?.minlength">
                                        * Minimum length Stock Name will be 3 characteres
                                    </div>     
                                </div>            
                            </div>
                            <div class="col-3">
                                ...
                            </div>
                            <div class="col-3">
                                ...
                            </div>

                            <div class="col-3 mt-4">
                                ...
                            </div>
                            <div class="row">
                                ...
                            </div>

                            <div class="row" style="padding: 10px;">
                                <div class="col-2">
                                    <button [disabled]="!form.valid" 
                                            class="btn btn-primary" 
                                            type="submit">
                                        Create
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                <h4>Stock Name is {{stock | json}}</h4>
                <br>
                <h4>confirmed is {{confirmed}}</h4>

            . Execute o projeto e verifique se as mensagems informativas de valida√ß√£o est√£o aparecendo, 
                verifique o a caixa de entrada ficou em destaque

                ng s -o

    . Reactive Forms 

        . Diferentemente do mecanismo Template-Driven Forms, nos formul√°rios reativos podemos definir
            a √°rvore inteira de objetos das entradas do formul√°rio no c√≥digo do seu componente
            e ent√£o os vincula-los aos componentes do formul√°rio nativo. 

        . Como voc√™ cria toda a √°rvore de controle de formul√°rio no componente, voc√™ tem acesso a ela imediatamente e
            n√£o precisa lidar com o ciclo de vida ass√≠ncrono do Angular

        . Primeira coisa a ser feita para trabalharmos com Reactive Forms e importar a biblioteca "ReactiveFormsModule"
            no componente "app.module.ts"

            ...
            // Importa√ß√£o da biblioteca
            import { ReactiveFormsModule } from '@angular/forms';
            ...

            @NgModule({
            declarations: [
                AppComponent,
                StockItemComponent,
                CreateStockComponent
            ],
            imports: [
                    BrowserModule,
                    ReactiveFormsModule,            // Importa√ß√£o da biblioteca
                ],
                providers: [],
                bootstrap: [AppComponent]
            })
            export class AppModule { }

        . Form Control

            . [formControl] √© uma diretiva que permite vincular um controle de formul√°rio a um elemento HTML. Ela √© usada para 
                criar um controle de formul√°rio que pode ser usado para coletar dados do usu√°rio e validar esses dados.

                <input [formControl]="nomeFormControl">

            . A classe "FormControl" √© usada para criar um controle de formul√°rio individual. Mais a frente veremos que essa classe
                servir√° principalmente para vincular o objeto de entrada com suas valida√ß√µes.           

                ...
                export class ExemploComponent {
                    nomeFormControl = new FormControl('');
                }

            . A diferen√ßa entre a diretiva [formControl] e a classe FormControl √© que a diretiva [formControl] √© usada para vincular 
                um controle de formul√°rio a um elemento HTML, enquanto a classe FormControl √© usada para criar um controle de 
                formul√°rio individual.

        . Demo

            . Execute o comando abaixo na pasta raiz do projeto:

                 ng g c stock/create-product-item --skip-tests  

            . Insira as linhas abaixo no arquivo "app.module.ts"

                import { NgModule } from '@angular/core';
                import { BrowserModule } from '@angular/platform-browser';

                import { AppRoutingModule } from './app-routing.module';
                import { AppComponent } from './app.component';
                import { StockItemComponent } from './stock/stock-item/stock-item.component';
                import { CreateStockComponent } from './stock/create-stock/create-stock.component';
                import { FormsModule } from '@angular/forms';
                import { StockCardComponent } from './stock/stock-card/stock-card.component';
                import { CreateStockItemComponent } from './stock/create-stock-item/create-stock-item.component';

                // Insira a linha abaixo
                import { ReactiveFormsModule } from '@angular/forms';   

                @NgModule({
                    declarations: [
                        AppComponent,
                        StockItemComponent,
                        CreateStockComponent,
                        StockCardComponent,
                        CreateStockItemComponent
                    ],
                    imports: [
                        BrowserModule,
                        AppRoutingModule,
                        FormsModule,
                        ReactiveFormsModule                 // Linha Inserida
                    ],
                    providers: [],
                    bootstrap: [AppComponent]
                })
                export class AppModule { }

            . Atualize todo o c√≥digo do componente "create-product-item.component.html" pelo conte√∫do abaixo:

                <div class="container">
                    <form>
                        <h2>Create Product Item Form</h2>
                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockCode">Stock Code</label>
                                <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockCode"
                                    name="stockCode"
                                    autocomplete="off"
                                    [formControl]="formProductItemStockCode">        <!-- Uso do [formControl] no lugar do [ngModel] -->
                            </div>
                            </div>

                            <div class="col-6">
                            <div class="form-group">
                                <label for="stockName">Stock Name</label>
                                <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockName"
                                    name="stockName"
                                    autocomplete="off"
                                    [formControl]="formProductItemStockName">            <!-- Uso do [formControl] no lugar do [ngModel] -->
                            </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPrice">Stock Price</label>
                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPrice"
                                    name="stockPrice"
                                    autocomplete="off"
                                    [formControl]="formProductItemStockPrice">               <!-- Uso do [formControl] no lugar do [ngModel] -->

                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice">Stock Previous Price</label>
                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPreviousPrice"
                                    name="stockPreviousPrice"
                                    autocomplete="off"
                                    [formControl]="formProductItemStockPreviousPrice">             <!-- Uso do [formControl] no lugar do [ngModel] -->

                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice"></label>
                                <select name="stockExchange"
                                        id="stockExchange"
                                        class="form-select form-select-sm"
                                        autocomplete="off"
                                        [formControl]="formProductItemStockExchange">                       <!-- Uso do [formControl] no lugar do [ngModel] -->

                                <option value="NYSE" selected>NYSE</option>
                                <option value="NASDAQ">NASDAQ</option>
                                <option value="OTHER">OTHER</option>
                                </select>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2 mt-3">
                            <button class="btn btn-primary"
                                    type="submit"
                                    (click)="onSubmit()">Save</button>
                            </div>
                        </div>
                    </form>

                    <p>Form Control value: {{ formProductItemStockCode.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control valid: {{ formProductItemStockCode.valid | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockName.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockPrice.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockPreviousPrice.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockExchange.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->

                </div>

            . Atualize todo o c√≥digo do componente "create-product-item.component.ts" com o conte√∫do abaixo:

                import { Component } from '@angular/core';
                import {FormControl} from "@angular/forms";                     // Linha inserida

                @Component({
                    selector: 'app-create-product-item',
                    templateUrl: './create-product-item.component.html',
                    styleUrls: ['./create-product-item.component.css']
                })

                export class CreateProductItemComponent {
                    public formProductItemStockCode = new FormControl();                                    // Linha inserida
                    public formProductItemStockName = new FormControl();                                    // Linha inserida
                    public formProductItemStockPrice = new FormControl();                                   // Linha inserida
                    public formProductItemStockPreviousPrice = new FormControl();                           // Linha inserida
                    public formProductItemStockExchange = new FormControl();                                // Linha inserida

                    constructor() {}

                    onSubmit(){
                        console.log('Name Control Value', this.formProductItemStockCode.value );            // Linha inserida
                        console.log('Name Control Value', this.formProductItemStockName.value );            // Linha inserida
                        console.log('Name Control Value', this.formProductItemStockPrice.value );           // Linha inserida
                        console.log('Name Control Value', this.formProductItemStockPreviousPrice.value );   // Linha inserida
                        console.log('Name Control Value', this.formProductItemStockExchange.value );        // Linha inserida
                    }
                }

            . Altere o conte√∫do do componente "app.component.html" pelo abaixo:

                <app-create-product-item></app-create-product-item>

            . Execute o projeto e verifique se o resultado de cada campo est√° sendo apresentado, tanto no formul√°rio, quanto na console do navegador:

                ng serve --open

            . Altere o arquivo "create-product-item.component.ts" conforme abaixo:

                ...
                export class CreateProductItemComponent {
                    public formProductItemStockCode = new FormControl('10', Validators.required);       // Linha alterada
                    ...
                }
                ...

            . Execute o projeto e verifique se o comportamento do campo "formProductItemStockCode"

                ng serve --open

        . formGroup
            
            . √â usado para criar um grupo de formul√°rios. Ela permite que o Angular crie um objeto FormGroup que 
                cont√©m todos os controles do formul√°rio.

            . √â usado em conjunto com a classe FormGroup para criar um grupo de formul√°rios. O objeto FormGroup √© um 
                objeto que cont√©m todos os controles do formul√°rio, bem como suas valida√ß√µes.

            . formControlName √© usada para vincular um controle individual a um elemento HTML. Ela permite que o Angular crie 
                um objeto FormControl e o vincule a um elemento HTML.

            . formGroupName √© usada para vincular um grupo de formul√°rios a um elemento HTML. Ela permite que o Angular 
                crie um objeto FormGroup e o vincule a um elemento HTML.




            . Exemplo

                import { Component } from '@angular/core';
                import { FormGroup, FormControl } from '@angular/forms';
                
                @Component({
                  selector: 'app-exemplo',
                  template: `
                    <form [formGroup]="produtoForm" (ngSubmit)="onSubmit()">
                      <div formGroupName="produto">
                        <label>Nome do Produto:</label>
                        <input formControlName="nome" type="text">
                      </div>
                      <div formGroupName="produto">
                        <label>Descri√ß√£o do Produto:</label>
                        <textarea formControlName="descricao" type="text"></textarea>
                      </div>
                      <div formGroupName="produto">
                        <label>Pre√ßo do Produto:</label>
                        <input formControlName="preco" type="number">
                      </div>
                      <button type="submit" [disabled]="!produtoForm.valid">Salvar</button>
                    </form>
                  `
                })
                export class ExemploComponent {
                  produtoForm: FormGroup;
                
                  constructor() {
                    this.produtoForm = new FormGroup({
                      produto: new FormGroup({
                        nome: new FormControl(''),
                        descricao: new FormControl(''),
                        preco: new FormControl('')
                      })
                    });
                  }
                
                  onSubmit() {
                    if (this.produtoForm.valid) {
                        console.log(this.produtoForm.value);
                        
                        // c√≥digo para salvar o produto

                        this.productForm.reset();
                    }
                  }
                }

            . A diretiva formGroup permite que o Angular crie um objeto FormGroup que cont√©m todos os controles do 
                formul√°rio. Isso permite que o Angular fa√ßa a valida√ß√£o dos campos e permite que o Angular acesse os 
                valores dos campos.

            . O m√©todo "reset" de um objeto FormGroup no Angular √© utilizado para resetar o formul√°rio para o seu estado 
                inicial.

                . Quando voc√™ chama o m√©todo reset em um objeto FormGroup, o seguinte ocorre:

                    . Todos os controles de formul√°rio s√£o resetados: Os valores dos controles de formul√°rio s√£o resetados 
                        para o seu valor inicial.

                    . As valida√ß√µes s√£o redefinidas: As valida√ß√µes dos controles de formul√°rio s√£o redefinidas para o seu 
                        estado inicial.

                    . O estado do formul√°rio √© resetado: O estado do formul√°rio √© resetado para o seu estado inicial, 
                        incluindo a propriedade dirty e touched.

                    . O m√©todo reset √© √∫til quando voc√™ deseja limpar o formul√°rio e reiniciar o processo de edi√ß√£o ou 
                        quando voc√™ deseja cancelar as altera√ß√µes feitas no formul√°rio

        . Demo

            . Altere o conte√∫do do arquivo "create-product-item.component.html" para retorno a posi√ß√£o inicial conforme abaixo:

                <div class="container">
                    <form>
                        <h2>Create Product Item Form</h2>
                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockCode">Stock Code</label>
                                <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockCode"
                                    name="stockCode"
                                    autocomplete="off">
                                    <!-- [formControl]="formProductItemStockCode">        Linha apagada -->
                            </div>
                            </div>

                            <div class="col-6">
                            <div class="form-group">
                                <label for="stockName">Stock Name</label>
                                <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockName"
                                    name="stockName">
                                    <!-- [formControl]="formProductItemStockName">        Linha apagada -->
                            </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPrice">Stock Price</label>
                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPrice"
                                    name="stockPrice"
                                    autocomplete="off">
                                    <!-- [formControl]="formProductItemStockPrice">        Linha apagada -->

                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice">Stock Previous Price</label>
                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPreviousPrice"
                                    name="stockPreviousPrice"
                                    autocomplete="off">
                                    <!-- [formControl]="formProductItemStockPreviousPrice">        Linha apagada -->

                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice"></label>
                                <select name="stockExchange"
                                        id="stockExchange"
                                        class="form-select form-select-sm"
                                        autocomplete="off">
                                        <!-- [formControl]="formProductItemStockExchange">        Linha apagada -->

                                <option value="NYSE" selected>NYSE</option>
                                <option value="NASDAQ">NASDAQ</option>
                                <option value="OTHER">OTHER</option>
                                </select>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2 mt-3">
                            <button class="btn btn-primary"
                                    type="submit"
                                    (click)="onSubmit()">Save</button>
                            </div>
                        </div>
                    </form>

                    <!-- Trecho abaixo apagado -->

                    <p>Form Control value: {{ formProductItemStockCode.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control valid: {{ formProductItemStockCode.valid | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockName.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockPrice.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockPreviousPrice.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    <p>Form Control value: {{ formProductItemStockExchange.value | json }}</p>           <!-- Acessando o valor atual da formul√°rio -->
                    
                    <!-- Fim da Elimina√ß√£o -->

                </div>

            . Altere o conte√∫do do arquivo "create-product-item.component.ts" conforme abaixo:

                import { Component } from '@angular/core';
                import {FormControl, FormGroup, Validators} from "@angular/forms";      // Import acrescentado com "FormGroup"

                @Component({
                    selector: 'app-create-product-item',
                    templateUrl: './create-product-item.component.html',
                    styleUrls: ['./create-product-item.component.css']
                })

                export class CreateProductItemComponent {
                    
                    /*      Trecho apagado
                        public formProductItemStockCode = new FormControl('10', Validators.required);
                        public formProductItemStockName = new FormControl();
                        public formProductItemStockPrice = new FormControl();
                        public formProductItemStockPreviousPrice = new FormControl();
                        public formProductItemStockExchange = new FormControl();
                    */


                    // Propriedade inserida
                    public stockForm: FormGroup = new FormGroup( {
                        stockCode: new FormControl('', [Validators.required]),
                        stockName: new FormControl('', [ Validators.required, Validators.minLength(3) ] ),
                        stockPrice: new FormControl('', [Validators.required]),
                        stockPreviousPrice: new FormControl('', [Validators.required]),
                        stockExchange: new FormControl('', [Validators.required])
                    });


                    constructor() {}

                    onSubmit(){
                        /*          Trecho apagado
                            console.log('Name Control Value', this.formProductItemStockCode.value );
                            console.log('Name Control Valid', this.formProductItemStockCode.valid );
                            console.log('Name Control Value', this.formProductItemStockName.value );
                            console.log('Name Control Value', this.formProductItemStockPrice.value );
                            console.log('Name Control Value', this.formProductItemStockPreviousPrice.value );
                            console.log('Name Control Value', this.formProductItemStockExchange.value );
                        */

                        console.log(this.stockForm.value);        // Linha inserida
                        console.log(this.stockForm.valid);        // Linha inserida

                    }
                }

            . Altere o conte√∫do do arquivo "create-product-item.component.html" conform abaixo:

                <div class="container">

                    <!-- Diretiva [formGroup] inserida e event binding (ngSubmit) inserido -->
                    <form [formGroup]="stockForm"
                            (ngSubmit)="onSubmit()">
                        <h2>Create Product Item Form</h2>
                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockCode">Stock Code</label>

                                <!-- Atributo "formControlName" inserido -->
                                <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockCode"
                                    name="stockCode"
                                    formControlName="stockCode"
                                    autocomplete="off">
                            </div>
                            </div>

                            <div class="col-6">
                            <div class="form-group">
                                <label for="stockName">Stock Name</label>

                                <!-- Atributo "formControlName" inserido -->
                                <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockName"
                                    formControlName="stockName"
                                    autocomplete="off"
                                    name="stockName">
                                    <!-- [formControl]="formProductItemStockName">        Linha apagada -->
                            </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPrice">Stock Price</label>

                                <!-- Atributo "formControlName" inserido -->
                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPrice"
                                    name="stockPrice"
                                    formControlName="stockPrice"
                                    autocomplete="off">

                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice">Stock Previous Price</label>

                                <!-- Atributo "formControlName" inserido -->
                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPreviousPrice"
                                    name="stockPreviousPrice"
                                    formControlName="stockPreviousPrice"
                                    autocomplete="off">
                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice"></label>

                                <!-- Atributo "formControlName" inserido -->
                                <select name="stockExchange"
                                        id="stockExchange"
                                        class="form-select form-select-sm"
                                        formControlName="stockExchange"
                                        autocomplete="off">

                                <option value="NYSE" selected>NYSE</option>
                                <option value="NASDAQ">NASDAQ</option>
                                <option value="OTHER">OTHER</option>
                                </select>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2 mt-3">

                            <!-- Atribute Binding [disabled] inserido -->
                            <button class="btn btn-primary"
                                    [disabled]="!stockForm.valid"
                                    type="submit">
                                    <!-- (click)="onSubmit()"   Event Binding eliminado -->
                                Save
                            </button>
                            </div>
                        </div>
                    </form>

                    <!-- Trecho HTML inserido -->
                    <p>Form Control value: {{ stockForm.value | json }}</p>
                    <p>Form Control status: {{ stockForm.status | json }}</p>
                    <!-- fim da inser√ß√£o -->

                </div>

            . Execute o projeto e verifique se o bot√£o est√° sendo habilitado somente quando a formul√°rio estiver validado:

                ng s -o

            . Insira a linha abaixo no componente "create-product-item.component.ts"

                ...
                export class CreateProductItemComponent {

                    ...
                    public submitedForm: Boolean = false;                   // Linha inserida
                    ...

                    onSubmit(){

                        // if alterado
                        if (this.stockForm.valid) {
                            console.log(this.stockForm.value);        
                            console.log(this.stockForm.valid);        

                            this.stockForm.reset();     // Para limpar o formul√°rio


                            this.submitedForm = false;
                        } 
                        else
                        {
                            this.submitedForm = true;
                        }
                    }

                }


            . Implemente as linhas das mensagens de valida√ß√£o abaixo no componente "create-product-item.component.html":

                <div class="container">
                    <form [formGroup]="stockForm"
                            (ngSubmit)="onSubmit()">
                        <h2>Create Product Item Form</h2>
                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockCode">Stock Code</label>

                                <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockCode"
                                    name="stockCode"
                                    formControlName="stockCode"
                                    autocomplete="off">
                            </div>
                            </div>

                            <div class="col-6">
                                <div class="form-group">
                                    <label for="stockName">Stock Name</label>

                                    <input type="text"
                                        class="form-control form-control-sm"
                                        id="stockName"
                                        formControlName="stockName"
                                        autocomplete="off"
                                        name="stockName">

                                    <!-- Div inserida -->
                                    <div *ngIf="stockForm.get('stockName')?.invalid &&
                                                ( stockForm.get('stockName')?.dirty ||
                                                    stockForm.get('stockName')?.touched ||
                                                    submitedForm)"
                                        [ngClass]="{'error-message': stockForm.get('stockName')?.invalid &&
                                                        ( stockForm.get('stockName')?.dirty ||
                                                        stockForm.get('stockName')?.touched ||
                                                        submitedForm)}">
                                        <div *ngIf="stockForm.get('stockName')?.errors?.required">
                                            * Stock Name is Mandatory
                                        </div>

                                        <div *ngIf="stockForm.get('stockName')?.errors?.minlength">
                                            * Minimum length Stock Name will be 3 characteres
                                        </div>
                                    </div>
                                    <!-- Fim da Inser√ß√£o -->

                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPrice">Stock Price</label>

                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPrice"
                                    name="stockPrice"
                                    formControlName="stockPrice"
                                    autocomplete="off">

                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice">Stock Previous Price</label>

                                <input type="number"
                                    class="form-control form-control-sm"
                                    id="stockPreviousPrice"
                                    name="stockPreviousPrice"
                                    formControlName="stockPreviousPrice"
                                    autocomplete="off">
                            </div>
                            </div>
                            <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice"></label>

                                <select name="stockExchange"
                                        id="stockExchange"
                                        class="form-select form-select-sm"
                                        formControlName="stockExchange"
                                        autocomplete="off">

                                <option value="NYSE" selected>NYSE</option>
                                <option value="NASDAQ">NASDAQ</option>
                                <option value="OTHER">OTHER</option>
                                </select>
                            </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2 mt-3">

                            <button class="btn btn-primary"
                                    type="submit">
                                Save
                            </button>

                            </div>


                        </div>
                    </form>

                    <!-- Trecho INserido -->
                    <p>Form Control value: {{ stockForm.get('stockName')?.value | json }}</p>
                    <p>Form Control invalid {{ stockForm.get('stockName')?.invalid | json }}</p>
                    <p>Form Control dirty {{ stockForm.get('stockName')?.dirty | json }}</p>
                    <p>Form Control touched {{ stockForm.get('stockName')?.touched | json }}</p>
                    <!-- Fim da inser√ß√£o -->

                    <p>Form Control value: {{ stockForm.value | json }}</p>
                    <p>Form Control status: {{ stockForm.status | json }}</p>
                </div>

            . Execute o projeto e verifique se as mensagens de valida√ß√£o est√£o aparecendo

                ng s -o

        . formBuilder

            . O FormBuilder √© uma classe do Angular que ajuda a criar formul√°rios de forma mais f√°cil e eficiente. Ele fornece 
                m√©todos para criar formul√°rios, grupos de formul√°rios e controles de formul√°rio de forma mais simples e leg√≠vel.

            . Com o FormBuilder, voc√™ pode criar formul√°rios de forma mais declarativa, sem precisar criar manualmente os objetos 
                FormGroup, FormControl e FormArray.

            . Aqui est√£o alguns dos principais benef√≠cios do uso do FormBuilder:

                . Cria√ß√£o de formul√°rios de forma mais simples: O FormBuilder fornece m√©todos para criar formul√°rios de 
                    forma mais simples e leg√≠vel, sem precisar criar manualmente os objetos FormGroup, FormControl e FormArray.

                . Defini√ß√£o de valida√ß√µes de forma mais f√°cil: O FormBuilder permite que voc√™ defina valida√ß√µes de forma mais 
                    f√°cil e leg√≠vel, utilizando m√©todos como required, minLength, maxLength, etc.

            . Exemplo

                import { Component } from '@angular/core';
                import { FormBuilder, FormGroup, Validators } from '@angular/forms';    // 1. Fa√ßa o import da biblioteca
                
                @Component({
                  selector: 'app-exemplo',
                  template: `
                    <form [formGroup]="produtoForm" (ngSubmit)="onSubmit()">
                      <div formGroupName="produto">
                        <label>Nome do Produto:</label>
                        <input formControlName="nome" type="text">                      <!-- 7. Utilizar o formul√°rio no template -->
                      </div>
                      <div formGroupName="produto">
                        <label>Descri√ß√£o do Produto:</label>
                        <textarea formControlName="descricao" type="text"></textarea>   <!-- 7. Utilizar o formul√°rio no template -->
                      </div>
                      <button type="submit" [disabled]="!produtoForm.valid">Salvar</button>
                    </form>
                  `
                })
                export class ExemploComponent {
                  produtoForm: FormGroup;                                               // 4. Crie o objeto do FormBuilder
                
                  constructor(private formBuilder: FormBuilder) {                       // 3. Crie uma inst√¢ncia do FormBuilder no seu componente:
                    this.produtoForm = this.formBuilder.group({                         // 4. Criar um formul√°rio com o FormBuilder
                        nome: ['', Validators.required],                                // 6. Definir valida√ß√µes
                        descricao: ['', Validators.required]
                    });

                    onSubmit() {                                                        // 8. Tratar o envio do formul√°rio
                      if (this.produtoForm.valid) {
                        console.log(this.produtoForm.value);
                        // c√≥digo para salvar o produto
                      }
                    }
                  }
                }

        . Demo
            
            . Retorne o conte√∫do do componente "create-product-item.component.ts" para a vers√£o da cria√ß√£o conforme abaixo:

                import { Component } from '@angular/core';

                @Component({
                    selector: 'app-create-product-item',
                    templateUrl: './create-product-item.component.html',
                    styleUrls: ['./create-product-item.component.css']
                })

                export class CreateProductItemComponent {

                    constructor() {}

                }

            . Insira as linha abaixo no componente "create-product-item.component.ts"


                import { Component } from '@angular/core';
                import { FormBuilder, FormGroup, Validators } from '@angular/forms';    // Linha inserida

                @Component({
                    selector: 'app-create-product-item',
                    templateUrl: './create-product-item.component.html',
                    styleUrls: ['./create-product-item.component.css']
                })

                export class CreateProductItemComponent {
                    productForm: FormGroup;                                             // Linha inserida


                    constructor(private formBuilder: FormBuilder) {
                        onCreateForm();                                                 // Linha inserida
                    }

                    onCreateForm(){                                                     // M√©todo inserida
                        this.productForm = this.formBuilder.group( {
                            stockCode: [null, Validators.required ],
                            stockName: [null, [ Validators.required, Validators.minlength(3) ] ],
                            stockPrice: [null, [ Validators.required, Validators.min(0)] ],
                            stockPreviousPrice: [null, [ Validators.required, Validators.min(0)] ],
                            stockExchange: ['NYSE', Validators.required]
                        });
                    }

                    onSubmit(){                                                         // M√©todo inserido
                        if (this.productForm.valid) {
                        console.log(this.productForm.value);
                        this.submitedForm = false;
                    }
                    else
                    {
                        this.submitedForm = true;
                    }
                }

            . Retorne o conte√∫do do componente "create-product-item.component.html" para a vers√£o inicial conforma abaixo:

                <div class="container">
                    <form [formGroup]="productForm"
                            (ngSubmit)="onSubmit()">
                        <h2>Create Product Item Form</h2>
                        <div class="row">
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="stockCode">Stock Code</label>

                                    <!-- formControlName="stockCode" eliminado -->
                                    <input type="text"
                                        class="form-control form-control-sm"
                                        id="stockCode"
                                        name="stockCode"
                                        autocomplete="off"
                                        formControlName="stockCode">       
                                </div>
                            </div>

                            <div class="col-6">
                                <div class="form-group">
                                    <label for="stockName">Stock Name</label>
                                    <input type="text"
                                        class="form-control form-control-sm"
                                        id="stockName"
                                        name="stockName"
                                        autocomplete="off"
                                        formControlName="stockName"

                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="stockPrice">Stock Price</label>
                                    <input type="number"
                                        class="form-control form-control-sm"
                                        id="stockPrice"
                                        name="stockPrice"
                                        autocomplete="off"
                                        formControlName="stockPrice">

                                </div>
                            </div>
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="stockPreviousPrice">Stock Previous Price</label>
                                    <input type="number"
                                        class="form-control form-control-sm"
                                        id="stockPreviousPrice"
                                        name="stockPreviousPrice"
                                        autocomplete="off"
                                        formControlName="stockPreviousPrice">
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="form-group">
                                    <label for="stockPreviousPrice"></label>
                                    <select name="stockExchange"
                                            id="stockExchange"
                                            class="form-select form-select-sm"
                                            autocomplete="off"
                                            formControlName="stockExchange">
                                    <option value="NYSE" selected>NYSE</option>
                                    <option value="NASDAQ">NASDAQ</option>
                                    <option value="OTHER">OTHER</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2 mt-3">
                            <button class="btn btn-primary"
                                    type="submit"
                                    (click)="onSubmit()">Save</button>
                            </div>
                        </div>
                    </form>

                    <!-- Trecho inserido -->
                    <p>Form Control value: {{ productForm.get('stockName')?.value | json }}</p>
                    <p>Form Control invalid {{ productForm.get('stockName')?.invalid | json }}</p>
                    <p>Form Control dirty {{ productForm.get('stockName')?.dirty | json }}</p>
                    <p>Form Control touched {{ productForm.get('stockName')?.touched | json }}</p>

                    <p>Form Control status: {{ productForm.status | json }}</p>
                    <!-- Fim da inser√ß√£o -->

                </div>

            . Execute o projeto e verifique se a valida√ß√£o do campo "Stock Name" est√° sendo feito com sucesso:

                ng s -o

            . N√£o ser√° necess√°rio alterar o componente "create-product-item.component.html", porque o "formBuilder" trabalha com 
                o atributo "formControlName" e ele j√° est√° aderente com a vers√£o anterior.

                <div class="container">
                    <form [formGroup]="stockForm" (ngSubmit)="onSubmit()">
                        <h2>Create Product Item Form</h2>
                        <div class="row">
                        <div class="col-4">
                            <div class="form-group">
                            <label for="stockCode">Stock Code</label>

                            <input type="text"
                                    class="form-control form-control-sm"
                                    id="stockCode"
                                    name="stockCode"
                                    formControlName="stockCode"
                                    autocomplete="off">

                            <!-- Div inserida -->
                            <div *ngIf="productForm.get('stockCode')?.invalid &&
                                                                    ( productForm.get('stockCode')?.dirty ||
                                                                        productForm.get('stockCode')?.touched ||
                                                                        submitedForm)"
                                [ngClass]="{'error-message': productForm.get('stockName')?.invalid &&
                                                                ( productForm.get('stockCode')?.dirty ||
                                                                productForm.get('stockCode')?.touched ||
                                                                submitedForm)}">
                                <div *ngIf="productForm.get('stockCode')?.errors?.required">
                                * Stock Code is Mandatory
                                </div>
                            </div>
                        </div>

                        <div class="col-6">
                            <div class="form-group">
                                <label for="stockName">Stock Name</label>

                                <input type="text"
                                        class="form-control form-control-sm"
                                        id="stockName"
                                        formControlName="stockName"
                                        autocomplete="off"
                                        name="stockName">

                                <!-- Div inserida -->
                                <div *ngIf="productForm.get('stockName')?.invalid &&
                                                                        ( productForm.get('stockName')?.dirty ||
                                                                            productForm.get('stockName')?.touched ||
                                                                            submitedForm)"
                                    [ngClass]="{'error-message': productForm.get('stockName')?.invalid &&
                                                                ( productForm.get('stockName')?.dirty ||
                                                                    productForm.get('stockName')?.touched ||
                                                                    submitedForm)}">
                                    <div *ngIf="productForm.get('stockName')?.errors?.required">
                                    * Stock Name is Mandatory
                                    </div>

                                    <div *ngIf="productForm.get('stockName')?.errors?.minlength">
                                    * Minimum length Stock Name will be 3 characteres
                                    </div>
                                </div>
                            </div>
                        </div>
                        </div>
                        <div class="row">
                        <div class="col-4">
                            <div class="form-group">
                                <label for="stockPrice">Stock Price</label>
                            
                                <input type="number"
                                                class="form-control form-control-sm"
                                                id="stockPrice"
                                                name="stockPrice"
                                                formControlName="stockPrice"
                                                autocomplete="off">
                            
                                <!-- Div inserida -->
                                <div *ngIf="productForm.get('stockPrice')?.invalid &&
                                                        ( productForm.get('stockPrice')?.dirty ||
                                                            productForm.get('stockPrice')?.touched ||
                                                            submitedForm)" [ngClass]="{'error-message': productForm.get('stockPrice')?.invalid &&
                                                        ( productForm.get('stockPrice')?.dirty ||
                                                        productForm.get('stockPrice')?.touched ||
                                                        submitedForm)}">
                                    <div *ngIf="productForm.get('stockPrice')?.errors?.required">
                                    * Stock Price is Mandatory
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-group">
                                <label for="stockPreviousPrice">Stock Previous Price</label>
                            
                                <input type="number"
                                                class="form-control form-control-sm"
                                                id="stockPreviousPrice"
                                                name="stockPreviousPrice"
                                                formControlName="stockPreviousPrice"
                                                autocomplete="off">
                            
                                <!-- Div inserida -->
                                <div *ngIf="productForm.get('stockPreviousPrice')?.invalid &&
                                                        ( productForm.get('stockPreviousPrice')?.dirty ||
                                                            productForm.get('stockPreviousPrice')?.touched ||
                                                            submitedForm)" [ngClass]="{'error-message': productForm.get('stockPreviousPrice')?.invalid &&
                                            ( productForm.get('stockPreviousPrice')?.dirty ||
                                                productForm.get('stockPreviousPrice')?.touched ||
                                                submitedForm)}">
                                    <div *ngIf="productForm.get('stockPreviousPrice')?.errors?.required">
                                    * Stock Previous Price is Mandatory
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-group">
                            <label for="stockExchange">Exchange</label>
                        
                            <select name="stockExchange" id="stockExchange" class="form-select form-select-sm" formControlName="stockExchange"
                                autocomplete="off">
                        
                                <option value="NYSE" selected>NYSE</option>
                                <option value="NASDAQ">NASDAQ</option>
                                <option value="OTHER">OTHER</option>
                            </select>
                            </div>
                        </div>
                        </div>
                        
                        <div class="row">
                        <div class="col-2 mt-3">
                        
                            <!-- Event Binding eliminado -->
                            <button class="btn btn-primary" type="submit">
                            Save
                            </button>
                        
                        </div>
                        </div>
                    </form>

                    <!-- Trecho HTML inserido -->
                    <p>Form Control value: {{ productForm.get('stockName')?.value | json }}</p>
                    <p>Form Control invalid {{ productForm.get('stockName')?.invalid | json }}</p>
                    <p>Form Control dirty {{ productForm.get('stockName')?.dirty | json }}</p>
                    <p>Form Control touched {{ productForm.get('stockName')?.touched | json }}</p>

                    <p>Form Control status: {{ productForm.status | json }}</p>
                    <!-- fim da inser√ß√£o -->
                </div>

            . Execute o projeto e verifique se as mensagens de valida√ß√£o est√£o aparecendo

                ng s -o

        . formArray

8. Componentes Service
----------------------

    . A finalidade dos componentes Service no Angular √©:

        . Compartilhar dados:               Podem ser usados para compartilhar dados entre diferentes componentes da aplica√ß√£o. 
                                            Isso √© especialmente √∫til quando voc√™ precisa acessar dados em diferentes partes da 
                                            aplica√ß√£o.

        . Fornecer funcionalidades:         Podem ser usados para fornecer funcionalidades que podem ser utilizadas por 
                                            diferentes componentes da aplica√ß√£o. Especialmente √∫til quando precisamos realizar 
                                            opera√ß√µes complexas que envolvem m√∫ltiplos componentes.

        . Gerenciar estado:                 Podem ser usados para gerenciar o estado da aplica√ß√£o. Isso √© especialmente 
                                            √∫til quando precisamos manter um estado consistente em diferentes partes da aplica√ß√£o.

        . Realizar opera√ß√µes ass√≠ncronas:   Podem ser usados para realizar opera√ß√µes ass√≠ncronas, como chamadas √† API ou 
                                            leitura de dados de um banco de dados.

        . Fornecer uma camada de abstra√ß√£o: Podem ser usados para fornecer uma camada de abstra√ß√£o entre os componentes 
                                            da aplica√ß√£o e as opera√ß√µes que eles realizam. Isso √© especialmente √∫til quando voc√™ 
                                            precisa mudar a implementa√ß√£o de uma opera√ß√£o sem afetar os componentes que a utilizam.

    . Os "Services" no Angular s√£o projetados para serem utilizados em conjunto com os componentes da aplica√ß√£o. Eles s√£o injetados 
        nos componentes que os necessitam e podem ser utilizados para fornecer dados e funcionalidades.

    . Como os servi√ßos podem ser utilizados no Angular:

        . Servi√ßo de autentica√ß√£o: Um servi√ßo de autentica√ß√£o pode ser utilizado para gerenciar o processo de autentica√ß√£o do usu√°rio 
            e fornecer informa√ß√µes sobre o usu√°rio autenticado.

        . Servi√ßo de dados: Um servi√ßo de dados pode ser utilizado para fornecer dados para os componentes da aplica√ß√£o e gerenciar 
            a leitura e escrita de dados no banco de dados.

        . Servi√ßo de notifica√ß√£o: Um servi√ßo de notifica√ß√£o pode ser utilizado para fornecer notifica√ß√µes para os usu√°rios e gerenciar 
            a exibi√ß√£o de notifica√ß√µes na aplica√ß√£o.

    . Exemplo

        // Service
        import { Injectable } from '@angular/core';
        
        @Injectable({                                                   // 2. ProvidedIn
          providedIn: 'root'
        })
        export class MeuServicoService {
        
          constructor() { }
        
          obterDados(): string {
            return 'Dados do servi√ßo';
          }
        
        }


        // Component              
        import { Component, OnInit } from '@angular/core';
        import { MeuServicoService } from './meu-servico.service';
        
        @Component({
          selector: 'app-meus-dados',
          template: '<p>Meus dados: {{ dados }}</p>'
        })
        export class MeusDadosComponent implements OnInit {
        
          dados: string;
        
            // O servi√ßo MeuServicoService √© injetado no componente 
            // MeusDadosComponent atrav√©s do construtor  
          constructor(private meuServico: MeuServicoService) { }            // 1. Inje√ß√£o de depend√™ncia
        
          ngOnInit(): void {
            this.dados = this.meuServico.obterDados();                      // 3. Uso do servi√ßo
          }
        
        }

        1. Inje√ß√£o de depend√™ncia

            . A inje√ß√£o de depend√™ncia √© feita atrav√©s do construtor do componente, onde o 
                servi√ßo √© passado como um par√¢metro. O Angular ent√£o se encarrega de criar 
                uma inst√¢ncia do servi√ßo e a passar para o componente.

        2. ProvidedIn

            . O @Injectable decorator √© utilizado para marcar o servi√ßo como injet√°vel. O providedIn √© utilizado 
                para especificar onde o servi√ßo deve ser criado. Nesse caso, o servi√ßo √© criado na raiz da 
                aplica√ß√£o ('root').

        3. Uso do servi√ßo

            . O servi√ßo √© ent√£o utilizado no componente para obter os dados que s√£o exibidos no template. 
                O m√©todo obterDados() do servi√ßo √© chamado no ngOnInit do componente para obter os dados.


    . Demo

        . Execute o comando abaixo na pasta raiz do projeto:

            ng g s services/product-item --skip-tests
            ng g class model/product-item --skip-tests
        
        . Altere a classe "product-item.ts" com o conte√∫do abaixo:

            export class ProductItem {

                // Construtor inserido
                constructor(public stockCode: string,
                    public stockName: string,
                    public stockPrice: number,
                    public stockPreviousPrice: number,
                    public stockExchange: string) {

                }

            }

        . Altere a clase "product-item.service.ts" com o conte√∫do abaixo:

            import { Injectable } from '@angular/core';
            import {ProductItem} from "../model/product-item";

            @Injectable({
                providedIn: 'root'
            })
            export class ProductItemService {

            public products: ProductItem[];
                constructor() {
                    this.products = [];
                }

                public post( product: ProductItem ){
                    this.products.push(product);
                }

                public put( stockCode: string, product: ProductItem ){

                }

                public delete( stockCode: string ){

                }

                public getById( stockCode: string ){

                }

                public getAll(): ProductItem[] {
                    return this.products;
                }

                public update( product: ProductItem ){

                }


            }

        . Insira as linhas abaixo no arquivo "create-product-item.component.ts":

            import { Component } from '@angular/core';
            import {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';
            import {ProductItemService} from "../../services/product-item.service";
            import {ProductItem} from "../../model/product-item";    // Linha inserida

            @Component({
                selector: 'app-create-product-item',
                templateUrl: './create-product-item.component.html',
                styleUrls: ['./create-product-item.component.css']
            })

            export class CreateProductItemComponent {
                public submitedForm: Boolean = false;                   // Linha inserida
                public notablePeople: string;

                public productForm: FormGroup = new FormGroup( {
                    stockCode: new FormControl('', [Validators.required]),
                    stockName: new FormControl('', [ Validators.required, Validators.minLength(3) ] ),
                    stockPrice: new FormControl('', [Validators.required]),
                    stockPreviousPrice: new FormControl('', [Validators.required]),
                    stockExchange: new FormControl('NYSE', [Validators.required])
                });


                constructor( public productItemService: ProductItemService ) {
                    this.notablePeople = "Bill Gates";
                }

                onSubmit(){
                    if (this.productForm.valid) {
                        // console.log(this.stockForm.value);        // Linha Eliminada
                        // console.log(this.stockForm.valid);        // Linha Eliminada

                        // Insira a linha abaixo
                        this.productItemService.post( new ProductItem(
                            this.productForm.value.stockCode,
                            this.productForm.value.stockName,
                            this.productForm.value.stockPrice,
                            this.productForm.value.stockPreviousPrice,
                            this.productForm.value.stockExchange
                        ));

                        this.productForm.reset();

                        this.submitedForm = false;
                    }
                    else
                    {
                        this.submitedForm = true;
                    }

                }

            }

        . Fa√ßa as altera√ß√µes abaixo no arquivo "create-product-item.component.html":

            <div class="container">
                <form [formGroup]="stockForm" (ngSubmit)="onSubmit()">
                    ...
                </form>

                <!-- Trecho HTML Eliminado -->
                <!--
                <p>Form Control value: {{ stockForm.get('stockName')?.value | json }}</p>
                <p>Form Control invalid {{ stockForm.get('stockName')?.invalid | json }}</p>
                <p>Form Control dirty {{ stockForm.get('stockName')?.dirty | json }}</p>
                <p>Form Control touched {{ stockForm.get('stockName')?.touched | json }}</p>

                <p>Form Control status: {{ stockForm.status | json }}</p>
                -->
                <!-- fim da Elimina√ß√£o -->

                <!-- Trecho HTML Inserido -->
                <div class="mt-3" style="padding-top: 10px; padding-bottom: 10px; border: 1px solid black;">
                    <div class="row" style="padding: 10px;">
                    <div class="col-2">
                        Stock Code
                    </div>
                    <div class="col-3">
                        Stock Name
                    </div>
                    <div class="col-2">
                        Stock Price
                    </div>
                    <div class="col-2">
                        Stock Previous Price
                    </div>
                    <div class="col-3">
                        Stock Exchange
                    </div>
                    </div>
                    <div *ngFor="let p of productItemService.products; index as i" style="padding: 10px;">
                    <div class="row">
                        <div class="col-2">
                        {{ p.stockCode }}
                        </div>
                        <div class="col-3">
                        {{ p.stockName }}
                        </div>
                        <div class="col-2">
                        {{ p.stockPrice }}
                        </div>
                        <div class="col-2">
                        {{ p.stockPreviousPrice }}
                        </div>
                        <div class="col-3">
                        {{ p.stockExchange }}
                        </div>
                    </div>
                    </div>
                    <!-- Fim da Inser√ß√£o -->
                </div>
            </div>        

    https://www.tektutorialshub.com/angular/angular-services/
    https://www.tektutorialshub.com/angular/angular-dependency-injection/



09. HTTP
--------

    https://www.tutorialspoint.com/angular/angular-http-client.htm
    https://www.tektutorialshub.com/angular/angular-httpclient/
    https://www.tektutorialshub.com/angular/angular-http-get-example-using-httpclient/


    . Observables

        . Um Observable √© um objeto que emite valores ao longo do tempo e pode ser observado por outros 
            objetos. Em Angular, os Observables s√£o usados para lidar com dados ass√≠ncronos, 
            como requisi√ß√µes HTTP, eventos de usu√°rio e atualiza√ß√µes de estado.

        . Um Observable √© como um fluxo de dados que pode ser inscrito por outros objetos, chamados de 
            Observers. Quando um Observable emite um valor, todos os Observers inscritos recebem esse valor.

        . Os Observables s√£o √∫teis em Angular porque permitem que voc√™:

            . Lide com dados ass√≠ncronos de forma eficiente

            . Seja notificado quando os dados mudam

            . Fa√ßa requisi√ß√µes HTTP de forma ass√≠ncrona

            . Lide com eventos de usu√°rio de forma ass√≠ncrona

        . Em Angular, os Observables s√£o implementados usando a biblioteca RxJS (Reactive Extensions for JavaScript).

            . A biblioteca RxJS (Reactive Extensions for JavaScript) √© uma biblioteca de programa√ß√£o reativa para 
                JavaScript que permite lidar com fluxos de dados ass√≠ncronos de forma eficiente.

            . Como a biblioteca "rxjs" funciona:

                . Observables

                    Um Observable √© um objeto que emite valores ao longo do tempo e pode ser observado por outros objetos. 
                    No Angular, os Observables s√£o usados para lidar com dados ass√≠ncronos.

                . Observers

                    Um Observer √© um objeto que se inscreve em um Observable para receber os valores emitidos por ele. 
                    No Angular, os Observers s√£o usados para lidar com os dados recebidos de um Observable.

                . Subscription

                    Um Subscription √© um objeto que representa a inscri√ß√£o de um Observer em um Observable. 
                    No Angular, os Subscriptions s√£o usados para gerenciar as inscri√ß√µes dos Observers nos Observables.

                . Operadores

                    Os operadores s√£o fun√ß√µes que podem ser usadas para transformar, filtrar e combinar Observables. 
                    No Angular, os operadores s√£o usados para manipular os dados recebidos de um Observable.

                . Exemplo

                    import { Observable } from 'rxjs';

                    const meuObservable = new Observable(observer => {
                        // Faz algo ass√≠ncrono aqui, como uma requisi√ß√£o HTTP
                        setTimeout(() => {
                            observer.next('Dados carregados!');
                            observer.complete();
                        }, 2000);
                    });

                    meuObservable.subscribe(dados => {
                        console.log(dados); // Imprime "Dados carregados!"
                    });

            . Exemplos

                . Lidar com requisi√ß√µes HTTP ass√≠ncronas:

                    import { HttpClient } from '@angular/common/http';
                    import { Observable } from 'rxjs';

                    const httpClient = new HttpClient();
                    const observable = httpClient.get('https://api.example.com/data');

                    observable.subscribe(data => {
                        console.log(data);
                    });

                . Lidar com eventos de usu√°rio:

                    import { fromEvent } from 'rxjs';

                    const button = document.getElementById('myButton');
                    const observable = fromEvent(button, 'click');

                    observable.subscribe(event => {
                        console.log('Bot√£o clicado!');
                    });

                . Lidar com atualiza√ß√µes de estado:

                    import { BehaviorSubject } from 'rxjs';

                    const estado = new BehaviorSubject('inicial');

                    estado.subscribe(estadoAtual => {
                        console.log(estadoAtual);
                    });

                    estado.next('novo estado');

    . HttpClient

        . Chamadas HTTP no Angular s√£o feitas utilizando o m√≥dulo HttpClient que √© parte do Angular, localizado no pacote
            "@angular/common/http".

            . Para fazer uso desta biblioteca √© necess√°rio realizar o import do "HttpModule" dentro do "AppComponent":

                import { HttpClientModule } from '@angular/common/http';        // Import
                ...

                @NgModule({ 
                imports: [ 
                    BrowserModule, 
                    ...
                    HttpClientModule,                                           // import HttpClientModule depois do  BrowserModule. 
                ] 
                }) 
                export class AppModule {}

        . Para usarmos a classe HttpClient precisar fazer a inje√ß√£o do objeto "http" dela no m√©todo "constructor" do componente:

            import { Component, OnInit } from '@angular/core';
            import { HttpClient } from '@angular/common/http';          // Import da biblioteca no componente
            
            @Component({
              selector: 'app-exemplo',
              template: '<p>Resposta: {{ resposta }}</p>'
            })
            export class ExemploComponent implements OnInit {
              resposta: string;
                                      +---------------> Inje√ß√£o do objeto http 
                                      |
                          |----------------------|              
              constructor(private http: HttpClient) { }
            
              ngOnInit(): void {
                this.http.get('https://api.exemplo.com/dados')
                  .subscribe(resposta => {
                    this.resposta = resposta;
                  });
              }
            }

        . O HttpClient √© uma classe que fornece m√©todos para fazer requisi√ß√µes HTTP, como: get, post, put, delete, 
            entre outros.

        . Quando fazemos uma chamada HTTP no Angular, o seguinte fluxo ocorre:

            . Voc√™ cria uma inst√¢ncia do HttpClient e chama o m√©todo correspondente √† requisi√ß√£o que voc√™ deseja fazer 
                (por exemplo, get, post, etc.).

            . O HttpClient cria uma requisi√ß√£o HTTP e a envia para o servidor.

            . O servidor processa a requisi√ß√£o e retorna uma resposta.

            . A resposta √© recebida pelo HttpClient e √© convertida em um objeto JavaScript.

            . O objeto JavaScript √© retornado para o componente que fez a chamada.

        . Observables

            . S√£o utilizados para lidar com as respostas das chamadas HTTP. Um Observable √© um objeto que emite 
                valores ao longo do tempo. No caso das chamadas HTTP, o Observable emite a resposta do servidor.

        . Quando uma chamada HTTP √© feita no Angular, o HttpClient retorna um Observable que emite a resposta do 
            servidor. Voc√™ pode ent√£o subscrever esse Observable para receber a resposta e process√°-la.

            import { Component, OnInit } from '@angular/core';
            import { HttpClient } from '@angular/common/http';
            
            @Component({
              selector: 'app-exemplo',
              template: '<p>Resposta: {{ resposta }}</p>'
            })
            export class ExemploComponent implements OnInit {
              resposta: string;
            
              constructor(private http: HttpClient) { }
            
              ngOnInit(): void {
                this.http.get('https://api.exemplo.com/dados')
                  .subscribe(resposta => {                          // Subscri√ß√£o ao observable retornado pela objeto http
                    this.resposta = resposta;
                  });
              }
            }

        . O HttpClient fornece v√°rios m√©todos para fazer requisi√ß√µes HTTP, cada um desses m√©todos retorna um Observable, 
            que emite a resposta do servido:

            . get: faz uma requisi√ß√£o HTTP GET

            . post: faz uma requisi√ß√£o HTTP POST

            . put: faz uma requisi√ß√£o HTTP PUT

            . delete: faz uma requisi√ß√£o HTTP DELETE

            . patch: faz uma requisi√ß√£o HTTP PATCH

            . head: faz uma requisi√ß√£o HTTP HEAD

            . options: faz uma requisi√ß√£o HTTP OPTIONS

        . HttpClient utiliza diversos argumetos/par√¢metros para fazer a requis√£o: 

            . URL solicitada

                https://api.exemplo.com/dados

            . Objeto json com argumentos opcionais :

                {
                    headers?: HttpHeaders | {[header: string]: string | string[]},
                    observe?: 'body' | 'events' | 'response',

                    params?: HttpParams|{[param: string]: string | string[]},
                    reportProgress?: boolean,
                    responseType?: 'arraybuffer'|'blob'|'json'|'text',
                    withCredentials?: boolean,
                }

                . headers: HTTP Headers of the request, either as string, array of string or array of HttpHeaders.

                . observe: Process the response and return the specific content of the response. Possible values are body, response and events. The default option of observer is body.

                . params: HTTP parameters of the request, either as string, array of string or array of HttpParams.

                . reportProgress: Whether to report the progress of the process or not (true or false).

                . responseType: Refers the format of the response. Possible values are arraybuffer, blob, json and text.

                . withCredentials: Whether the request has credentials or not (true or false).            

            . Exemplo:

                httpClient.get(url, options) 
                    .subscribe( (data) => console.log(data) );

    . Demo

        . Insira as linhas abaixo no arquivo "app.module.ts"

            import { HttpClientModule } from '@angular/common/http';        // Import
            ...

            @NgModule({ 
            imports: [ 
                BrowserModule, 
                ...
                HttpClientModule,                                           // import HttpClientModule depois do  BrowserModule. 
            ] 
            }) 
            export class AppModule {}

        . Fa√ßa as altera√ß√µes abaixo no arquivo "stock-item.component.ts":

            import { HttpClient } from '@angular/common/http';              // Linha inserida

            import { Component, OnInit } from '@angular/core';
            import { Stock } from 'src/app/model/stock';

            @Component({
                selector: 'app-stock-item',
                templateUrl: './stock-item.component.html',
                styleUrls: ['./stock-item.component.css']
            })
            export class StockItemComponent implements OnInit {

                public stock!: Stock;
                public stockClasses!: any;
                public stockStyles!: any;                                   // Linha inserida
                public saved: boolean = false;
                public productsStock: Array<Stock> = [];
                
                constructor( private http: HttpClient ) { }                 // Construtor alterado

                ngOnInit(): void {

                    this.onInitStock();

                    let diff = (this.stock.price / this.stock.previousPrice) - 1;
                    let largeChange = Math.abs(diff) > 0.01;
                    this.stockClasses = {
                        'positive': this.stock.isPositiveChange(),
                        'negative': !this.stock.isPositiveChange(),
                        'large-change': largeChange,
                        'small-change': !largeChange
                    };

                    this.stockStyles = {                                    // Objeto inserido
                        'color': this.stock.isPositiveChange() ? 'green' : 'red',
                        'font-size': largeChange ? '1.2em' : '0.8em'
                    };
                }

                toggleFavorite( event: any, index: number ) {
                    console.log('We are toggling the favorite state for this stock event.target ', event.target);
                    console.log('We are toggling the favorite state for this stock event.target.value ', event.target.value);
                    console.log('We are toggling the favorite state for this stock index ', index);                             // Linha inserida
                    console.log('We are toggling the favorite state for this stock ', this.productsStock[index]);               // Linha inserida
                }

                onInitStock() {
                    this.stock = new Stock('', '', 0, 0, '');
                }

                onSave(){
                    console.log('We are saving the stock', this.stock);
                    // this.stock = new Stock('', '', 0, 0, '');
                    this.productsStock.push(this.stock);
                    this.onInitStock();
                    this.saved=true;
                }

            }

        . Substitua o conte√∫do do arquivo "app.component.html" com o conte√∫do abaixo:

            <app-stock-item></app-stock-item>

        . Levante a aplica√ß√£o e verifique se deu tudo certo

            ng s -o

        . Crie o arquivo "db.json" na pasta raiz do projeto com o conte√∫do abaixo:

            {
                "stocks": [ 
                    {
                        "id": "10",
                        "code": "10",
                        "name": "Apple Inc.",
                        "price": 150,
                        "previousPrice": 140,
                        "exchange": "NYSE"
                    },
                    {
                        "id": "20",
                        "code": "20",
                        "name": "Microsoft Corp.",
                        "price": 100,
                        "previousPrice": 90,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "30",
                        "code": "30",
                        "name": "Google Inc.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NYSE"
                    },
                    {
                        "id": "40",
                        "code": "40",
                        "name": "Oracle Corp.",
                        "price": 200,
                        "previousPrice": 190,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "50",
                        "code": "50",
                        "name": "IBM Corp.",
                        "price": 300,
                        "previousPrice": 290,
                        "exchange": "NYSE"
                    },
                    {
                        "id": "60",
                        "code": "60",
                        "name": "Intel Corp.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "70",
                        "code": "70",
                        "name": "NVidia Corp.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "80",
                        "code": "80",
                        "name": "Qualcomm Inc.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "90",
                        "code": "90",
                        "name": "Sony Corp.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "91",
                        "code": "91",
                        "name": "Samsung Corp.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "92",
                        "code": "92",
                        "name": "Nokia Corp.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NASDAQ"
                    },
                    {
                        "id": "93",
                        "code": "93",
                        "name": "LG Corp.",
                        "price": 400,
                        "previousPrice": 390,
                        "exchange": "NASDAQ"
                    }
                ]
            }

        . Abra outro terminal e execute o comando abaixo na raiz do projeto:

            npx json-server db.json

        . Fa√ßa as altera√ß√µes abaixo no arquivo "stock-item.component.ts":

            import { HttpClient } from '@angular/common/http';              

            import { Component, OnInit } from '@angular/core';
            import { Stock } from 'src/app/model/stock';

            @Component({
                selector: 'app-stock-item',
                templateUrl: './stock-item.component.html',
                styleUrls: ['./stock-item.component.css']
            })
            export class StockItemComponent implements OnInit {

                public stock!: Stock;
                public stockClasses!: any;
                public stockStyles!: any;
                public saved: boolean = false;
                public productsStock: Array<Stock> = [];
                public response: any;                                            // Linha inserida
                
                constructor( private http: HttpClient ) { }                 

                ...

                onQueryProduct(){                                                  // M√©todo inserido
                    this.http.get('http://localhost:3000/stocks/' + this.stock.code)
                    .subscribe(resposta => {
                        console.log(resposta);
                        this.response = resposta;
                        this.stock.code = this.response.code;
                        this.stock.name = this.response.name;
                        this.stock.price = this.response.price;
                        this.stock.previousPrice = this.response.previousPrice;
                        this.stock.exchange = this.response.exchange;
                    });
                }
            }

        . Fa√ßa as altera√ß√µes abaixo no arquivo "stock-item.component.html":

            <h1>Welcome to stock-item</h1>

            <div class="container">
                <div class="alert alert-success" role="alert" *ngIf="!saved">
                    Product Name : <strong> {{stock.name}} </strong>
                </div>

                <form #stockForm="ngForm" 
                        (ngSubmit)="onSave()">
                    <div class="row">
                        <div class="col-2">
                            <div class="form-group">
                                <label for="stockCode">Stock Code</label>

                                <input type="text"
                                        class="form-control form-control-sm"
                                        id="stockCode" name="stockCode"
                                        [required]="true"
                                        [(ngModel)]="stock.code"
                                        (focus)="saved=false"
                                        (blur)="onQueryProduct()">                  <!-- Linha inserida -->
                            </div>
                        </div>

                        ...
                    </div>

                    ...
                </form>
            </div>

        . Levante a aplica√ß√£o, digite c√≥digo v√°lidos de produtos e verifique se deu tudo certo

            ng s -o


    . Configura√ß√£o e redirecionamento das chamadas "http":

        . Quando voc√™ executa o comando ng serve, o Angular cria um servidor de desenvolvimento que serve os arquivos 
            do seu aplicativo. No entanto, se o seu aplicativo precisa fazer requisi√ß√µes para um servidor de back-end, 
            voc√™ pode configurar o servidor de desenvolvimento para encaminhar essas requisi√ß√µes, ao inv√©s de fazer as 
            chamadas diretamente ao servidor, por exemplo:

            . Ao executar o comando, no prompt na pasta raiz:

                npx json-server db.json

            . A saida ser√°:

                JSON Server started on PORT :3000
                Press CTRL-C to stop
                Watching db.json...

                (À∂·µî ·µï ·µîÀ∂)

                Index:
                http://localhost:3000/

                Static files:
                Serving ./public directory if it exists

                Endpoints:
                http://localhost:3000/stocks

        . A rota principal para realizar nossas chamadas da API ser√° "http://localhost:3000". Podemos abreviar essa rota 
            fazendo configura√ß√µes num arquivo proxy separadamente:

            . Basta ter um arquivo com o nome "proxy.conf.json" na pasta raiz do projeto com o conte√∫do abaixo:

                       +---> path 
                {      |
                    "/api": {
                        "target": "http://localhost:8080",  // todas as requisi√ß√µes para /api ser√£o encaminhadas para http://localhost:8080
                        "secure": false,
                        "changeOrigin": true,
                        "pathRewrite": {
                            "^/api": ""
                        }
                    }
                }

            .  Esse arquivo de configura√ß√£o √© um arquivo JSON que cont√©m as seguintes propriedades:

                . path: o caminho da requisi√ß√£o que deve ser encaminhada
                
                . target: o URL do servidor de back-end que deve receber a requisi√ß√£o
                
                . secure: um booleano que indica se a conex√£o com o servidor de back-end deve ser segura (HTTPS)
                
                . changeOrigin: um booleano que indica se o servidor de desenvolvimento deve alterar a origem da requisi√ß√£o

        . Tendo o arquivo "proxy.conf.json" configurado corretamente, basta levantar o projeto com o comando abaixo:

            ng serve --proxy-config  proxy.conf.json  

        . A partir do Angular 15 tamb√©m introduziu um novo recurso chamado "proxy" no arquivo angular.json. Esse recurso permite que voc√™ 
            configure o proxy de forma mais f√°cil e flex√≠vel:

            {
                ...
                "projects": {
                    "my-app": {
                        ...
                        "architect": {
                            "serve": {
                                "options": {                            // N√≥ inserido
                                    "proxyConfig": "proxy.conf.json"
                                },
                                ...
                            }
                        }
                    }
                }
            }

        . Dessa forma podemos levantar o projeto da forma convencional, que as configura√ß√µes ser√£o utilizadas:

            ng s -o

    . Demo

        . Certifique-se que o servidor json est√° ativo e est√° rodando na URL "http://localhost:3000/"

            npx json-server db.json

        . Crie o arquivo "proxy.conf.json" na pasta raiz do projeto com o conte√∫do abaixo:

            {
                "/api/stock": {
                    "target": "http://localhost:3000",
                    "secure": false,
                    "changeOrigin": true,
                    "pathRewrite": {
                        "^/api/stock": ""
                    }
                }
            }

        . Altere o arquivo "angular.json" conforme abaixo:

            {
                ...
                "projects": {
                    "my-app": {
                        ...
                        "architect": {
                            "serve": {
                                "options": {                            // N√≥ inserido
                                    "proxyConfig": "proxy.conf.json"
                                },
                                ...
                            }
                        }
                    }
                }
            }

        . Altere a chamada da URL no arquivo "stock-item.component.ts" como abaixo:

            ...
            onQueryProduct() {
//                this.http.get('/http://localhost:3000/stocks/' + this.stock.code)         // Linha eliminada
                this.http.get('/api/stock/stocks/' + this.stock.code)                           // Linha alterada
                .subscribe(resposta => {
                    console.log(resposta);
                    this.response = resposta;
                    this.stock.code = this.response.code;
                    this.stock.name = this.response.name;
                    this.stock.price = this.response.price;
                    this.stock.previousPrice = this.response.previousPrice;
                    this.stock.exchange = this.response.exchange;
                });
            }
            ...           

        . Levante o projeto e veja se a p√°gina "stock-item.component" est√° executando a chamada do item corretamente.

            ng s -o



P√°gina 302

Utilize o link abaixo como exemplo para criar o CRUD

https://www.tektutorialshub.com/angular/angular-http-get-example-using-httpclient/






https://www.tektutorialshub.com/angular/angular-forms-fundamentals/
https://www.fabricadecodigo.com/criar-formulario-reactive-forms/
https://medium.com/@zeeshankhan8838/reactive-forms-in-angular-848d709cfba4
https://www.digitalocean.com/community/tutorials/angular-reactive-forms-introduction
https://www.telerik.com/blogs/angular-basics-what-reactive-forms-when-use-them

Aula 16.2. Instalando e testando o json-server






        



PAREI AQUI, P√ÅGINA 149

https://consolelog.com.br/validacao-formulario-ngmodel-angular/
https://www.toptal.com/angular-js/angular-4-forms-validation



10. Routing
-----------


    . A tag "<router-outlet>" age como um marcador para onde a rota carregada deve ser exibida na interface. Basicamente, 
        √© uma √°rea reservada no DOM que indica ao Angular Router onde ele deve renderizar os componentes com base nas rotas 
        configuradas. 

        . Com base na URL e na configura√ß√£o da URL vs componente associado, o angular ir√° renderizar o conte√∫do no lugar 
            da tag <router-outlet>. Por exemplo:

                                            Apontar para                        Associado ao html
            http:///localhome:4200/about     ------------->  AboutComponent    ------------------>     about.component.html
                    |                                                                                               ^
                    V                                                                                               |
                Quando essa URL √© chamada o <router-outlet> renderizar√° a p√°gina -----------------------------------+

        . A tag <router-outlet> deve ser inserida no componente "app.component.html" para executar a associa√ß√£o da URL com 
            o componente angular que ser√° configurada num dos arquivos logo abaixo :

            // app.component.html
            <router-outlet></router-outlet>

    . No Angular, o roteamento √© uma parte fundamental que permite a navega√ß√£o entre diferentes componentes. As rotas 
        podem ser configuradas em tr√™s locais principais: no arquivo `app.module.ts`, no `app-routing.module.ts`, e em 
        um m√≥dulo espec√≠fico. A seguir, apresento como realizar essas configura√ß√µes.

        . Configura√ß√£o no `app.module.ts`

            . No arquivo `app.module.ts`, voc√™ pode configurar as rotas diretamente, embora isso n√£o seja a pr√°tica 
                recomendada para aplica√ß√µes maiores. Aqui est√° um exemplo b√°sico:

                import { NgModule } from '@angular/core';
                import { BrowserModule } from '@angular/platform-browser';
                import { RouterModule, Routes } from '@angular/router';
                import { AppComponent } from './app.component';
                import { HomeComponent } from './home/home.component';      // Importa√ß√£o dos componentes
                import { AboutComponent } from './about/about.component';   // Importa√ß√£o dos componentes

                // Configura√ß√£o das rotas
                const appRoutes: Routes = [
                    { path: '', component: HomeComponent },
                    { path: 'about', component: AboutComponent }
                ];

                @NgModule({
                    declarations: [
                        AppComponent,
                        HomeComponent,
                        AboutComponent
                    ],
                    imports: [
                        BrowserModule,
                        RouterModule.forRoot(appRoutes) // Configurando as rotas aqui
                    ],
                    providers: [],
                    bootstrap: [AppComponent]
                })
                export class AppModule { }

        . Configura√ß√£o no `app-routing.module.ts`

            . A maneira mais comum e organizada de configurar rotas √© atrav√©s do m√≥dulo de roteamento, geralmente chamado 
                de `app-routing.module.ts`. 

                import { NgModule } from '@angular/core';
                import { RouterModule, Routes } from '@angular/router';
                import { HomeComponent } from './home/home.component';
                import { AboutComponent } from './about/about.component';

                // Configura√ß√£o das rotas
                const routes: Routes = [
                    { path: '', component: HomeComponent },
                    { path: 'about', component: AboutComponent }
                ];

                @NgModule({
                    imports: [RouterModule.forRoot(routes)],    // Utiliza√ß√£o das rotas configuradas
                    exports: [RouterModule]
                })

                export class AppRoutingModule { }

        . Configura√ß√£o em um M√≥dulo Espec√≠fico

            . O comando CLI para criar um arquivo de m√≥dulo das rotas s√£o:

                ng generate module nome-do-modulo --routing
                
                ou

                ng g m nome-do-modulo --routing

            . Para m√≥dulos espec√≠ficos (feature modules), voc√™ pode criar um arquivo de roteamento separado, pode ser no diret√≥rio raiz. 
                Por exemplo,  se voc√™ tiver um m√≥dulo chamado `AdminModule`, a configura√ß√£o das rotas poderia ser feita assim:

                import { NgModule } from '@angular/core';
                import { RouterModule, Routes } from '@angular/router';
                import { AdminDashboardComponent } from './admin-dashboard/admin-dashboard.component';
                import { AdminSettingsComponent } from './admin-settings/admin-settings.component';

                // Configura√ß√£o das roas
                const adminRoutes: Routes = [
                    { path: 'dashboard', component: AdminDashboardComponent },
                    { path: 'settings', component: AdminSettingsComponent }
                ];

                @NgModule({
                    imports: [RouterModule.forChild(adminRoutes)],      // Utiliza√ß√£o das rotas
                    exports: [RouterModule]
                })

                export class AdminRoutingModule { } ------------------------------------------------------------+
                                                                                                                |
            . Neste cen√°rio precisamos adicionar o arquivo de m√≥dulo das rotas no componente "app.module.ts"    |
                                                                                                                |
                import { NgModule } from '@angular/core';                                                       |
                import { BrowserModule } from '@angular/platform-browser';                                      |
                import { AppComponent } from './app.component';                                                 |
                import { AppRoutingModule } from './app-routing.module';                                        |
                                                                                                                |
                @NgModule({                                                                                     |
                  declarations: [AppComponent],                                                                 |
                  imports: [BrowserModule, AdminRoutingModule], <-----------------------------------------------+
                  providers: [],
                  bootstrap: [AppComponent]
                })
                export class AppModule { }

    . Demo

        . Vamos utilizar a maneira mais padr√£o de configura√ß√£o de rotas, que ser√° no arquivo "app-routing.module.ts".

        . Fa√ßa as altera√ß√µes no arquivo "app-routing.module.ts" conforme abaixo:

            import { NgModule } from '@angular/core';
            import { RouterModule, Routes } from '@angular/router';

            // Fa√ßa os imports abaixo
            import { StockItemComponent } from './stock/stock-item/stock-item.component';
            import { CreateStockComponent } from './stock/create-stock/create-stock.component';
            import { CreateStockItemComponent } from './stock/create-stock-item/create-stock-item.component';

            // Objeto inserido
            const routes: Routes = [
                { path: 'stock-item', component: StockItemComponent },
                { path: 'create-stock', component: CreateStockComponent },
            ];

            @NgModule({
                imports: [RouterModule.forRoot(routes)],
                exports: [RouterModule]
            })
            export class AppRoutingModule { }

        . Altere a linha do arquivo "app.component.html" conforme abaixo:

            <router-outlet></router-outlet>

        . Levante o projeto 

            ng s -o

        . Execute as URLs abaixo:

            http://localhost:4200/stock-item
            http://localhost:4200/create-stock

        . Insira as linhas abaixo no arquivo "app.component.html"

            <!-- Div inserida -->
            <div>
                <span><a href="/stock-item">Stock Item</a></span>&nbsp;&nbsp;
                <span><a href="/create-stock">Create Stock</a></span>&nbsp;&nbsp;
                <span><a href="/create-product-item">Create Product Item</a></span>
            </div>

            <router-outlet></router-outlet>

        . Verifique o menu acima se est√° funcionando na p√°gina


    . Rotas Curingas e Padr√µes (Wildcards and Default)

        . Wildcards s√£o usados em rotas do Angular para lidar com situa√ß√µes em que a rota n√£o √© exatamente igual √† rota 
            definida no componente. Eles s√£o representados por um asterisco (*) e podem ser usados para capturar 
            qualquer parte da URL que n√£o seja igual √† rota definida.

            const routes: Routes = [
              { path: 'usuario/:id', component: UsuarioComponent },
              { path: 'usuario/*', component: UsuarioComponent }
            ];

            .  A rota /usuario/* √© uma rota wildcard que captura qualquer parte da URL que venha ap√≥s /usuario/. Se
                o usu√°rio acessar a URL /usuario/123/abc, a rota wildcard ser√° ativada e o componente 
                UsuarioComponent ser√° renderizado.

        . Defaults s√£o usados em rotas do Angular para definir uma rota padr√£o que deve ser usada quando nenhuma outra rota 
            √© encontrada. Eles s√£o representados por um duplo asterisco (**) e podem ser usados para direcionar qualquer 
            URL que n√£o seja igual √† rota definida para um componente espec√≠fico.

            const routes: Routes = [
              { path: '**', component: Erro404Component },
              { path: '', component: HomeComponent }
            ];

    . Demo

        . Insira as linhas abaixo no arquivo "app-routing.modules.ts":

            import { NgModule } from '@angular/core';
            import { RouterModule, Routes } from '@angular/router';
            import { StockItemComponent } from './stock/stock-item/stock-item.component';
            import { CreateStockComponent } from './stock/create-stock/create-stock.component';
            import { CreateStockItemComponent } from './stock/create-stock-item/create-stock-item.component';

            const routes: Routes = [
                { path: 'stock-item', component: StockItemComponent },
                { path: 'create-stock', component: CreateStockComponent },
                { path: '', redirectTo: '/stock-item', pathMatch: 'full' },                 // Linha inserida
                { path: '**', redirectTo: '/stock-item', pathMatch: 'full' }       // Linha inserida
            ];


            @NgModule({
                imports: [RouterModule.forRoot(routes)],
                exports: [RouterModule]
            })
            export class AppRoutingModule { }

        . Levante o projeto:

            ng s -o

        . Execute as rotas abaixo no navegador e veja o resultado:

            http://localhost:4200/
            http://localhost:4200/pagina

        . Crie as linhas abaixo no arquivo "app-routing.modules.ts":


            import { NgModule } from '@angular/core';
            import { RouterModule, Routes } from '@angular/router';

            import { StockItemComponent } from './stock/stock-item/stock-item.component';
            import { CreateStockComponent } from './stock/create-stock/create-stock.component';

            // Objeto inserido
            export enum ROUTER_TOKENS {
                STOCK_ITEM = 'stock-item',
                CREATE_STOCK = 'create-stock'
            }

            const routes: Routes = [
                { path: ROUTER_TOKENS.STOCK_ITEM, component: StockItemComponent },      // Linha alterada
                { path: ROUTER_TOKENS.CREATE_STOCK, component: CreateStockComponent },              // Linha alterada
                { path: '', redirectTo: ROUTER_TOKENS.STOCK_ITEM, pathMatch: 'full' },             // Linha alterada    
                { path: '**', redirectTo: ROUTER_TOKENS.STOCK_ITEM, pathMatch: 'full' }            // Linha alterada
            ];

            @NgModule({
                imports: [RouterModule.forRoot(routes)],
                exports: [RouterModule]
            })
            export class AppRoutingModule { }

        . Verifique se os links do menu est√£o funcionando

        . Insira as linhas abaixo no arquivo "stock-card.component.css":

            .card:hover {
                cursor: pointer;
                border-color: black;
            }

        . Insira a linha abaixo no arquivo "stock-item.component.ts":

            ...

            onInitStock() {
                this.stock = new Stock('', '', 0, 0, '');

                // Insira as linhas abaixo
                this.http.get('http://localhost:3000/stocks')
                    .subscribe(resposta => {
                        console.log(resposta);
                        this.response = resposta;
                        
                        this.productsStock = this.response.map( (stock: any) => {
                            return new Stock( stock.name, stock.code, stock.price, stock.previousPrice, stock.exchange);
                        });
                    });    
            }

            ...

        . Levante a aplica√ß√£o, acesse o link do stock-item e veja se est√° aparencendo todos os cards definido pelo arquivo "db.json":

            npx json-server db.json
            ng s -o

    . Navega√ß√£o entre links:

        . A navega√ß√£o entre links dentro das p√°ginas utiliza o routerLink, que permite criar links de navega√ß√£o para 
            atualizar o conte√∫do da p√°gina sem recarreg√°-la.

        . Navega√ß√£o est√°tica

            . A navega√ß√£o est√°tica √© feita atrav√©s do uso do atributo routerLink em um elemento HTML, por exemplo:

                <a routerLink="/admin">Ir para admin</a>

        . Navega√ß√£o por atributo

            . A navega√ß√£o por atributo √© feita atrav√©s do uso da diretiva [routerLink] em um elemento HTML, por exemplo:

                <a [routerLink]="['/admin', id]">Ir para admin</a>
                                ----------------
                                        |
                                        V 
            O valor de id √© uma vari√°vel TypeScript que √© vinculada ao atributo [routerLink]. 
            Quando o usu√°rio clica no link, o Angular atualiza o conte√∫do da p√°gina com o 
            componente associado √† rota /admin e passa o valor de id como argumento "/admin/10"


        . Vantagens de cada uma

            . A navega√ß√£o est√°tica √© mais simples e f√°cil de usar, enquanto a navega√ß√£o por atributo √© mais flex√≠vel e 
                permite criar links de navega√ß√£o mais complexos.

            . A vantagem da navega√ß√£o est√°tica √© que √© mais f√°cil de entender e usar, especialmente para links simples.

            . A vantagem da navega√ß√£o por atributo √© que permite criar links de navega√ß√£o mais complexos, como links com 
                par√¢metros ou links que dependem de condi√ß√µes.

        . Quando usar cada uma

            . Use a navega√ß√£o est√°tica quando voc√™ precisa criar um link de navega√ß√£o simples e est√°tico.

            . Use a navega√ß√£o por atributo quando voc√™ precisa criar um link de navega√ß√£o mais complexo, como um link 
                com par√¢metros ou um link que depende de condi√ß√µes.


    . Demo

        . Fa√ßa as altera√ß√µes abaixo no arquivo app.component.html:

            <div>
                <!-- Altera√ß√£o do "href" pelo [routerLink] -->
                <span><a [routerLink]="['/stock-item']">Stock Item</a></span>&nbsp;&nbsp;

                <!-- Altera√ß√£o do "href" pelo [routerLink] -->
                <span><a [routerLink]="['/create-stock']">Create Stock</a></span>&nbsp;&nbsp;
            </div>

            <router-outlet></router-outlet>

        . Altere as linhas abaixo no arquivo "stock-card.component.html":

            <!-- tag "a" inserida -->
            <a [routerLink]="['/create-stock']">
                <div class="card">
                    <img src="https://randomuser.me/api/portraits/women/{{stockItem.code}}.jpg" class="card-img-top"
                        style="width: 100%; height: auto;">

                    <div class="card-body">
                        <h5 class="card-title">{{stockItem.name}}</h5>
                        <p class="card-text">
                            R$ {{stockItem.price}} <br>
                            {{ stockItem.exchange}}
                        </p>
                    </div>
                </div>
            </a>


        . Levante o projeto e veja se a p√°gina "create-stock.component" est√° sendo chamada ao clicar num dos cards apresentados.

            ng s -o

        . Altere o componente "app.component.ts" conforme abaixo:

            ...
            import { ROUTER_TOKENS } from './app-routing.module';       // Linha inserida
            ...

            export class AppComponent implements OnInit, OnChanges, OnDestroy,
                DoCheck, AfterContentChecked,
                AfterContentInit,
                AfterViewChecked,
                AfterViewInit {

                title = 'app works!';
                public stock!: Stock;

                // Linha inserida
                readonly ROUTER_TOKENS = ROUTER_TOKENS;
                ...
            }

        . Altere o componente "app.component.html" conforme abaixo:

            <div>
                <!-- Altera√ß√£o do link pelo ROUTER_TOKENS -->
                <span><a [routerLink]="['/', ROUTER_TOKENS.STOCK_ITEM]">Stock Item</a></span>&nbsp;&nbsp;
                
                <!-- Altera√ß√£o do link pelo ROUTER_TOKENS -->
                <span><a [routerLink]="['/', ROUTER_TOKENS.CREATE_STOCK]">Create Stock</a></span>&nbsp;&nbsp;
            </div>

            <router-outlet></router-outlet>        

        . Insira as linhas abaixo no arquivo "stock-card.component.ts":

            import { Component, Input } from '@angular/core';
            import { ROUTER_TOKENS } from 'src/app/app-routing.module';     // Linha inserida
            import { Stock } from 'src/app/model/stock';
            @Component({
                selector: 'app-stock-card',
                templateUrl: './stock-card.component.html',
                styleUrls: ['./stock-card.component.css']
            })
            export class StockCardComponent {

                // Linha inserida
                readonly ROUTER_TOKENS = ROUTER_TOKENS;

                @Input()
                stockItem!: Stock;
            }

        . Altere o link abaixo no componente "stock-card.component.html":

            <!-- Altere o par√¢metro abaixo no link para a constante ROUTER_TOKENS.CREATE_STOCK -->
            <a [routerLink]="['/', ROUTER_TOKENS.CREATE_STOCK]">

            <!-- Ao inv√©s de utilizar o "routerLink" como atributo acima, podemos utilizar ele de forma est√°tica como abaixo -->
            <!-- <a routerLink="/{{ROUTER_TOKENS.CREATE_STOCK}}"> -->

                <div class="card">
                    <img src="https://randomuser.me/api/portraits/women/{{stockItem.code}}.jpg" class="card-img-top"
                        style="width: 100%; height: auto;">

                    <div class="card-body">
                        <h5 class="card-title">{{stockItem.name}}</h5>
                        <p class="card-text">
                            R$ {{stockItem.price}} <br>
                            {{ stockItem.exchange}}
                        </p>
                    </div>
                </div>
            </a>

        . Levante o projeto e veja se a p√°gina "create-stock.component" est√° sendo chamada ao clicar num dos cards apresentados.

            ng s -o

    . Para dar destaque ao link atualmente em uso podemos fazer uso do atributo "routerLinkActive".

        . O atributo routerLinkActive √© uma diretiva do Angular que √© usada para adicionar uma classe CSS a um elemento quando o link 
            associado √† rota √© ativo.

        . Quando voc√™ adiciona o atributo routerLinkActive a um elemento, o Angular verifica se o link associado √† rota √© ativo. Se for, 
            adiciona a classe CSS especificada no atributo ao elemento. Por exemplo:    

            <a routerLink="/admin" routerLinkActive="active-link">Ir para admin</a>
                                                          |
                                                          V
                                        Especifica a classe CSS que ser√° adicionada ao elemento quando 
                                        o link √© ativo.

    . Demo

        . Insira as linhas abaixo no arquivo "app.component.css":

            .active-link {
                font-size: 16px;
                font-weight: 800;
                text-shadow: 3px 3px 3px #000;
            }

            .active-link-li {
                background-color: rgb( 222,222,222);
            }

        . Altere as linhas abaixo no arquivo "app.component.html":

            <div>                                                    <!-- atributo routerLinkActive inserido -->
                <span><a [routerLink]="['/', ROUTER_TOKENS.STOCK_ITEM]"  routerLinkActive="active-link">Stock Item</a></span>&nbsp;&nbsp;

                                                                     <!-- atributo routerLinkActive inserido -->
                <span><a [routerLink]="['/', ROUTER_TOKENS.CREATE_STOCK]" routerLinkActive="active-link">Create Stock</a></span>&nbsp;&nbsp;
            </div>

            <router-outlet></router-outlet>

        . Verifique como ficou os links da p√°gina inicial ap√≥s clicar num deles.


    . Trabalhando com par√¢metros nas rotas

        . Trabalhar com par√¢metros nas rotas no Angular √© uma forma de passar dados 
            adicionais para uma rota espec√≠fica. Isso pode ser √∫til para criar rotas 
            din√¢micas que dependem de dados espec√≠ficos.

        . Existem dois tipos de par√¢metros que podem ser usados nas rotas do Angular:

            . Par√¢metros de rota: s√£o par√¢metros que s√£o passados como parte da URL da rota.

            . Par√¢metros de consulta: s√£o par√¢metros que s√£o passados como parte da string de 
                consulta da URL.
        
        . Par√¢metros de rotas:

            // Exemplo de URL com par√¢metro de rota
            http://example.com/detalhe/123


            // app.routing.modules.ts
            import { NgModule } from '@angular/core';
            import { RouterModule, Routes } from '@angular/router';
            import { HomeComponent } from './home/home.component';
            import { DetalheComponent } from './detalhe/detalhe.component';
            
            const routes: Routes = [
              { path: '', component: HomeComponent },
              { path: 'detalhe/:id', component: DetalheComponent }  
            ];        |-----------|
                            |
            @NgModule({     +---------------------------------------+                                               
              imports: [RouterModule.forRoot(routes)],              |
              exports: [RouterModule]                               |
            })                                                      |
            export class AppRoutingModule { }                       |
                                                                    |
                                                                    V
                            
                                        A rota /detalhe/:id tem um par√¢metro de rota chamado id. 
                                        O s√≠mbolo : √© usado para indicar que o par√¢metro √© obrigat√≥rio.

                                        Para acessar o valor do par√¢metro de rota, voc√™ pode usar o 
                                        servi√ßo ActivatedRoute do Angular. 

                                                                    |
                                                                    |
            import { Component, OnInit } from '@angular/core';      |
            import { ActivatedRoute } from '@angular/router';       |
                                                                    |
            @Component({                                            |
              selector: 'app-detalhe',                              |
              template: '<p>Detalhe do item {{ id }}</p>'           |
            })                                                      |
            export class DetalheComponent implements OnInit {       |
              id: string;                       +-------------------+
                                                |
                                                V
              constructor(private route: ActivatedRoute) { }
                                    |
              ngOnInit(): void {    V
                this.id =    this.route.snapshot.paramMap.get('id');
              }                                 |--------|
            }


            // Exemplo de uma tag do link no componente no html chamador
            <a [routerLink]="['/detalhe', 123]">
                {{ produto.nome }}
            </a>




        . Par√¢metros de consultas:

            // Exemplo de URL com par√¢metro de consulta
            http://example.com/detalhe?id=123


            // app-routing.modules.ts
            import { NgModule } from '@angular/core';
            import { RouterModule, Routes } from '@angular/router';
            import { HomeComponent } from './home/home.component';
            import { DetalheComponent } from './detalhe/detalhe.component';
            
            const routes: Routes = [
              { path: '', component: HomeComponent },
              { path: 'detalhe', component: DetalheComponent }
            ];             |
                           +----------------------------------------+
            @NgModule({                                             |
              imports: [RouterModule.forRoot(routes)],              |
              exports: [RouterModule]                               |
            })                                                      |
            export class AppRoutingModule { }                       |
                                                                    |
                                                                    V
 
                                            a rota /detalhe n√£o tem par√¢metros de rota. Em vez disso, 
                                            voc√™ pode passar par√¢metros de consulta usando a string 
                                            de consulta da URL.
                                            
                                            Para acessar o valor dos par√¢metros de consulta, voc√™ pode 
                                            usar o servi√ßo ActivatedRoute do Angular

                                                                    |
                                                                    |
            import { Component, OnInit } from '@angular/core';      |
            import { ActivatedRoute } from '@angular/router';       |
                                                                    |
            @Component({                                            |
              selector: 'app-detalhe',                              |
              template: '<p>Detalhe do item {{ id }}</p>'           |
            })                                                      |
            export class DetalheComponent implements OnInit {       |
              id: string;                       +-------------------+
                                                |
                                                V
              constructor(private route: ActivatedRoute) { }
                                    |
              ngOnInit(): void {    V
                this.id =   this.route.snapshot.queryParamMap.get('id');
              }                                 |-----------|
            }


            // Exemplo de uma tag do link no componente no html chamador
            <a [routerLink]="['/detalhe']" [queryParams]="{ id: 123, nome: 'Produto X' }">
                {{ produto.nome }}
            </a>

    . Demo

        . Trabalhando com Par√¢metros de consulta:

            . Realize as altera√ß√µes abaixo no arquivo "create-stock.component.ts"

                import { HttpClient } from '@angular/common/http';                          // Linha inserida
                import { Component, EventEmitter, OnInit, Output } from '@angular/core';    // Linha alterada
                import { ActivatedRoute } from '@angular/router';
                import { Stock } from 'src/app/model/stock';

                @Component({
                    selector: 'app-create-stock',
                    templateUrl: './create-stock.component.html',
                    styleUrls: ['./create-stock.component.css']
                })
                export class CreateStockComponent implements OnInit {                       // Linha alterada
                    public stock!: Stock;
                    public confirmed!: boolean;
                    
                    private code?: string | null;                                           // Linha inserida

                    public response: any;                                                 // Linha inserifda

                    @Output()
                    public eventoEmitido = new EventEmitter<Stock>();

                    constructor( private route: ActivatedRoute, private http: HttpCliente) {  // Linha alterada
                        this.stock = new Stock('', '', 0, 0, 'NASDAQ');
                    }

                    // M√©todo inserido
                    ngOnInit(): void {    
                        this.code =   this.route.snapshot.queryParamMap.get('code') || '';  

                        this.stock.code = this.code;  

                        this.onQueryProduct();                                      
                    }                                 

                    onQueryProduct() {                                                  // M√©todo inserido
                        this.http.get('http://localhost:3000/stocks/' + this.stock.code)
                        .subscribe(resposta => {
                            console.log(resposta);
                            this.response = resposta;
                            this.stock.code = this.response.code;
                            this.stock.name = this.response.name;
                            this.stock.price = this.response.price;
                            this.stock.previousPrice = this.response.previousPrice;
                            this.stock.exchange = this.response.exchange;
                        });
                    }

                    ...                 
                }

            . Realize a altera√ß√£o abaixo no arquivo "stock-cad.component.html":

                <!-- Tag abaixo alterada -->
                <a [routerLink]="['/', ROUTER_TOKENS.CREATE_STOCK]" [queryParams]="{code: stockItem.code}">
                    <div class="card">
                        <img src="https://randomuser.me/api/portraits/women/{{stockItem.code}}.jpg" class="card-img-top"
                            style="width: 100%; height: auto;">

                        <div class="card-body">
                            <h5 class="card-title">{{stockItem.name}}</h5>
                            <p class="card-text">
                                R$ {{stockItem.price}} <br>
                                {{ stockItem.exchange}}
                            </p>
                        </div>
                    </div>
                </a>

            . Levante o projeto, verifique se os links dos boxes de produtos est√£o saindo com o link "http://localhost:4200/create-stock?code=.." e
                se ao abrir a p√°gina do componente "create-stock.component" est√° sendo identificado o c√≥digo do produto do link
                acionado.

                npx json-server db.json

                ng s -o

        . Trabalhando com Par√¢metros de rotas

            . Insira a linha abaixo no arquivo "app-routing.component.ts"


                import { NgModule } from '@angular/core';
                import { RouterModule, Routes } from '@angular/router';
                import { StockItemComponent } from './stock/stock-item/stock-item.component';
                import { CreateStockComponent } from './stock/create-stock/create-stock.component';

                // Objeto inserido
                export enum ROUTER_TOKENS {
                    STOCK_ITEM = 'stock-item',
                    CREATE_STOCK = 'create-stock'
                }

                // Objeto inserido
                const routes: Routes = [
                    { path: ROUTER_TOKENS.STOCK_ITEM, component: StockItemComponent },
                    { path: ROUTER_TOKENS.CREATE_STOCK, component: CreateStockComponent},
                    { path: 'create-stock/:code', component: CreateStockComponent },        // Linha inserida
                    { path: '', redirectTo: '/stock-item', pathMatch: 'full' },       
                    { path: '**', redirectTo: '/stock-item', pathMatch: 'full' }      

                ];

                @NgModule({
                    imports: [RouterModule.forRoot(routes)],
                    exports: [RouterModule]
                })
                export class AppRoutingModule { }

            . Altere a linha abaixo no arquivo "create-stock.component.ts":

                ngOnInit(): void {    
                    this.code =   this.route.snapshot.paramMap.get('code') || '';     // Linha alterada trocado para "...paramMap"

                    this.stock.code = this.code;
                    
                    this.onQueryProduct();
                }    

            . Altere a linha abaixo no arquivo "stock-card.component.html":

                <-- Tag abaixo alterada -->
                <a [routerLink]="['/', ROUTER_TOKENS.CREATE_STOCK, stockItem.code]"> 

                    <div class="card">
                        <img src="https://randomuser.me/api/portraits/women/{{stockItem.code}}.jpg" class="card-img-top"
                            style="width: 100%; height: auto;">

                        <div class="card-body">
                            <h5 class="card-title">{{stockItem.name}}</h5>
                            <p class="card-text">
                                R$ {{stockItem.price}} <br>
                                {{ stockItem.exchange}}
                            </p>
                        </div>
                    </div>
                </a>

            . Levante o projeto, verifique se os links dos boxes de produtos est√£o saindo com o link "http://localhost:4200/create-stock?code=.." e
                se ao abrir a p√°gina do componente "create-stock.component" est√° sendo identificado o c√≥digo do produto do link
                acionado.

                npx json-server db.json

                ng s -o

        
05. User Navigation between views   13:00

PAGINA 302






    . Bibliotecas utilizadas

        . Bibliotecas criadas automaticamente na cria√ß√£o do projeto:

            . NgModule

                . Um m√≥dulo √© definido usando o decorator @NgModule, que recebe um objeto com v√°rias propriedades:

                    . declarations: lista de componentes, diretivas e pipes que fazem parte do m√≥dulo
                    . imports: lista de m√≥dulos que s√£o importados pelo m√≥dulo atual
                    . providers: lista de servi√ßos que s√£o fornecidos pelo m√≥dulo
                    . bootstrap: lista de componentes que s√£o carregados inicialmente quando o m√≥dulo √© iniciado

                . A biblioteca NgModule serve para:

                    . Organizar a aplica√ß√£o em m√≥dulos independentes e reutiliz√°veis
                    . Fornecer uma forma de gerenciar as depend√™ncias entre os componentes e servi√ßos
                    . Habilitar a funcionalidade de lazy loading, que permite carregar m√≥dulos apenas quando necess√°rio

            . BrowserModule

                . Fornece o mecanismo de renderiza√ß√£o para o navegador

                . Habilita a funcionalidade de roteamento

                . Fornece servi√ßos para trabalhar com o DOM (Document Object Model)

                . Habilita a funcionalidade de eventos do navegador

            . AppRoutingModule

                . O AppRoutingModule √© um m√≥dulo que cont√©m as configura√ß√µes de roteamento da aplica√ß√£o. 
                    Ele √© respons√°vel por:

                    . Definir as rotas da aplica√ß√£o

                    . Associar URLs a componentes espec√≠ficos

                    . Configurar par√¢metros de rota

                    . Habilitar a navega√ß√£o entre as rotas

        . Bibliotecas adicionais

            . BrowserAnimationsModule

                . Fornece as funcionalidades de anima√ß√£o para os componentes da aplica√ß√£o

                . Habilita as anima√ß√µes de transi√ß√£o entre as vistas da aplica√ß√£o

                . Permiti que os desenvolvedores criem efeitos de transi√ß√£o personalizados

                . Com a BrowserAnimationsModule, os desenvolvedores podem criar anima√ß√µes de transi√ß√£o 
                    para os componentes da aplica√ß√£o, como:

                    . Anima√ß√µes de entrada e sa√≠da de componentes

                    . Anima√ß√µes de transi√ß√£o entre as vistas da aplica√ß√£o

                    . Anima√ß√µes de mudan√ßa de estado dos componentes

            . HttpClientModule -  serve para fazer requisi√ß√µes HTTP a partir da aplica√ß√£o

                . Fornece uma API simples e f√°cil de usar para fazer requisi√ß√µes HTTP

                . Faz requisi√ß√µes HTTP para APIs externas ou para APIs dentro da pr√≥pria aplica√ß√£o

                . Manipula os dados recebidos das requisi√ß√µes HTTP

                . Trata erros e exce√ß√µes relacionadas √†s requisi√ß√µes HTTP

            . FormsModule -  serve para fornecer funcionalidades de formul√°rios para a aplica√ß√£o

                . Fornece diretivas para criar e gerenciar formul√°rios

                . Permiti a valida√ß√£o de dados de formul√°rio

                . Fornece funcionalidades de binding de dados para formul√°rios

                . Fornece diretivas, como:

                    . ngModel: diretiva para criar um binding de dados entre um formul√°rio e um componente

                    . ngForm: diretiva para criar um formul√°rio e gerenciar os dados de formul√°rio

                    . ngFormGroup: diretiva para criar um grupo de formul√°rios e gerenciar os dados de formul√°rio

                    . ngFormControl: diretiva para criar um controle de formul√°rio e gerenciar os dados de formul√°rio

                    . ngFormArray: diretiva para criar um array de formul√°rios e gerenciar os dados de formul√°rio                

