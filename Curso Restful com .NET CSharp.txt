https://www.tutorialsteacher.com/webapi

Curso Restful com .NET CSharp
-----------------------------

Criação de um projeto padrão Web API
------------------------------------

    . Web API com MVC Project

        . Acesse no menu do Visual Studio as opções:

            File -> New Project / Templates -> Visual C# -> Web -> ASP.Net Web Application (.NET Framework)

        . Defina um nome para o projeto e a solução, juntamente com a localização.

        . Acione o OK

        . Na tela de templates, acesse a opção "Web API" e desmarque a opção "Host in the cloud"
        
        . Tecle ok.

        . Na tela "Create App Service" acione o cancelar

    . Na pasta "App_Start" existe o arquivo de configuração API "WebApiConfig.cs", neste arquivo podemos configurar as rotas e outras coisas
        do web API, semelhante o que é feito no arquivo RouteConfig.cs usado para configurar as rotas MVC.

    
Criação de um projeto Web vázio
-------------------------------

    . Acesse no menu do Visual Studio as opções:

        File -> New Project / Templates -> Visual C# -> Web -> ASP.Net Web Application (.NET Framework)

    . Defina um nome para o projeto e a solução, juntamente com a localização.

    . Acione o OK

    . Na tela de templates, acesse a opção "Empty" e desmarque a opção "Host in the cloud".

    . Tecle OK.

    . Clique com o direito no projeto (ATENÇÃO, o clique tem que ser no projeto e não na solução) e escolha a opção 
        "Manage Nuget Package...".

    . Acesse o filtro "Browser" e digite "Microsoft ASP.NET Web API".

    . Escolha o item "Microsoft ASP.NET Web API" DESCONSIDERE o "Microsoft ASP.NET Web API Core".

    . Dê um clique esquerdo (Add -> New Folder) e crie as pasta "Controllers" e "Configuration".

    . Crie na pasta "Configuration" o arquivo "HelloWebAPIConfig.cs" com o conteúdo abaixo:

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Web;
        using System.Web.Http;

        namespace prjWebApiHello2.Configuration
        {
            public static class HelloWebAPIConfig
            {
                public static void Register(HttpConfiguration config)
                {
                    // Web API routes
                    config.MapHttpAttributeRoutes();

                    config.Routes.MapHttpRoute(
                        name: "DefaultApi",
                        routeTemplate: "api/{controller}/{id}",
                        defaults: new { id = RouteParameter.Optional }
                    );
                }
            }
        }

    . Clique com o direito no projeto ( Add-> New Item...) e escolha a opção (Web -> General -> Global Application Class).

    . Insira o código abaixo no arquivo Globa.asax.

        public class Global : System.Web.HttpApplication
        {
            protected void Application_Start(object sender, EventArgs e)
            {
                GlobalConfiguration.Configure(HelloWebAPIConfig.Register);
            }
        }

        . Faça os imports necessário.

        . Uma das responsabilidades deste arquivo seria de registrar as rotas do nosso projeto. Isto é feito pela linha:

            GlobalConfiguration.Configure(HelloWebAPIConfig.Register);

    . Clique com o botão direito na pasta "Controllers" acesse a opção ( Add -> Controller... );

    . Selecione "Web Api 2 Controller - Empty" e acione o botão "Add".

    . No formulário seguinte informe o nome do controller, no nossso caso "HelloController"

    . Insira o código abaixo no arquivo "HelloController".

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Net;
        using System.Net.Http;
        using System.Web.Http;

        namespace prjWebApiHello2.Controllers
        {
            public class HelloController : ApiController
            {
                public string Get()
                {
                    return "Hello World";
                }
            }
        }

    . Execute o projeto.

    . Acesse o postman:

        . Crie uma chamada com o método GET e com a URL abaixo:

            http://localhost:xxxx/api/hello


Web API Controller
------------------

    . Na pasta "Controllers" crie uma nova classe controller com o nome "ValuesController". Inclua o código abaixo nela:

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Net;
        using System.Net.Http;
        using System.Web.Http;

        namespace prjWebApiHello2.Controllers
        {
            public class ValuesController : ApiController
            {
                // GET: api/values
                public IEnumerable<string> Get()
                {
                    return new string[] { "value1", "value2" };
                }

                // GET: api/values/5
                public string Get(int id)
                {
                    return "value";
                }

                // POST: api/values
                public void Post([FromUri]string value)
                {
                    Console.WriteLine(value);
                }

                // PUT: api/values/5
                public void Put(int id, [FromBody]string value)
                {
                    Console.Write(value);
                }

                // DELETE: api/values/5
                public void Delete(int id)
                {
                    Console.Write(id);
                }
            }
        }

        . Veja que o controller extende a classe "ApiController" que dá suporte aos métodos GET, POST, PUT, DELETE, etc.

        . Os nomes dos métodos se começarem com Get, Post, Put, Delete, Patch, etc, serão chamados automaticamente de acordo com o verbo http 
            solicitado pelo "client". Porém, é possível adicionar sufixos aos nomes dos métodos, desde que eles iniciem com o nome do verbo 
            HTTP (Get, Post, ...)

            HTTP Method 	Possible Web API Action Method Name 	                Usage
            -----------     -----------------------------------                     -----
            GET 	        Get()                                                   *any name starting with Get * 	Retrieves data.
                            get()
                            GET()
                            GetAllStudent()

            POST 	        Post()                                                  *any name starting with Post* 	Inserts new record.
                            post()
                            POST()
                            PostNewStudent()

            PUT 	        Put()                                                   *any name starting with Put* 	Updates existing record.
                            put()
                            PUT()
                            PutStudent()

            PATCH 	        Patch()                                                 *any name starting with Patch* 	Updates record partially.
                            patch()
                            PATCH()
                            PatchStudent()

            DELETE 	        Delete()                                                *any name starting with Delete* 	Deletes record. 
                            delete()
                            DELETE()
                            DeleteStudent()

    . Execute o projeto, acesse o Postman e faça as chamadas dos métodos da API.

    . Outra maneira de desenvolver os métodos das APIs sem a necessidade dos nomes dos métodos da classe serem os mesmos dos verbos HTTP, 
        seria tipificar os métodos com [HttpGet], [HttpPost], etc.

    . Altere a classe ValuesController com o código abaixo:

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Net;
        using System.Net.Http;
        using System.Web.Http;

        namespace prjWebApiHello2.Controllers
        {
            public class ValuesController : ApiController
            {
                [HttpGet]
                public IEnumerable<string> Values()
                {
                    return new string[] { "value1", "value2" };
                }

                [HttpGet]
                public string Value(int id)
                {
                    return "value";
                }

                [HttpPost]
                public void SaveNewValue([FromBody]string value)
                {
                }

                [HttpPut]
                public void UpdateValue(int id, [FromBody]string value)
                {
                }

                [HttpDelete]
                public void RemoveValue(int id)
                {
                }
            }
        }


Configure Web API
-----------------

    . Podemos configurar configurar comportamentos das nossas Web API e também das rotas, formatadores, filtros, servicos,
        DependencyResolver, MessageHandlers, ParameterBindingRuels, etc.

    . Quando criamos um projeto Web API, o framework .NET criamos o WebApiConfig e Global.asax. O processo de configuração inicia
        pela classe "Global.asax" e pelo método "Application_Start()", que chama o método "GlobalConfiguration.Configure( WebConfig.Register )"


Web API Routing
---------------

    . Existem dois tipos de roteamento:

        . Convention-based Routing

        . Attribute Routing.

    . Convention-based Routing - Seria a forma como vinhamos trabalhando para definir as rotas através do arquivo WebApiConfig:

        public static class WebApiConfig
        {
            public static void Register(HttpConfiguration config)
            {
                // Enable attribute routing
                config.MapHttpAttributeRoutes();
                
                // Add default route using convention-based routing
                config.Routes.MapHttpRoute(
                    name: "DefaultApi",
                    routeTemplate: "api/{controller}/{id}",
                    defaults: new { id = RouteParameter.Optional }
                );
            }
        }

        . Primeiro habilita o roteamento "config.MapHttpAttributeRoutes();"

        . E segundo, adiciona na coleção de rotas a rota inicial:

                config.Routes.MapHttpRoute(
                    name: "DefaultApi",
                    routeTemplate: "api/{controller}/{id}",
                    defaults: new { id = RouteParameter.Optional }
                );

        . Outra forma de criar uma rota:

            public static class WebApiConfig
            {
                public static void Register(HttpConfiguration config)
                {
                    config.MapHttpAttributeRoutes();
                    
                    // define route
                    IHttpRoute defaultRoute = config.Routes.CreateRoute("api/{controller}/{id}", 
                                                        new { id = RouteParameter.Optional }, null);
                        
                    // Add route
                    config.Routes.Add("DefaultApi", defaultRoute);

                }
            }

        . O padrão utilizado nesta forma de configuração  "/api/{controller}/{id}" seria, substituir o {values} pelo que foi solicitado
            na request "values" com a constante "Controller", dessa forma chegamos "ValuesController". Já o "{id}" ele fica como opcional,
            caso for informado na request.


            Request URL 	                    Request HTTP Method 	Action method 	Controller
            -----------                         -------------------     -------------   ----------
            http://localhost:1234/api/course 	GET 	                Get() 	        CourseController
            http://localhost:1234/api/product 	POST 	                Post() 	        ProductController
            http://localhost:1234/api/teacher 	PUT 	                Put() 	        TeacherController

        . Para configurar uma rota especifica:

            public static class WebApiConfig
            {
                public static void Register(HttpConfiguration config)
                {
                    config.MapHttpAttributeRoutes();
                
                            // school route
                    config.Routes.MapHttpRoute(
                        name: "School",
                        routeTemplate: "api/myschool/{id}",
                        defaults: new { controller="school", id = RouteParameter.Optional }
                        constraints: new { id ="/d+" }
                    );

                            // default route
                    config.Routes.MapHttpRoute(
                        name: "DefaultApi",
                        routeTemplate: "api/{controller}/{id}",
                        defaults: new { id = RouteParameter.Optional }
                    );
                }
            }

            . Observe a configuração da rota especifica "myschool", ela será tratada pelo controller "SchoolController".

        Attribute Routing - Utiliza a tipificação "[Route()]"

            . Devemos habilitar no WebConfig através da chamada "config.MapHttpAttributeRoutes()".

            . Um exemplo com uso do [Route()]

                public class StudentController : ApiController
                {
                    [Route("api/student/names")]
                    public IEnumerable<string> Get()
                    {
                                return new string[] { "student1", "student2" };
                    }
                }

            . Neste caso a request poderá ser chamada pela URL http://localhost:1234/api/student/names




Parameter Binding in ASP.NET Web API
------------------------------------