https://www.learmoreseekmore.com/2021/12/dotnet6-web-api-crud-operation-with-entity-frameworkcore.html
http://www.mukeshkumar.net/articles/dotnetcore/crud-operation-in-asp-net-core-web-api-with-entity-framework-core
https://jasontaylor.dev/building-your-first-web-api-with-asp-net-core-and-visual-studio-code/
https://luis-hernandez.medium.com/creating-a-rest-web-api-in-c-with-asp-net-core-5-0-and-visual-studio-code-809ea7b4f815
https://renatogroffe.medium.com/asp-net-core-criando-uma-api-em-linux-com-vs-code-e-net-core-cli-3c042b77ebc7

https://medium.com/@josesandromendes/constru%C3%A7%C3%A3o-do-crud-de-uma-aplica%C3%A7%C3%A3o-web-em-asp-net-core-3-1-com-entity-framework-e-mvc-d626f24a23b4
http://www.mukeshkumar.net/articles/dotnetcore/crud-operation-in-asp-net-core-web-api-with-entity-framework-core
http://aspsolution.net/Code/5/5156/Create-web-API-with-ASPNET-Core-in-Visual-Studio-Code/
http://www.linhadecodigo.com.br/artigo/3655/criando-um-web-api-em-csharp.aspx
https://www.tutorialsteacher.com/webapi
https://docs.microsoft.com/pt-br/aspnet/core/mvc/controllers/routing?view=aspnetcore-6.0
https://www.sharepointcafe.net/2021/03/create-dotnet-5-api-in-visual-studio-code.html
https://www.syncfusion.com/blogs/post/how-to-develop-an-asp-net-core-application-using-visual-studio-code.aspx
https://www.c-sharpcorner.com/article/create-asp-net-core-web-application-with-visual-studio-code/

https://code-maze.com/net-core-series/

Curso Restful com .NET CSharp
-----------------------------

Criação de um projeto padrão Web API
------------------------------------

    . Web API com MVC Project

        . Acesse no menu do Visual Studio as opções:

            File -> New Project / Templates -> Visual C# -> Web -> ASP.Net Web Application (.NET Framework)

        . Defina um nome para o projeto e a solução, juntamente com a localização.

        . Acione o OK

        . Na tela de templates, acesse a opção "Web API" e desmarque a opção "Host in the cloud"
        
        . Tecle ok.

        . Na tela "Create App Service" acione o cancelar

    . Na pasta "App_Start" existe o arquivo de configuração API "WebApiConfig.cs", neste arquivo podemos configurar as rotas e outras coisas
        do web API, semelhante o que é feito no arquivo RouteConfig.cs usado para configurar as rotas MVC.

    
Criação de um projeto Web vázio
-------------------------------

    . Acesse no menu do Visual Studio as opções:

        File -> New Project / Templates -> Visual C# -> Web -> ASP.Net Web Application (.NET Framework)

    . Defina um nome para o projeto e a solução, juntamente com a localização.

    . Acione o OK

    . Na tela de templates, acesse a opção "Empty" e desmarque a opção "Host in the cloud".

    . Tecle OK.

    . Clique com o direito no projeto (ATENÇÃO, o clique tem que ser no projeto e não na solução) e escolha a opção 
        "Manage Nuget Package...".

    . Acesse o filtro "Browser" e digite "Microsoft ASP.NET Web API".

    . Escolha o item "Microsoft ASP.NET Web API" DESCONSIDERE o "Microsoft ASP.NET Web API Core".

    . Dê um clique esquerdo (Add -> New Folder) e crie as pasta "Controllers" e "Configuration".

    . Crie na pasta "Configuration" o arquivo "HelloWebAPIConfig.cs" com o conteúdo abaixo:

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Web;
        using System.Web.Http;

        namespace prjWebApiHello2.Configuration
        {
            public static class HelloWebAPIConfig
            {
                public static void Register(HttpConfiguration config)
                {
                    // Web API routes
                    config.MapHttpAttributeRoutes();

                    config.Routes.MapHttpRoute(
                        name: "DefaultApi",
                        routeTemplate: "api/{controller}/{id}",
                        defaults: new { id = RouteParameter.Optional }
                    );
                }
            }
        }

    . Clique com o direito no projeto ( Add-> New Item...) e escolha a opção (Web -> General -> Global Application Class).

    . Insira o código abaixo no arquivo Globa.asax.

        public class Global : System.Web.HttpApplication
        {
            protected void Application_Start(object sender, EventArgs e)
            {
                GlobalConfiguration.Configure(HelloWebAPIConfig.Register);
            }
        }

        . Faça os imports necessário.

        . Uma das responsabilidades deste arquivo seria de registrar as rotas do nosso projeto. Isto é feito pela linha:

            GlobalConfiguration.Configure(HelloWebAPIConfig.Register);

    . Clique com o botão direito na pasta "Controllers" acesse a opção ( Add -> Controller... );

    . Selecione "Web Api 2 Controller - Empty" e acione o botão "Add".

    . No formulário seguinte informe o nome do controller, no nossso caso "HelloController"

    . Insira o código abaixo no arquivo "HelloController".

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Net;
        using System.Net.Http;
        using System.Web.Http;

        namespace prjWebApiHello2.Controllers
        {
            public class HelloController : ApiController
            {
                public string Get()
                {
                    return "Hello World";
                }
            }
        }

    . Execute o projeto.

    . Acesse o postman:

        . Crie uma chamada com o método GET e com a URL abaixo:

            http://localhost:xxxx/api/hello


Web API Controller
------------------

    . Na pasta "Controllers" crie uma nova classe controller com o nome "ValuesController". Inclua o código abaixo nela:

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Net;
        using System.Net.Http;
        using System.Web.Http;

        namespace prjWebApiHello2.Controllers
        {
            public class ValuesController : ApiController
            {
                // GET: api/values
                public IEnumerable<string> Get()
                {
                    return new string[] { "value1", "value2" };
                }

                // GET: api/values/5
                public string Get(int id)
                {
                    return "value";
                }

                // POST: api/values
                public void Post([FromUri]string value)
                {
                    Console.WriteLine(value);
                }

                // PUT: api/values/5
                public void Put(int id, [FromBody]string value)
                {
                    Console.Write(value);
                }

                // DELETE: api/values/5
                public void Delete(int id)
                {
                    Console.Write(id);
                }
            }
        }

        . Veja que o controller extende a classe "ApiController" que dá suporte aos métodos GET, POST, PUT, DELETE, etc.

        . Os nomes dos métodos se começarem com Get, Post, Put, Delete, Patch, etc, serão chamados automaticamente de acordo com o verbo http 
            solicitado pelo "client". Porém, é possível adicionar sufixos aos nomes dos métodos, desde que eles iniciem com o nome do verbo 
            HTTP (Get, Post, ...)

            HTTP Method 	Possible Web API Action Method Name 	                Usage
            -----------     -----------------------------------                     -----
            GET 	        Get()                                                   *any name starting with Get * 	Retrieves data.
                            get()
                            GET()
                            GetAllStudent()

            POST 	        Post()                                                  *any name starting with Post* 	Inserts new record.
                            post()
                            POST()
                            PostNewStudent()

            PUT 	        Put()                                                   *any name starting with Put* 	Updates existing record.
                            put()
                            PUT()
                            PutStudent()

            PATCH 	        Patch()                                                 *any name starting with Patch* 	Updates record partially.
                            patch()
                            PATCH()
                            PatchStudent()

            DELETE 	        Delete()                                                *any name starting with Delete* 	Deletes record. 
                            delete()
                            DELETE()
                            DeleteStudent()

    . Execute o projeto, acesse o Postman e faça as chamadas dos métodos da API.

    . Outra maneira de desenvolver os métodos das APIs sem a necessidade dos nomes dos métodos da classe serem os mesmos dos verbos HTTP, 
        seria tipificar os métodos com [HttpGet], [HttpPost], etc.

    . Altere a classe ValuesController com o código abaixo:

        using System;
        using System.Collections.Generic;
        using System.Linq;
        using System.Net;
        using System.Net.Http;
        using System.Web.Http;

        namespace prjWebApiHello2.Controllers
        {
            public class ValuesController : ApiController
            {
                [HttpGet]
                public IEnumerable<string> Values()
                {
                    return new string[] { "value1", "value2" };
                }

                [HttpGet]
                public string Value(int id)
                {
                    return "value";
                }

                [HttpPost]
                public void SaveNewValue([FromBody]string value)
                {
                }

                [HttpPut]
                public void UpdateValue(int id, [FromBody]string value)
                {
                }

                [HttpDelete]
                public void RemoveValue(int id)
                {
                }
            }
        }


Configure Web API
-----------------

    . Podemos configurar configurar comportamentos das nossas Web API e também das rotas, formatadores, filtros, servicos,
        DependencyResolver, MessageHandlers, ParameterBindingRuels, etc.

    . Quando criamos um projeto Web API, o framework .NET criamos o WebApiConfig e Global.asax. O processo de configuração inicia
        pela classe "Global.asax" e pelo método "Application_Start()", que chama o método "GlobalConfiguration.Configure( WebConfig.Register )"


Web API Routing
---------------

    . Existem dois tipos de roteamento:

        . Convention-based Routing

        . Attribute Routing.

    . Convention-based Routing - Seria a forma como vinhamos trabalhando para definir as rotas através do arquivo WebApiConfig:

        public static class WebApiConfig
        {
            public static void Register(HttpConfiguration config)
            {
                // Enable attribute routing
                config.MapHttpAttributeRoutes();
                
                // Add default route using convention-based routing
                config.Routes.MapHttpRoute(
                    name: "DefaultApi",
                    routeTemplate: "api/{controller}/{id}",
                    defaults: new { id = RouteParameter.Optional }
                );
            }
        }

        . Primeiro habilita o roteamento "config.MapHttpAttributeRoutes();"

        . E segundo, adiciona na coleção de rotas a rota inicial:

                config.Routes.MapHttpRoute(
                    name: "DefaultApi",
                    routeTemplate: "api/{controller}/{id}",
                    defaults: new { id = RouteParameter.Optional }
                );

        . Outra forma de criar uma rota:

            public static class WebApiConfig
            {
                public static void Register(HttpConfiguration config)
                {
                    config.MapHttpAttributeRoutes();
                    
                    // define route
                    IHttpRoute defaultRoute = config.Routes.CreateRoute("api/{controller}/{id}", 
                                                        new { id = RouteParameter.Optional }, null);
                        
                    // Add route
                    config.Routes.Add("DefaultApi", defaultRoute);

                }
            }

        . O padrão utilizado nesta forma de configuração  "/api/{controller}/{id}" seria, substituir o {values} pelo que foi solicitado
            na request "values" com a constante "Controller", dessa forma chegamos "ValuesController". Já o "{id}" ele fica como opcional,
            caso for informado na request.


            Request URL 	                    Request HTTP Method 	Action method 	Controller
            -----------                         -------------------     -------------   ----------
            http://localhost:1234/api/course 	GET 	                Get() 	        CourseController
            http://localhost:1234/api/product 	POST 	                Post() 	        ProductController
            http://localhost:1234/api/teacher 	PUT 	                Put() 	        TeacherController

        . Para configurar uma rota especifica:

            public static class WebApiConfig
            {
                public static void Register(HttpConfiguration config)
                {
                    config.MapHttpAttributeRoutes();
                
                            // school route
                    config.Routes.MapHttpRoute(
                        name: "School",
                        routeTemplate: "api/myschool/{id}",
                        defaults: new { controller="school", id = RouteParameter.Optional }
                        constraints: new { id ="/d+" }
                    );

                            // default route
                    config.Routes.MapHttpRoute(
                        name: "DefaultApi",
                        routeTemplate: "api/{controller}/{id}",
                        defaults: new { id = RouteParameter.Optional }
                    );
                }
            }

            . Observe a configuração da rota especifica "myschool", ela será tratada pelo controller "SchoolController".

            . Note que apenas adicionamos um parâmetro a mais (new { id = @"\d+" }), que possui um regular expression, 
                e este diz que podemos ter infinitos caracteres, desde que sejam numéricos.

            . A expressão regular \d+ roteia URLs cujo parâmetro tenha 1 ou mais inteiros, o que implica no roteamento das seguintes URLs:

                · /ap/myschool/7

                · /ap/myschool/2010

            . Mas NÃO no roteamento das URLs:

                · /ap/myschool/learnmvc

                · /ap/myschool/test

                · /ap/myschool


            . Desta mesma forma, podemos utilizar regular expressions para validar E-mails

                config.Routes.MapHttpRoute(
                    name: "School",
                    routeTemplate: "api/myschool/{email}",
                    defaults: new { controller="school", id = RouteParameter.Optional }
                    constraints: new { email = @"^[\w\.=-]+@[\w\.-]+\.[\w]{2,3}$" }
                );

        Attribute Routing - Utiliza a tipificação "[Route()]"

            . Devemos habilitar no WebConfig através da chamada "config.MapHttpAttributeRoutes()".

            . Um exemplo com uso do [Route()]

                public class StudentController : ApiController
                {
                    [Route("api/student/names")]
                    public IEnumerable<string> Get()
                    {
                                return new string[] { "student1", "student2" };
                    }
                }

                . Neste caso a request poderá ser chamada pela URL http://localhost:1234/api/student/names

            . Podemos colocar o "Route(..)" na classe e neste caso todos os contexto declarados nos métodos
                serão acrescidos pelo primeiro pelo da classe e depois pelo do método:

                ...
                [ApiController]
                [Route("v1/clientes")]
                public class ClienteController : ControllerBase
                {
                    [HttpGet]
                    [Route("{cpf:regex(^\\d{{3}}.\\d{{3}}.\\d{{3}}-\\d{{2}}$)}")]
                    public async Task<ActionResult<Cliente>> Get([FromServices] DataContext context, string cpf){

                        var cliente = await context.Clientes
                                                .AsNoTracking()
                                                .FirstOrDefaultAsync(x => x.cpf ==  cpf );

                        if (cliente == null){
                            return NotFound();
                        }

                            return Ok(cliente);
                    }
                }
                ...

                . Neste caso a request poderá ser chamada pela URL http://localhost:[porta]/v1/clientes/106.523.608-58

                . Observe que no "Route" do método foi utilizado como parâmetro "{cpf:regex(...)}". Isto força com que 
                    exista uma URL com um parâmetro e restringe mais ainda com uma expressão "regex" que valida o parâmetro
                    com a mascara de CPF. Caso for chamado essa url, porém com um parâmetro que não se enquadre num CPF 
                    o próprio container .NET nem entra no método. Caso a chamada foi feita com sucesso o valor será passado
                    automaticamente para o parâmetro da assinatura do método "Get([FromServices] DataContext context, string cpf)"

                    . Poderiamos realizar a mesma configuração do parâmetro na annotation "Route("{cpf:regex..."})" na annotation
                        "HttpGet("{cpf:regex..."})".

                . [FromServices] - Usando para injetar o objeto. Neste caso, a injeção age sobre uma classe de contexto, que foi 
                    construida e declarado na classe "Startup.cs" para que pudesse ser visivel aqui:

                    // DataContext.cs
                    using System;
                    using contrato.Models;
                    using Microsoft.EntityFrameworkCore;

                    namespace contrato.Data
                    {
                        public class DataContext: DbContext
                        {
                            protected override void OnConfiguring( DbContextOptionsBuilder options ){
                                options.UseSqlServer("Server=localhost,1433;Database=desenv;User ID=sa;Password=Joao3.16");            
                                options.LogTo( Console.WriteLine );
                            }

                            public DbSet<Cliente> Clientes { get; set; }
                        }
                    }


                    // Startup.cs
                    ...
                    public void ConfigureServices(IServiceCollection services)
                    {

                        services.AddScoped<DataContext, DataContext>();     // Linha inserida
                        ...
                    }





https://www.tektutorialshub.com/asp-net-core/asp-net-core-convention-based-routing/
https://www.tektutorialshub.com/asp-net-core/asp-net-core-endpoint-routing/
https://www.tektutorialshub.com/asp-net-core/asp-net-core-startup-class/


Parameter Binding in ASP.NET Web API
------------------------------------

    . Podemos definir dois tipos de parâmetros:

        Primitivos ( int, string, decimal, etc)
        Tipos Complexos (Classes de Objetos)

    . Se o parâmetro for primitivo ele será definido como sendo da query string (FromURI), caso contrário ele considera que virá do corpo da requisição (FromBody).

    . Exemplo:

        public class StudentController : ApiController
        {
            public Student Get(int id) 
            {
                    
            }
        }

        . Neste caso a request sera: "http://localhost/api/student?id=1" com método GET.


    . Multiplos Parâmetros Primitivo:

        public class StudentController : ApiController
        {
            public Student Get(int id, string name) 
            {

            }
        }

        . A chamada será "http://localhost/api/student?id=1&name=steve" com método GET.

    . Tipos Complexos de Parâmetros:

        public class Student
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }

        public class StudentController : ApiController
        {
            public Student Post(Student stud)
            {
                
            }
        }

        . A chamada será "http://localhost/api/student" método POST:

            . Body : row : JSON 

            .   { id: 1,
                    name: "steve"
                }

    . Post método com parâmetros misturados:

        public class Student
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }

        public class StudentController : ApiController
        {
            public Student Post(int age, Student student)
            {

            }
        }


    . [FromUri] e [FromBody]

        [FromUri]   - Obtém as informações da query string da request (http://localhost:xxxx/api/student?id=1&name=steve)

            public class StudentController : ApiController
            {
                public Student Post([FromUri]Student stud)
                {

                }
            }




        [FromBody]  - Obtém as informações do corpo da request 

            public class StudentController : ApiController
            {
                public Student Post([FromBody]string name)
                {

                }
            }

        . A chamada será "http://localhost/api/student" método POST:

            . Body : x-www-form-urlencoded 

            . Um parâmetro somente com "Value" sem a "Key", neste caso "steve"

    . IMPORTANTE: [FromBody] só pode ser aplicado somente a um parâmetro primitivo, não se pode aplicar a mais que um.


Tipos de Retorno de ações dos métodos
-------------------------------------

    . Existem quatro tipos de retorno:

        Void
        
        Primitive type or Complex type

        HttpResponseMessage

        IHttpActionResult

    . Void - Não existe nenhum retorno no método da API e o Status Code retornado padrão será o "204 Ok"

        public class StudentController : ApiController
        {
            public void Delete(int id)
            {
                DeleteStudentFromDB(id);
            }
        }

    . Primitive type or Complex type - Retorna um JSon para o cliente que pode ser criado através de um tipo primitivo, ou um tipo complexo de objetos, 
            juntamente com o StatusCode "200 Ok"

        public class Student
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }

        public class StudentController : ApiController
        {
            public int GetId(string name)
            {
                int id = GetStudentId(name);
            
                return id;
            }

            public Student GetStudent(int id)
            {
                var student = GetStudentFromDB(id);
            
                return student;
            }
        }

    . HttpResponseMessage - Forma amigável de configurar uma mensagem persolizada para o client.

        public HttpResponseMessage Get(int id)
        {
            Student stud = GetStudentFromDB(id); 

            if (stud == null) {
                return Request.CreateResponse(HttpStatusCode.NotFound, id);
            }

            return Request.CreateResponse(HttpStatusCode.OK, stud);
        }  

    . IHttpActionResult 

        public IHttpActionResult Get(int id)
        {
            Student stud = GetStudentFromDB(id);
                    
            if (stud == null)
            {
                return NotFound();
            }

            return Ok(stud);
        }

        . Os métodos "NotFound" e "Ok" são implementados na classe extendida "ApiController" na classe Hello.

            ApiController Method    Description
            --------------------    -----------
            BadRequest() 	        Creates a BadRequestResult object with status code 400.
            Conflict() 	            Creates a ConflictResult object with status code 409.
            Content() 	            Creates a NegotiatedContentResult with the specified status code and data.
            Created() 	            Creates a CreatedNegotiatedContentResult with status code 201 Created.
            CreatedAtRoute() 	    Creates a CreatedAtRouteNegotiatedContentResult with status code 201 created.
            InternalServerError()   Creates an InternalServerErrorResult with status code 500 Internal server error.
            NotFound() 	            Creates a NotFoundResult with status code404.
            Ok() 	                Creates an OkResult with status code 200.
            Redirect() 	            Creates a RedirectResult with status code 302.
            RedirectToRoute() 	    Creates a RedirectToRouteResult with status code 302.
            ResponseMessage() 	    Creates a ResponseMessageResult with the specified HttpResponseMessage.
            StatusCode()         	Creates a StatusCodeResult with the specified http status code.
            Unauthorized() 	        Creates an UnauthorizedResult with status code 401. 
