Curso de Javascript
-------------------

https://www.javascripttutorial.net/

1. Instalações

    . Instalação do Nodejs

        sudo apt-get install nodejs
        sudo apt-get install npm

        ou

        sudo apt-get install curl python-software-properties
        curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -
        sudo apt-get install -y nodejs
        node -v
        npm -v

    . Instalação do VSCode:

        . Acessar a pagina de download da microsoft:

            https://code.visualstudio.com/download

        . Baixar o arquivo .deb 

        . Abrir o terminal e acessar a pasta Downloads

        . Executar o comando abaixo:

            sudo dpkg -i code_1.37.1-1565886362_amd64.deb

        . Atalhos

            Alt + 1, 2, 3, 4, ...	Posiona na aba no.
            Ctrl + b				Ativar o menu lateral esquerdo 
            Ctrl + Alt + P			Para ativar a linha de comandos 
            Ctrl + P 				Localiza um determinado arquivo
            Ctrl + W				Fecha a aba corrente
            Ctrl + Shift + W		Fecha todas as abas abertas

            Ctrl + Rolagem do Mouse	
                    sobre as abas 
                    abertas			Faz a rolagem das abas.

            Ctrl + K + C ou 
            Ctrl + /				Comenta linha atual, ou bloco selecionado

            Ctrl + K + U ou
            Ctrl + /				Descomenta linha, ou bloco selecionado.

            Ctrl + Shift + 
                    Acento Agudo	Abre o terminal na parte inferior

            Ctrl + X				Apaga linha
            Ctrl + H				Localiza e atualiza uma expressão
            Ctrl + F2				Selecione um texto e pressionando Ctrl + F2 
                                    muda todos os textos equivalente a medida
                                    que vai se digitando
            Alt + Arrow(up/Down)    Move a linha para cima, ou para baixo.
            Ctrl + Shift + O		Abre a lista de funções/métodos da classe atual
            Ctrl + G				Posicionar na linha No. que for digitado
            Alt + Backspace			Apaga palavra inteira a esquerda
            Ctrl + Shift + .		Mostra os métodos da classe
            Ctrl + Shift + L		Altera dinamicamente em todo o arquivo a palavra que está sendo alterada
            Ctrl + M				Para cercar um conjunto de tags numa página HTML ( Precisa de configurar, verifique como fazer em "Configurações" logo abaixo)
            cTRL + Ctrl + -			Para apagar uma tag que abraça um conjunto de tags HTML ( Precisa de configurar, verifique como fazer em "Configurações" logo abaixo)


        . Instale as seguinte Extensões:

            open-in-browser			- Shortcut Ctrl+Alt+O, Alt + B
            Material Icon Theme
            Numbered Bookmarks		- Shortcut Ctrl+Shit+1,2,3... , Ctrl+1,2,3...
            HTML CSS Support		- Ctrl + Space mostra as opções
            Intellisense for CSS Class
            JS-CSS-HTML Formatter	- Ctrl + Shift + I
            Live Server				- File -> Open Folder, Alt + L + O / Click no simbolo na barra do rodapé
                                    - Extensao que exibe online as alteraçoes feitas a página 
                                        no navegador.
                                    - Acesse o setting e inclua  "liveServer.settings.CustomBrowser": "chrome"
                                    - Para colocar o VSCode do lado do navegador clique Super + Left no VSCode
                                        e Super + Left no navegador
            Rainbow Brackets		- Ajuda identificar a abertura e fechamentos dos parenteses
            JQuery Code Snippets	- Basta digitar algo que comece com "jq"
            tslint - Plugin para apontar ausências no padrão de programação, deixando em vermelhos os pontos que não estão
                        em conformidade. 

                . Quando for trabalhar numa pasta de projeto, digite Ctrl + Shift + P e digitar "tslint", 
                    surge vários comandos especificos do plugin, escolha "Enable Workspace Library Execution"

                . Acrescente o trecho abaixo no arquivo launch.json para habilitar o plugin:

                    // Dentro do array "configurations"
                    "editor.codeActionsOnSave": {
                        "source.fixAll.tslint": true
                    }

        . Configurações:

            . Digite Ctrl K+S, localize o item "Delete Line" e configure Ctrl + D
            . Acesse View / Minimap para retirar o scroll de código da direita
            . Acessar configurações, ir em "Settings", Text editors, Sugestions:
                . Na opção "Accept Suggestion On Enter" deixar como off
                . Na opção "Suggest: Insert Mode" deixar como replace
                . Na opção "Quick Suggestions Delay" deixar como 1000
            . Acesse "Keyboard Shortcuts" em configurações:
                . Digite "Emmet: Wrap..." e altere o "Keybinding" para "Alt + M"
                    . De agora em diante, ao editar uma página HTML e quiser cercar um bloco de tags com uma outra, 
                        basta:
                        . Selecionar o bloco
                        . Digitar "Alt + M"
                        . Informar a tag que deseja colocar, somente a identificação sem "<>", por exemplo: "div"
                . Digite "Emmet: Remove Tag" e altere o "Keybinding" para "Alt+Shift+-", o "-" deve ser do bloco numerico
                    . De agora em diante, se precisar apagar uma tag HTML que cerca um conjunto de outras tags, basta posicioinar
                        o cursor sobre a "TAg" que deseja apagar e pressionar "Ctrl+Shift+-"
            . Digite "Ctrl+Shift+P" e digite "Preferência: Abrir as Configurações do Usuário (JSON)"
                . Digite a configuração abaixo:

                    ...
                    "editor.linkedEditing": true,
                    "html.format.unformatted": "input",
                    "workbench.tree.indent": 20,
                    "workbench.tree.renderIndentGuides": "always",
                    "workbench.colorCustomizations": {
                        "tree.indentGuidesStroke": "#c8e0be"
                    }
            . Acesse Configurações -> Profile -> Import Profile 
                . Informe o link "https://vscode.dev/profile/github/12bd0215e34ffe344361b7dcf767842b" para resgatar as configurações para desenvolvimento em .NET

2. Começando
------------

    . DevTools do Browser

        . Recurso disponível nos navegadores, acessível através da tecla F12.

        . Fornece recursos para os desenvolvedores verificar a execução dos componentes da página, visualizar e editar o HTML, CSS e JavaScript.

            . Inspeção de elementos - a capacidade de editar o código HTML e CSS em tempo real, na guia "Elements"
            . Depuração de JavaScript  - Nas guias Console e Sources.
            . Emulação de dispositivos
            . Análise de desempenho - medir a performance do site, incluindo tempo de carregamento, uso de recursos e consumo de memória.

        . Demo

            . Crie a página abaixo:

                <!DOCTYPE html>
                <html lang="en">

                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Document</title>
                </head>

                <body>

                    <script>
                        console.log('Hello, devtools!');

                        // the following code causes an error
                        let greeting = msg;
                    </script>

                </body>

                </html>

            . Execute ela no navegador

            . Acione a tecla F12

                . Depuração de código
                    
                    . Acesse a guia "Sources" 

                    . Coloque um breakpoint na linha do "console.log('Hello, devtools!');"

                    . Recarregue a página e faça o debugger através da barra de ferramentas passo a passo

                        . Observe que podemos, durante o debugger, verificar conteúdo de variáveis na tela do "Console"

                        . Podemos dar prosseguimento ao debugger através das teclas:

                            F10 - Vai para a próxima linha
                            F11 - Se for uma subrotina, vai para a linha dessa sub
                            Shift + F11 - Se for uma subrotina, volta para a rotina chamadora
                            F8 - Continua a execução, indo para o próximo BreakPoint se houver.

                    . Observe que na linha "let greeting = msg;" ocorrerá um erro devido a variável "msg" não ter sido declarada.

                . Inpeção de Elementos

                    . Acesse a guia "Elements"

                    . Consulte as tags do HTML, no lado esquerdo

    . Exemplo "Hello World"

        . Existem diversas formas de inserir um bloco javascript na sua página, como por exemplo:

            . Embutido na própria página:

                <script>
                    ...
                </script>

            . Através de um arquivo externo:

                <script src="js/app.js"></script>

        . Existem dois atributos que podemos definir para carregar os scripts:

            . async

            . defer

        . O atributo "async" instrui o navegador para executar o script de forma assíncrona

            <script async src="service.js"></script>
            <script async src="app.js"></script>

        . O atributo "defer" instrui o navegador executar o script depois que a página for carregada

            <!DOCTYPE html>
            <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <title>JavaScript defer demonstration</title>
                    <script defer src="defer-script.js"></script>
                </head>
                <body>
                </body>
            </html>


2. Fundamentos
--------------

    . Ponto e virgula ";"

        . Colocado ao termino de cada linha de execução, porém não obrigatório

            let message = "Welcome to JavaScript";

            console.log(message);         

    . Chaves "{}" 

        . Delimita um bloco de linhas de comandos:

            if (window.localStorage) {
                console.log('The local storage is supported');
            }

    . Comentários

        "//"    Comenta uma linha
        "/* */" Comenta um bloco de linhas

    . Palavras reservadas

        . Definidas no ECMA-262

            break	    case	        catch
            continue	debugger	    default
            else	    export	        extends
            function	if	            import
            new	        return	        super
            throw	    try	            null
            void	    while	        with
            class	    delete	        finally
            in	        switch	        typeof
            yield	    const	        do
            for	        instanceof	    this
            var		        

        . Definidas no ECMA-252

            enum	    implements	    let
            protected	private	        public
            await	    interface	    package
            implements	public

    . Variáveis

        . Podemos utilizar três formas para declarar variáveis:

            . "let" Tem escopo de bloco, o que significa que uma variável declarada com let é visível apenas 
                    dentro do bloco em que foi declarada (por exemplo, dentro de chaves {}).

                    Hoisting: Variáveis declaradas com let também são içadas, mas não podem ser acessadas antes 
                    de sua declaração no código. Isso resulta em um erro de referência se você tentar usá-las 
                    antes da declaração.

                    Reatribuição: Pode ser reatribuída, mas não pode ser redeclarada no mesmo escopo.

                    Exemplo:

                        function example() {
                        // console.log(a); // ReferenceError: Cannot access 'a' before initialization
                        let a = 10;
                        console.log(a); // 10
                        }

                        example();

                        let b = 20;
                        // let b = 30; // SyntaxError: Identifier 'b' has already been declared
                        b = 30; // Reatribuição permitida
                        console.log(b); // 30

            . "var" tem escopo de função, o que significa que uma variável declarada com var é visível 
                    em toda a função em que foi declarada.
                    
                    Hoisting: Variáveis declaradas com var são "içadas" (hoisted) para o topo do seu escopo, 
                    mas a inicialização não é içada. Isso significa que você pode usar a variável antes de sua declaração, 
                    mas ela terá o valor undefined até que a linha de declaração seja executada.

                    Reatribuição: Pode ser reatribuída e redeclarada dentro do mesmo escopo.

                    Exemplo:

                        function example() {
                            console.log(x); // undefined (hoisting)
                            var x = 10;
                            console.log(x); // 10
                        }

                        example();

                        var y = 20;
                        var y = 30; // Redeclaração permitida
                        console.log(y); // 30


            . "const"   Também tem escopo de bloco, assim como let.

                        Hoisting: Variáveis declaradas com const são içadas, mas não podem ser acessadas antes de sua declaração 
                        no código, resultando em um erro de referência.

                        Reatribuição: Não pode ser reatribuída nem redeclarada. Uma vez que uma variável é atribuída com const, 
                        seu valor não pode ser alterado. No entanto, se a variável for um objeto ou um array, suas propriedades 
                        ou elementos podem ser modificados.

                        Exemplo:

                            function example() {
                                // console.log(c); // ReferenceError: Cannot access 'c' before initialization
                                const c = 10;
                                console.log(c); // 10
                            }

                            example();

                            const d = 20;
                            // const d = 30; // SyntaxError: Identifier 'd' has already been declared
                            // d = 30; // TypeError: Assignment to constant variable

                            const obj = { name: "Alice" };
                            obj.name = "Bob"; // Modificação permitida
                            console.log(obj.name); // Bob

                            const arr = [1, 2, 3];
                            arr.push(4); // Modificação permitida
                            console.log(arr); // [1, 2, 3, 4]

        . Resumo

            var:    Escopo de função, içamento com inicialização undefined, permite reatribuição e redeclaração.
            let:    Escopo de bloco, içamento sem inicialização, permite reatribuição, mas não redeclaração.
            const:  Escopo de bloco, içamento sem inicialização, não permite reatribuição nem redeclaração, 
                    mas permite a modificação de objetos e arrays.
            
            Escolher entre let, var e const depende do comportamento desejado para a variável. Em geral, let e const 
            são preferidos sobre var devido ao seu escopo de bloco e comportamento mais previsível.

    . Tipos de dados

        . O valor da variável define o tipo de dado.

            Exemplo:

                let counter = 120; // counter is a number
                counter = false;   // counter is now a boolean
                counter = "foo";   // counter is now a string

        . Para saber o tipo atual da variável podemos usar a função "typeof":

            Exemplo:

                let counter = 120;
                console.log(typeof(counter)); // "number"

                counter = false; 
                console.log(typeof(counter)); // "boolean"

                counter = "Hi";
                console.log(typeof(counter)); // "string"

        . "undefined" são variáveis declaradas, mas não iniciadas. 

            Exemplo:

                let counter;
                console.log(counter);        // undefined
                console.log(typeof counter); // undefined

        . Os tipos de dados (data types) podem ser classificados em dois grandes grupos: tipos primitivos e tipos de referência (objetos). 
            Aqui está uma visão geral dos tipos de dados disponíveis na linguagem:
        
        . Tipos Primitivos:

            Number
          
                . Representa números inteiros e de ponto flutuante.

                . Exemplo:

                    let age = 25;
                    let price = 19.99;

            String

                . Representa uma sequência de caracteres.

                . Utilizamos "+" para concatenar dois valores strings, ou "`" acento craseado, ou +=

                . Backslash para representar caracteres especiais:

                    Windows line break: '\r\n'
                    Unix line break: '\n'
                    Tab: '\t'
                    Backslash '\'

                . The following example uses the backslash character to escape the single quote character in a string:

                . Para comparar duas string utilize os operadores >, >=, <, <=, == 

                . Exemplo:

                    let name = "Alice";
                    let greeting = 'Hello, world!';

                    let msg = greeting + " " + name;    // Hello, World! Alice

                    // Acento craseado, só funciona assim
                    let msg2 = `${greeting} ${name}`;   // Hello, World! Alice 

                    let msg3 = 'Hello, World";

                    msg3 += " ";
                    msg3 += "Alice";        // Hello, World Alice


                    name[0] = "a";
                    console.log(name); // "Alice"   Podemos pegar o conteúdo como array, mas não altera-lo

                    let str = 'I\'m a string!';         // I´m a string

            Boolean

                . Representa um valor verdadeiro (true) ou falso (false).

                . Exemplo:

                    let isActive = true;
                    let isComplete = false;

            Undefined
            
                . Representa uma variável que foi declarada, mas não inicializada.

                . Exemplo:

                    let x;
                    console.log(x); // undefined

            Null

                . Representa a ausência intencional de qualquer valor de objeto.

                . Exemplo:

                    let y = null;

                    console.log(y);     // object

            Symbol (Introduzido no ES6)

                . Representa um valor único e imutável, frequentemente usado como identificador único para propriedades de objetos.

                . Veremos mais detalhes deste tipo mais a frente.

                . Exemplo:

                    let sym = Symbol('description');



            NaN (Not a Number)

                . Indica um número inválido

                . Exemplo:

                    console.log('a'/2); // NaN;

            BigInt (Introduzido no ES11)

                . Representa números inteiros de precisão arbitrária.

                . Exemplo:
            
                    let bigInt = 1234567890123456789012345678901234567890n;        

        . Tipos de Referência (Objetos)
        
            Object

                . Representa uma coleção de propriedades, onde cada propriedade é uma associação entre um nome (ou chave) e um valor.

                . Exemplo:

                    let contact = {
                        firstName: 'John',
                        lastName: 'Doe',
                        email: 'john.doe@example.com',
                        phone: '(408)-555-9999',
                        address: {
                            building: '4000',
                            street: 'North 1st street',
                            city: 'San Jose',
                            state: 'CA',
                            country: 'USA'
                        }
                    }

                    console.log( contact.phone);
                    console.log( contact["phone"]);
                    console.log( contact.address.street );

            Array

                . Um tipo especial de objeto usado para armazenar listas ordenadas de valores.
        
                . Exemplo:

                    let numbers = [1, 2, 3, 4, 5];

                    let scores = new Array(9,10,8,7,6);

                    let athletes = new Array(3); 

                . Observe se usarmos a criação do array com o construtor Array(1,2,...), precisamos do operador "new".

                . Para adicionar um elemento ao array utilizamos o método "push", ou "unshift" para adicionar o item no inicio:

                    let seas = ['Black Sea', 'Caribbean Sea', 'North Sea', 'Baltic Sea'];
                    seas.push('Red Sea');   // Adiciona no final do array

                    console.log(seas);  // [ 'Black Sea', 'Caribbean Sea', 'North Sea', 'Baltic Sea', 'Red Sea' ]

                    seas.unshift('Blue Sea');   // Adiciona no inicio do array

                    console.log(seas);  // [ 'Blue Sea', 'Black Sea', 'Caribbean Sea', 'North Sea', 'Baltic Sea', 'Red Sea' ]

                . Para eliminar um elemento ao array utilizamos "pop", ou "shift"

                    let seas = ['Black Sea', 'Caribbean Sea', 'North Sea', 'Baltic Sea'];
                    const lastElement = seas.pop();         // Remove o item no final do array
                    console.log(lastElement); 

                    const firstElement = seas.shift();

                    console.log(firstElement);              // Remove o item do inicio do array

                . Para localizar um item no array utilizamos o método "indexOf":

                    let seas = ['Black Sea', 'Caribbean Sea', 'North Sea', 'Baltic Sea'];
                    let index = seas.indexOf('North Sea');

                    console.log(index); // 2

                . Para verificar se um objeto é array utilizamos o metodo "isArray":

                    console.log(Array.isArray(seas)); // true

            Function

                . Um objeto que pode ser chamado (invocado) para executar um bloco de código.

                . Exemplo:

                    const showMessage = () => {
                      console.log("Hello World!");
                    }

                    showMessage();

            Date
            
                . Um objeto que representa uma data e hora.

                . Exemplo:
            
                    let now = new Date();

            RegExp
            
                . Um objeto que representa uma expressão regular, usada para correspondência de padrões em strings.
            
                . Exemplo:
            
                    let pattern = /ab+c/;

            Map
            
                . Um objeto que armazena pares chave-valor e lembra a ordem original das chaves.
            
                . Exemplo:

                    let map = new Map();
                    map.set('key1', 'value1');

            Set

                . Um objeto que armazena valores únicos de qualquer tipo, seja primitivo ou de referência.

                . Exemplo:
            
                    let set = new Set();
                    set.add(1);
                    set.add(2);

        . Exemplo de Uso
        
            . Aqui está um exemplo que demonstra o uso de vários tipos de dados em JavaScript:

                // Tipos Primitivos
                let age = 25; // Number
                let name = "Alice"; // String
                let isActive = true; // Boolean
                let x; // Undefined
                let y = null; // Null
                let sym = Symbol('description'); // Symbol
                let bigInt = 1234567890123456789012345678901234567890n; // BigInt

                // Tipos de Referência
                let person = { name: "Alice", age: 30 }; // Object
                let numbers = [1, 2, 3, 4, 5]; // Array
                function greet() { console.log("Hello, world!"); } // Function
                let now = new Date(); // Date
                let pattern = /ab+c/; // RegExp
                let map = new Map(); // Map
                map.set('key1', 'value1');
                let set = new Set(); // Set
                set.add(1);
                set.add(2);

                console.log(age, name, isActive, x, y, sym, bigInt);
                console.log(person, numbers, greet, now, pattern, map, set);

    . Objetos

