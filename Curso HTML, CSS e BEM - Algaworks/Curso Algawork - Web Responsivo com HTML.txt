Curso Algawork - Web Responsivo com HTML5, CSS3 e BEM


Site de frases do mussum: https://mussumipsum.com/



Aula 2.2 - Estrutura de uma página HTML
---------------------------------------
    
    . Digitando "!" temos o seguinte código criado:

        <!-- Estrutura básica de um HTML -->
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=, initial-scale=1.0">
            <title>Título</title>
        </head>
        <body>
            <form action="" method="" >

            </form>
        </body>
        </html>
    
    . Digitando "html:5" temos:

        <!DOCTYPE html>
        <html lang="pt-br">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document</title>
        </head>
        <body>
            
        </body>
        </html>


Aula 2.3. DOCTYPE e codificação
-------------------------------

    <!-- Tag meta para identificar o tipo de "encoding" do html para -->
    <!-- evitar a exibição de caracteres especiais -->
    <meta charset="UTF-8">

    . Se não for colocado esta tag o browser irá pelo encoding padrão dele e 
        consequentemente letras acentuadas não serão apresentados como deveriam
        e sim com caracteres especiais.

    . Tag Link

        <link rel="stylesheet" type="text/css" href="estilo.css" >

    . Scripts

        <script src="scripts/seu-script.js"></script>

    . Semântica do HTML 5

        +-----------------------------------------------------------------------+
        |                           <header>                                    |
        |                             <nav>                                     |
        +-----------------------------------------------------------------------+
        |                  <section>                    |        <aside>        |
        |     +------------------------------------+    |                       |
        |     |            <article>               |    |                       |
        |     |     +-----------------------+      |    |                       |
        |     |     |      <header>         |      |    |                       |
        |     |     +-----------------------+      |    |                       |
        |     +------------------------------------+    |                       |
        |                                               |                       |
        |     +------------------------------------+    |                       |
        |     |            <article>               |    |                       |
        |     |     +-----------------------+      |    |                       |
        |     |     |      <header>         |      |    |                       |
        |     |     +-----------------------+      |    |                       |
        |     +------------------------------------+    |                       |
        +-----------------------------------------------------------------------+
        |                          <footer>                                     |
        +-----------------------------------------------------------------------+
        
    . Uma estrutura inicial completa para páginas HTML 5, com header, section, article, etc.

        <!DOCTYPE HTML>
        <html lang="pt-br">
        <head>
            <meta charset="utf-8"/>
            <meta content="width=device-width, initial-scale=1, maximum-scale=1" name="viewport">
            <title>Título da Página (Estrutura básica de uma página com HTML 5)</title>
            <link href="css/seu-stylesheet.css" rel="stylesheet"/>
            <script src="scripts/seu-script.js"></script>
        </head>
        <body>
            <header>
                <nav>
                    <ul>
                        <li>Home</li>
                        <li>Contato</li>
                    </ul>
                </nav>
            </header>

            <section>
                <article>
                    <header>
                        <h2>O título do artigo é aqui</h2>
                        <p>Publicado em <time datetime="2015-03-09T13:00:24+01:00">09 de Março de 2015</time> 
                            por <a href="#">Author</a> - <a href="#comments">30 comentários</a></p>
                    </header>
                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
                    tempor incididunt ut labore et dolore magna aliqua.</p>
                </article>

                <article>
                    <header>
                        <h2>O título do artigo é aqui</h2>
                        <p>Publicado em <time datetime="2015-03-09T13:00:24+01:00">09 de Março de 2015</time> por 
                        <a href="#">Author</a> - <a href="#comments">15 comentários</a></p>
                    </header>
                    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor 
                    incididunt ut labore et dolore magna aliqua.</p>
                </article>
            </section>

            <aside>
                <h2>Entre em contato</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt 
                ut labore et dolore magna aliqua.</p>
            </aside>

            <footer>
                <p>Copyright 2015 Código Fonte©</p>
            </footer>
        </body>
        </html>

    . <header>

        O novo elemento <header> do HTML5 é usado para definir o cabeçalho de uma página ou seção, 
        e pode conter logo, títulos, menu de navegação, campo de busca, etc.

        <header>
            <nav>
                <ul class="menu">
                    <li><a href="inicio.html">Início</a></li>
                    <li><a href="quem-somos.html">Quem somos</a></li>
                    <li><a href="servicos.html">Serviços</a></li>
                    <li><a href="contato.html">Contato</a></li>
                </ul>
            </nav>

    . <nav>

        O novo elemento <nav> do HTML5 serve para agrupar uma lista de links para outras partes do site, 
        seja essa lista de navegação local ou global. Esses blocos de links podem estar em diferentes 
        partes do layout, como no cabeçalho ou no rodapé.

    . <section>

        O novo elemento <section> do HTML5 é o menos especifico entre as novas tags. A diferença do 
        <section> para um <div> é que o primeiro serve para dividir o conteúdo em diferentes seções, 
        que podem conter elementos como <header> ou <article>, enquanto o segundo divide qualquer 
        conteúdo, sem uma finalidade específica.

        <section>
            <article>
                <header>

                </header>
            </article>
        </section>

    . <article>

        O novo elemento <article> do HTML5 serve para identificar um conteúdo independente e de maior 
        relevância dentro da página, que pode ser distribuido via feed, como um post, artigo ou bloco 
        de comentários.

        O elemento <article> pode conter outros elementos como <header> ou <footer>.

        <article>
            <header>
                <h1>Entendendo o elemento Article</h1>
                <p>Publicado em <time pubdate datetime="2011-09-01">01 de Setembro de 2011</time></p>
            </header>
            ...conteúdo...
            <footer>
                <small>© Todos os direitos reservados.</small>
            </footer>
        </article>

    . <aside>

        O elemento <aside> é utilizado quando precisamos criar um conteúdo de apoio/adicional ao conteúdo 
        principal. Por exemplo, ao falar de HTML semântico, podemos indicar ao leitor outros conteúdos 
        sobre a linguagem HTML como sugestão de leitura complementar.

        <div id="primary">
            <article>
                <header>
                    <h1>Entendendo o elemento Aside</h1>
                    <p>Publicado em <time pubdate datetime="2011-09-01">01 de Setembro de 2011</time></p>
                </header>
                (...)
                <aside>
                    <h2>Curiosidades sobre o Aside</h2>
                    (...)
                </aside>
                <footer>
                     <p>Esse post foi publicado na categoria <a href="#" title="HTML5">HTML5</a>
                </footer>
            </article>
        </div>
        
    . <footer>

        O elemento <footer> representa um rodapé de um documento, como a área presente no final de uma página web. 
        Normalmente é utilizado para descrever informações de autoria, como nome e contato do autor, e data de 
        criação do conteúdo.

        <footer>
            <p>Escrito por Estevão Dias</p>
            <p>Publicado em 25/03/2017 </p>
        </footer>    


Aula 2.4. Primeiras Tags: Títulos, quebras de linhas e parágrafos
-----------------------------------------------------------------

    . Tab <H1>, <H2>, ...<H6>
        
        Esta tag é responsável por destacar um cabeçalho de texto, um título, o no. 1
        dará ao texto o maior tamanho e o 6 será o menor.

        Os mecânimos de busca, como o google, utiliza o conteúdo colocado entre as tags 
        para selecionar a página.
        
Aula 2.7. Imagens
-----------------
    . Tag para colocar imagem na página:
    
        <img src="" width="" height="" alt="">

Aula 2.8. Ancoras
-----------------

    . Tag para abrir uma URL:

        <!-- o target neste caso abre a página numa nova guia -->
        <a href="http://www.google.com.br" target="_blank">Google</a>

    . Tag para abrir o aplicativo de email para envio:

        <a href="mailto:maransi@gmail.com">Contato</a>

Aula 2.9. Elementos Estruturais
-------------------------------

    <article id="browsers">
        <header>
            <h1>Main page heading here</h1>
            <p>Posted by John Doe</p>
          </header>
        </body>
        <h2>Google Chrome</h2>
        <p>Google Chrome is a web browser developed by Google, released in 2008. Chrome is the world's most popular web browser today!</p>
        
        <aside>
            <p>The Epcot center is a theme park at Walt Disney World Resort featuring exciting attractions, international pavilions, award-winning fireworks and seasonal special events.</p>
        </aside>
        
        <footer>
            <p>Author: Hege Refsnes</p>
            <p><a href="mailto:hege@example.com">hege@example.com</a></p>
        </footer>    
    </article>


    <style>
        header {
            display: block;
        }   

        .all-browsers {
            margin: 0;
            padding: 5px;
            background-color: lightgray;
        }

        .all-browsers > h1 {
            margin: 10px;
            padding: 5px;
        }

        .browsers {
            background: white;
        }

        .browsers > h2, p {
            margin: 4px;
            font-size: 90%;
        }  
        aside {
            width: 30%;
            padding-left: 15px;
            margin-left: 15px;
            float: right;
            font-style: italic;
            background-color: lightgray;
        }    

        footer {
            text-align: center;
            padding: 3px;
            background-color: DarkSalmon;
            color: white;
        }                       
    </style>


Aula 3.0 - overflow
-------------------

. A propriedade overflow especifica quando o conteúdo de um elemento de nível de bloco deve ser cortado, 
    exibido com barras de rolagem ou se transborda do elemento.

. Valores possiveis:

    overflow:  visible | hidden | scroll | auto | inherit

    visible - Valor padrão. O conteúdo não é cortado e pode ser renderizado para fora da caixa de conteúdo.
    hidden - O conteúdo é cortado e nenhuma barra de rolagem é exibida.
    scroll - O conteúdo é acessível através de barras de rolagem que são exibidas mesmo que o conteúdo não 
                precise. Isso evita o problema de barras de rolagem aparecendo e desaparecendo quando o 
                conteúdo é dinâmico. Impressoras podem imprimir o conteúdo vazado.
    auto - Depende do navegador utilizado. Navegadores desktop como o Firefox geralmente exibem barras de 
            rolagem apenas quando necessário.

. Exemplo: 

    p {  
        width: 12em;
        border: dotted;
        overflow: visible;   /* Exibe o conteúdo de forma vazada, fora da caixa de conteúdo */ 
    }

    p { overflow: hidden; /* Esconde o conteúdo excedente */ }

    p { overflow: scroll; /* Sempre exibe barras de rolagem */ }

    p { overflow: auto; /* Exibe barras de rolagem apenas se necessário */ }

. Ainda podemos utilizar os eixos x e y para definir o scroll:

    overflow-x specifies what to do with the left/right edges of the content.
    overflow-y specifies what to do with the top/bottom edges of the content.


Aula 3.1. 3.2. 3.3. O que é CSS
---------------------

. Digitação inline do estilo, dentro da tag.

    <!-- Estilo inline -->
    <p style="color : red">Texto</p>

. Estilo incorporado do estilo:

    <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document</title>

            <!-- Estilo Incorporado -->
            <stile>
                h1  { 
                        color : blue; 
                    }

                p   {
                        color : red;
                    }
            </stile>
        </head>
        <body>
            <form action="" method="" >
                <h1>Titulo</h1>
                
                <p>Texto</p>
            </form>

        </body>
    </html>

. Estilo com arquivos externos.

    . Criar um arquivo separado .css

                h1  { 
                        color : blue; 
                    }

                p   {
                        color : red;
                    }

    . Referencia dentro da página o css:

        <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Document</title>

                <!-- Estilo Arquivo Externo -->
                <link rel="stylesheet" href="css/estilo.css">
            </head>
            <body>
                <form action="" method="" >
                    <h1>Titulo</h1>
                    
                    <p>Texto</p>
                </form>

            </body>
        </html>

. A especificidade/prioridade entre os estilos:

    1. Inline
    2. Incorporado
    3. Externo

    Se um estilo for especificado em mais de uma dessas camadas a prioridade ocorrerá conforme
    acima.


Aula 3.4. Seletores de tipo, classe e ID
----------------------------------------

. Seletor por id do objeto:

    <style>
        #myHeader {
            background-color: lightblue;
            color: black;
            padding: 40px;
            text-align: center;
        }
    </style>

    <h1 id="myHeader">My Header</h1>

. Seletor por classe do objeto:

    <!DOCTYPE html>
    <html>
        <head>
            <style>
                .cities {
                    background-color: black;
                    color: white;
                    margin: 20px;
                    padding: 20px;
                }

                .destaque{
                    font-family : Arial;

                }
            </style>
        </head>

        <body>
            <div class="cities">
                <h2>London</h2>
                <p>London is the capital of England.</p>
            </div>
        </body>
    </html>

. Podemos utilizar mais de um item nas definições das classes, por exemplo:

    <div class="cities destaque">
        <h2>London</h2>
        <p>London is the capital of England.</p>
    </div>



<link rel="stylesheet" href="style.css">

<script src=""></script>

<img src="" width="" height="" alt="">

<a href="http://www.google.com.br" target="_blank">Google</a>


Aula 3.5 - Agrupando seletores
------------------------------

Podemos agrupar os seletores:

<style>
    .warning, .title, #error{
        font-color : blue;
    }
</style>


Aula 3.6 - Seletores descendentes
---------------------------------

Exemplo

. Note que o estilo vai entrando na árvore para encontrar a tag. Os seletores 
    descendentes servem para aplicar estilo CSS somente em tags específicas 
    que são descendentes de outras tags.

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            #header #sub-header h1 {
                color: blue;
            }
            
            .content  h1 {
                color: red;
            }
        </style>
    </head>

    <body>
        <div id="header">
            <div id="sub-header">
                <h1>Cabeçalho</h1>
            </div>
        </div>
        <div class="content">
            <h1>Este cabeçalho h1 está no conteúdo</h1>
        </div>
        <div class="content">
    </body>

    </html>



3.7. Seletores de filhos diretos
--------------------------------

    . Qdo utilizamos o simbolo ">" será para identificar um item especifico. 

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            #header #sub-header h1 {
                color: blue;
            }
            
            .content>h1 {
                color: red;
            }
        </style>
    </head>

    <body>
        <div id="header">
            <div id="sub-header">
                <h1>Cabeçalho</h1>
            </div>
        </div>
        
        <!-- o estilo .content>h1 só funcionará para a tag abaixo -->
        <div class="content">
            <h1>Este cabeçalho h1 está no conteúdo</h1>
        </div>
        
        <!-- para funcionar na tag abaixo deveria ser .content>p -->
        <div class="content">
            <p>Este cabeçalho está no conteúdo</p>
        </div>
    </body>

    </html>


Aula 3.8 - Cores
----------------

. Acesse o link abaixo para encontrar as cores em Hexadecimal:

    https://www.colorschemer.com/hex-color-codes/
    https://www.flextool.com.br/tabela_cores.html

. Exemplo

    <style>
        h1{
            background-color : #919191;
            color : #000000;        
        }
    </style>

Aula 3.9 - Formatação de Texto
------------------------------

<style>
    .nome{
        color : #ff0000;

        /*  
            . Sempre que o nome for composto coloque o entre aspas
            . Utilize o recurso de mais de uma fonte separadas por virgula
                para priorizar o uso da fonte. Caso a primeira não for 
                encontrada para uso vai para a próxima
        */

        font-family : "Trebuchet MS", Arial;

        font-size : 16px;

        font-style : italic;    /*  normal; italic; oblique; */

        font-weight : normal;   /*  normal; bold; bolder; lighter; 
                                    100; 200; 300; 400; 500; 600; 700; 800; 900; */

        text-decorate : underline;  /* none; underline; overline; line-through; blink; */

        text-align : right;     /* right; left; center; justify */

    
    }

    .segmento{
            
            /*  
                Ao invés de declarar propriedade por propriedade podemos construir um
                atalho seguindo a ordem:

                    font-style 
                    font-weight
                    font-size
                    font-family
            */

        font : italic bold 24px "Trebuchet MS", Arial;

    }


</style>


Aula 3.10 - Inspecionando com Chrome Devtools
---------------------------------------------

. Dentro do navegador se acionarmos as teclas F12, Botao Direito "Inspecionar", 
    ou Ctrl+Shift+I é apresentado a ferramenta de desenvolvimento para debugar e
    verificar o código da página.

3.11. Entendendo a propriedade display
--------------------------------------

display - Define se um elemento deve ser apresentado ou não, e a sua forma de apresentação.
Valores - none; inline; block; list-item; run-in; compact; marker; table; inline-table; 
            table-row-group; table-header-group; table-footer-group; table-row; 
            table-column-group; table-column; table-cell; table-caption;
 
Os objetos já vem configurado implicitamente essa propriedade CSS. No caso dos link <a href="...">
o display é "inline"; já os "text" é block.

inline = um ao lado do outro e ocupa somente o espaço do conteúdo. 
            Height e Weight nâo tem efeito no inline.
block = um debaixo do outro e ocupa toda a linha. E ele é o default
none = oculta o objeto na hora de redenrizar, mas o objeto permanece no lugar.
 
table-cell = Faz com que o comportamento do elemento ocorra como uma celula de uma tabela. Qdo ativado
                podemos utilizar alguma propriedades de CSS que só funciona para table-cell:

                vertical-align : middle; / bottom;


3.12. Adicionando bordas
------------------------

    {
        /*  thin;       fina
            medium;     media
            thick;      grossa
            unidades_css=99px; 
        */
        border-with : thick;  
        border-color : red;

        /* 
            Tipo do traço - pontuada, tracejada, etc.

            none; hidden; dotted; dashed; solid; double; groove; ridge; inset; outset; 
        */
        border-style : dashed;

        /*  
            Ao invés de declarar propriedade por propriedade podemos construir um
            atalho seguindo a ordem: border-style; border-width; border-color;
        */
        border : #000 solid 2px;

        border-bottom : 5px blue dashed;
        border-right : 10px yellow double;

        /* Cantos arredondados, pode ser utilizado com atalhos também */
        border-radius : 20px;
        /* Começando pelo canto superior esquerdo no sentido horário */
        border-radius : 20px 10px 20px 10px; 

        background-color : #cccccc; 


        /* Especificação da borda para cada lado */
        border-top: #000 solid 10px;
        border-right : #fff solid 10px;
        border-bottom: #0c0 solid 10px;
        border-left: #e0e dotted 10px;


    }

Aula 3.13. Espaçamento interno (padding)
----------------------------------------

padding = Define o espaço entre o conteúdo e os 4 limites ou bordas de um elemento. 
            Aceita de 1 a 4 valores.

padding-top; padding-right; padding-bottom; padding-left = Definem o espaço entre o 
                                                            conteúdo e os limites ou bordas 
                                                            superior, direito, inferior e 
                                                            esquerdo.

{
    /*
        espaçamento nos 4 lados de dentro
    */
    padding : 10px;

    /*
        left right = 5px
        top bottom = 50px
    */
    padding : 5px 50px;

    /*
      Começa no top e vai no sentido horário
    */
    padding:5px 10px 20px 30px;


}


3.14. Margens de elementos
--------------------------

Importante: Para que nossa página seja responsiva é interessante dar preferência na utilização da 
    unidade "%" ao invés de "px"

margin = Define as 4 margens do elemento. Aceita de 1 a 4 valores. Começando pela top, na seguida left

margin-top; margin-right; margin-bottom; margin-left = Definem as margens superior, direita, 
                                                        inferior e esquerda de um elemento.

{
    /*
        Coloca 50px nas margem do lado de fora no top right bottom left
    */
    margin : 50px;

    /*
        Coloca 200px no top bottom e 100px no left right
    */
    margin: 200px 100px;

    /*
        Coloca 50px no top e bottom e centraliza nos lados left e right
    */
    margin: 50px auto;

    /*
        Coloca 15px no top e o restante no sentido horário
    */
    margin: 15px 5px 5px 15px;


    /* Para centralizar o elemento utilizamos o margin : auto, porém é necessário indicar
        o width */
    width: 30%;
    margin: auto;

}                                                        

padding = define margem interna do elemento

{
    /* Define o padding para os quatro lados do elemento */
    padding : 5% / 5px;

    /* Define o padding para cada lado do elemento, começando pelo 
        topo, direita, bottom e left */
    padding : 5px, 10px, 20px, 25px;

}


3.15. Box model e a propriedade box-sizing
------------------------------------------

Exemplo

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
            body {
                margin: 0px;
            }
            
            .content {
                background-color: grey;
                width: 500px;
                text-align: justify;
                border: 10px solid black;
                padding: 10px;
                /* propriedade acrescida */
            }
            
            .extra {
                background-color: yellow;
                width: 500px;
                text-align: justify;
                margin-bottom: 10px;
            }
        </style>



    </head>

    <body>
        <div class="extra">
            Mussum Ipsum, cacilds vidis litro abertis. Viva Forevis aptent taciti sociosqu ad 
            litora torquent. Casamentiss faiz malandris se pirulitá. Sapien in monti palavris 
            qui num significa nadis i pareci latim. Mé faiz elementum girarzis, nisi eros vermeio.
        </div>

        <div class="extra">
            Mussum Ipsum, cacilds vidis litro abertis. Viva Forevis aptent taciti sociosqu ad 
            litora torquent. Casamentiss faiz malandris se pirulitá. Sapien in monti palavris 
            qui num significa nadis i pareci latim. Mé faiz elementum girarzis, nisi eros vermeio.
        </div>

        <div class="content">
        </div>

    </body>

    </html>

    . Se deixarmos as divs sem classes identificadas, todas elas ocuparam os mesmos tamanho e altura.

    . Porém, se as identificarmos com as classes "content" e "extra" observaremos que a que está com 
        a classe "content" ocupará um espaço maior que as demais. Mesmo especificando os mesmo tamanho
        para todas "width : 500px;" elas acabaram ficando diferentes devido as bordas ficarem
        do lado de fora, mas a parte interna essas ficaram com 500px. Visualmente não deveria ser assim,
        pois todas deveriam ficar com o mesmo tamanho.

    . Se colocarmos outra propriedade para as divs como o "padding" a diferença ficará mais evidente ainda.
        Adicione a propriedade "padding : 10px;" para a classe content;

        .content {
            background-color: grey;
            width: 500px;
            text-align: justify;
            border: 10px solid black;
            padding: 10px;
            /* propriedade acrescida */
        }

    . Tanto a propriedade border e padding serão acrescidas na div no lado de fora deixando a div do lado de 
        dentro.

        +-----------------------+
        |                       |
        |                       |
        |     width :  500px;   |
        |     heigth : 200px;   |
        |                       |
        |                       |
        +-----------------------+

        +-----------------------+
        |                       |
        |                       |
        |     width :  500px;   |
        |     heigth : 200px;   |
        |                       |
        |                       |
        +-----------------------+

        +-----------------------------+
        | | P                       | |
        | | A +----------------+    | |
        |B| D |                |    | |
        |O| D | width :  500px;|    | |
        |R| I | heigth : 200px;|    | |
        |D| N |                |    | |
        |E| D |                |    | |
        |R|   +----------------+    | |
        | |                         | |
        +-----------------------------+
            Div com a class "content"

    . Se quiser que a div com a classe "content" fique visualmente com as mesmas dimensões das demais, 
        basta acrescentar a propriedade "box-sizing : border-box". Isso fará que as propriedades
        padding e border permaneçam dentro da div e não do lado de fora. 

    . Ao utilizarmos o recurso do "box-sizing : border-box" o width da div é alterada. Será subtraido
        dele os tamanhos do border e padding, então nesse caso o que era 500px passará automaticamente
        para 460, ou seja 10px 10px 460px 10px 10px = ( border; padding; width; padding; border )

    . O padrão do box-sizing é sempre content-box, se quisermos que a borda e o padding permaneçam dentro
        das dimensoes da div temos que alterá-la para border-box.

    . Importante: para simplificar podemos colocar uma propriedade no nosso style para que todos objetos
                    considere a propriedade box-sizing : border-box da seguinte forma:

                    *{
                        box-sizing : border-box;
                    }

    . Assim o resultado final do nosso style poderia ficar da seguinte forma:

        <style>
            * {
                box-sizing: border-box;
            }
            
            body {
                margin: 0px;
            }
            
            .content {
                background-color: grey;
                width: 500px;
                text-align: justify;
                border: 10px solid black;
                /* propriedade acrescida */
                padding: 10px;
                /* [content-box / border-box ] */
                /* box-sizing: border-box; */
            }
            
            .extra {
                background-color: yellow;
                width: 500px;
                text-align: justify;
                margin-bottom: 10px;
            }
        </style>

4.3. Listas ordenadas e não-ordenadas
-------------------------------------

Exemplo

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>
    <style>
        body {
            font-size: 18px;
            font-family: Arial, Helvetica, sans-serif;
        }
        
        ul.menu {
            /* Sumir os bollets */
            list-style: none;
            padding: 0;
            margin: 0;
        }
        
        ul.menu>li {
            display: inline-block;
            border: 3px solid red;
            padding: 5px;
        }
    </style>

    <body>
        <ul class="menu">
            <li>Arquivo</li>
            <li>Editar</li>
            <li>Ajuda</li>
        </ul>
    </body>

    </html>

Aula 4.4. Adicionando os planos
-------------------------------

. Inserção da tag <article> no index.html e mudança nos estilos dos componentes desta tag

Exemplo

. index.html atualizado

    <!DOCTYPE html>
    <html lang="pt">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Connect Assessoria</title>
        <link rel="stylesheet" type="text/css" href="style/estilo.css">
    </head>

    <body>
        <header>
            <div class="container">
                <img src="image/logo.png" width="100" height="35" alt="Connect">
            </div>

        </header>

        <div id="planos">
            <div class="container">
                <article>
                    <h2>Autônomo</h2>
                    <div>R$ 59,00 por mês</div>
                    <ul>
                        <li>Até <strong>2 usuários</strong></li>
                        <li><strong>500MB</strong> de armazenamento</li>
                        <li>Lançamento ilimitados</li>
                        <li>Acesso seguro</li>
                        <li>Sem fidelidade</li>
                    </ul>

                    <footer>
                        <a href="assine.html">Assine</a>
                    </footer>
                </article>
                <article>
                    <h2>Micro</h2>
                    <div>R$ 89,00 por mês</div>
                    <ul>
                        <li>Até <strong>5 usuários</strong></li>
                        <li><strong>1GB</strong> de armazenamento</li>
                        <li>Lançamento ilimitados</li>
                        <li>Acesso seguro</li>
                        <li>Sem fidelidade</li>
                    </ul>

                    <footer>
                        <a href="assine.html">Assine</a>
                    </footer>
                </article>
                <article>
                    <h2>Pequena</h2>
                    <div>R$ 99,00 por mês</div>
                    <ul>
                        <li>Até <strong>10 usuários</strong></li>
                        <li><strong>5GB</strong> de armazenamento</li>
                        <li>Lançamento ilimitados</li>
                        <li>Acesso seguro</li>
                        <li>Sem fidelidade</li>
                    </ul>

                    <footer>
                        <a href="assine.html">Assine</a>
                    </footer>
                </article>
            </div>
        </div>
    </body>

    </html>

. estilo.css atualizado

    * {
        box-sizing: border-box;
    }

    body {
        margin: 0px;
        font-family: Arial, Helvetica, sans-serif;
        font-size: small;
    }

    header {
        height: 60px;
        border-bottom: 1px solid #ccc;
    }

    header img {
        margin-top: 12px;
    }

    .container {
        width: 1200px;
        margin: 0 auto;
        padding-left: 15px;
        padding-right: 15px;
    }

    #planos {
        padding: 80px 0;
    }

    article {
        padding: 10px;
        border: 1px solid #95a4a5;
        width: 370px;
    }

    article>h2 {
        background-color: #95a4a5;
        /* Cor da fonte */
        color: #fff;
        text-align: center;
        /* Altura da linha equivalerá a 2,5 vezes o tamanho da fonte */
        line-height: 2.5;
        /* Senão colocarmos a margem negativa ficará um espaço em branco
            entre o conteúdo e a borda. Ao colocar a margem negativa esse
            espaço some, mas o texto a partir do R$59,00 por mês tb sobe.
            Para resolver esse último problema faremos a configuração do
            margin-bottom
        */
        margin: -10px;
        margin-bottom: 0;
        font-weight: normal;
        font-size: 28px;
    }

    article>div {
        text-align: center;
        font-size: 28px;
        /* Margem superior e inferior 20px e esquerda e direita 0 */
        margin: 20px 0;
    }

    article>ul {
        /* Para retirar os bollets da list ul */
        list-style: none;
        padding: 0;
        margin: 20px 0;
    }

    article>ul>li {
        text-align: center;
    }

    article>footer {
        text-align: center;
    }



Aula 4.5. Flutuando elementos
----------------------------

Como usar o Float
-----------------

O float contém três opções "float : [left / right / none]". Quando utilizado
essa diretiva o objeto irá se posicionar no top do objeto pai ao qual ele está
contido e com a propriedade [left / right ] irá deslocá-lo para a esquerda, ou 
a direita.

Importante: o float deve ser colocado nos elementos filhos que se deseja flutuar,
            nunca no elemento pai pensando que assim os filhos herdarão essa propriedade.

Caso existe mais de um objeto a ser flutuado do mesmo lado ele irá posicionando
um ao lado do outro e passa para baixo caso não tenha mais espaços para flutuar 
mais objetos.

O valor none leva o objeto para o top ao lado esquerdo.

Exemplo

    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <title>Document</title>
        <style type="text/css">
            .divPrincipal {
                background: #eee;
                width: 800px;
                height: 500px;
                border-style: solid;
                border-width: thin;
            }
            
            .div1 {
                width: 200px;
                height: 200px;
                margin: 10px;
                float: left;
                background: blue;
            }
            
            .div2 {
                width: 200px;
                height: 200px;
                margin: 10px;
                float: right;
                background: blue;
            }
        </style>
    </head>

    <body>
        <div class="divPrincipal">
            <div class="div1">
                Esta DIV utiliza a propriedade { float : left} para posicionar a esquerda
            </div>
            <div class="div2">
                Esta DIV utiliza a propriedade { float : right} para posicionar a direita
            </div>
            <div id="content">
                lasjçalskfjçalskjfaçslfjasçdlfjasçlfkjasçlfkjsdflkj
            </div>

        </div>
    </body>

    </html>

. Quando ativamos o float os elementos em seguinda continuam flutuando automaticamente. Para
    acabar com essa ação é possível utilizar a propriedade "clear : both"

    Exemplo:

    Altere a tag <div id="content"> para <div id="content" style="clear : both">. Isto fará
    que o texto ao invés de sair entre as divs como anteriormente, sairam embaixo delas.



Aula 4.6. Usando pseudo-elementos
---------------------------------

. Pseudo elementos é representado com "::" dentro das configurações do style. Elas servem para
    realizar alguma mudança nos atributos do conteúdo do elemento, por exemplo:

    <style>
        article > p::first-letter{
            font-size : 60px;
            color : red;
        }
    </style>

    ...
    <article>
        <p>Teste de pseudo-elementos</p>
    </article>
    ...

    A primeira letra do parágrafo sair com tamanho diferenciado e em vermelho.

. Adicionando texto no inicio do conteúdo com "::before" :

    <style>
        article > p::before{
            content : "Como Fazer um ";
        }
    </style>

    ...
    <article>
        <p>Teste de pseudo-elementos</p>
    </article>
    ...

    . Ao executar a página sairá a mensagem "Como Fazer um Teste de pseudo-elemento".

. Uma forma de trabalhar sem "clear : both":

    . Retornando ao exemplo da aula 4.5. Retire o "clear:both" do css da div com id=content 
        e crie no arquivo css o código abaixo:

        ...
        <style>
            div>#content::before {
                /* Inclusão de um texto vazio no inicio do conteúdo da div */
                content: "";
                /* Força a disposição dos elementos um debaixo do outro */
                display: block;
                /* Acaba com a flutuação dos elementos */
                clear: both;
            }
        </style>
        ...
        <div class="divPrincipal">
            <div class="div1">
                Esta DIV utiliza a propriedade { float : left} para posicionar a esquerda
            </div>
            <div class="div2">
                Esta DIV utiliza a propriedade { float : right} para posicionar a direita
            </div>
            <div id="content">
                lasjçalskfjçalskjfaçslfjasçdlfjasçlfkjasçlfkjsdflkj
            </div>

        </div>

    . O resultado será a apresentação do conteúdo da div "content" debaixo das divs div1 e div2
        e não entre elas.


Aula 4.8. Configuração CSS para o botão
---------------------------------------

. Crie a configuração no arquivo de CSS como abaixo:

    .botao {
        display: inline-block;
        padding: 12px 16px;
        background-color: green;
        color: white;
        text-decoration: none;
    }

. Coloque nos elementos links a identificação da classe como abaixo:

    <footer>
        <a href="assine.html" class="botao">Assine</a>
    </footer>



Aula 4.9. Usando pseudo-elementos
---------------------------------

. Uma pseudo-classe CSS é uma palavra-chave adicionada a seletores que especifica um estado 
    especial do elemento selecionado. Por exemplo, :hover pode ser usado para alterar a cor de 
    um botão quando o usuário passar o cursor sobre ele. É representado por um simples ":".

. Continuando o exemplo da aula 4.8, crie a configuração no arquivo CSS como abaixo:

    .botao:hover,
    .botao:focus {
        background-color: darkgreen;
    }


Aula 4.10.  Reset CSS e Normalize.css
-------------------------------------

. Cada navegador existe um padrão de layout CSS, para evitar conflito da sua página com a 
    variedade de navegadores o melhor a se fazer é resetar todas as configurações padrões 
    de CSS. 

. Para inicilizar todas essas configurações iremos baixar dois arquivos e utilizar um deles
    em nossas páginas. Eles podem ser baixados em:

    http://www.bit.ly/resetcss

    e

    http://www.bit.ly/normalizecss
    

. Feito o download de um destes arquivos, insera-os na pasta de estilos do seu projeto e 
    o referencie na sua página.

    <link rel="stylesheet" type="text/css" ref="estilo/normalize.css>

    ou

    <link rel="stylesheet" type="text/css" ref="estilo/resset.css>

    . Dessa forma teremos certeza que as configurações existentes serão sempre as suas e não
        a padrão do navegador.

    . Importante: A declaração dessas classes css devem ser sempre a primeira, antes de qq outra.
                    Dê preferencia ao uso do arquivo normalize.css, pois é o que é utilizado no 
                    bootstrap


Aula 5.2. Unidade de medida : Pixel
-----------------------------------

. O tamanho dos elementos e tela são configurados por pixel, percentual, etc.

    font-size : 16px;

. O tamnho da fonte pode ser configurado no navegador, informando se queremos pequeno, médio e grande.
    Todos os elementos da página herdaram essa configuração;

. Pixel é uma unidade que deve ser evitada em layout responsivos. Usada com exceção em tamanho de bordas
    porque só aceita unidade pixel.


Aula 5.3. Unidade de medida: Percentual
---------------------------------------

. Quando utilizamos percentual como unidade de medida estamos dizendo ao navegador que queremos x% do 
    tamanho em relação ao pai daquele elemento. Caso o elemento a ser configurado for uma fonte, o 
    navegador verificará a relação de elementos em que o objeto está inserido, chegando até as 
    configurações do navegador se for o caso, para definir o tamanho da fonte percentualmente.

    Exemplo:

        . Considere que o browser está com o tamanho de fonte médio (16px), então o tamanho da fonte
            da div será de 32px e dos parágrafos ficará em 64px.

        <!DOCTYPE html>
        <html lang="pt-br">

        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document</title>
            <style>
                /* Tam da fonte padrão 16px */
                div {
                    /* 16 * 200% = 32 */
                    font-size: 200%
                    border: 1px solid black;
                    width: 80%;
                }
                
                p {
                    /* 32 * 200% = 64px */
                    font-size: 200%;
                }
            </style>
        </head>

        <body>
            <div>
                <p>Ipsum, cacilds vidis litro abertis. Cevadis im ampola pa arma uma pindureta. </p>
                <p>Mauris nec dolor in eros commodo tempor. Aenean aliquam molestie leo, vitae iaculis </p>
                <p>nisl. Em pé sem cair, deitado sem dormir, sentado sem cochilar e fazendo pose. Leite</p>
                <p>de capivaris, leite de mula manquis sem cabeça.</p>
            </div>
        </body>

        </html>

    . Se quisermos alterar o tamanho da fonte padrão da página, podemos colocar no style a seguinte definição:

        <style>
            html{
                font-size : 16px;            
            }
        </style>

    . O problema de definir em pixels seria que ao alterar o tamanho da fonte no navegador (pequeno, médio, grande)
        não irá surtir efeito. Outro detalhe, que a página deixa de ser responsiva.


Aula 5.4. Meta tag viewport
----------------------

. Sempre que formos desenvolver uma página responsiva devemos definir o "viewport" no cabeçalho da página:

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

. O "width" informa para pegar o tamanho do device e o "initial-scale=1.0" diz ao navegador que deverá ser de 100%
    o zoom da página.


Aula 5.5. Layout Fluido
Aula 5.6. Layout responsivo e media queries
-----------------------

. Altere as propriedades que estão com unidade px para % no arquivo estilo.css:

    .container {
        width: 100%;
        ...
    }

    ...

    article {
        width: 30%;
        margin-right: 5%;
        ...
    }

    ...

. Inclua a media query abaixo:

    @media( min-width: 800px) {
        article {
            width: 30%;
            float: left;
            margin-right: 5%;
        }
    }

    . Elimine as propriedade do @media do css origem article deixando ele da seguinte forma:

        article {
            padding: 10px;
            border: 1px solid #95a4a5;
        }


    . Media query diz ao navegador para utilizar as configurações dentro do @media a partir do tamanho
        configurado em "min-width", no nosso exemplo 800px

. Insira no cabeçalho da página o "viewport":

    <meta name="viewport" content="width=device-width, initial-scale=1.0">



Aula 5.7. Como funcionar um sistema de Grid CSS
-----------------------------------------------

https://getbootstrap.com.br/docs/4.1/layout/grid/#:~:text=como%20container%20flex.-,Par%C3%A2metros%20grid,mudan%C3%A7a%20no%20tamanho%20de%20fonte.
https://getbootstrap.com.br/docs/4.1/components/forms/#:~:text=row%20por%20.,para%20conseguir%20layouts%20mais%20compactos.
https://www.w3schools.com/bootstrap/bootstrap_grid_system.asp


. Acesse a página do bootstrap http://getbootstrap.com baixa a versão atual. Ou utilize o "npm" para 
    baixar a biblioteca: 

    npm install bootstrap

. Detalhe, o bootstrap já vem intrínseco o reset da página, assim não precisamos referenciar mais o 
    arquivo reset.css, ou o normalizecss.css

. Copie o arquivo "bootstrap.min.css" para dentro do seu projeto e o referencie na página como abaixo:

    <!DOCTYPE html>
    <html lang="pt-br">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <link rel="stylesheet" href="/css/bootstrap-grid.min.css">
        <link rel="stylesheet" href="/css/estilo.css">
    </head>

    <body>
        <div class="container">
            <h1>Algaworks</h1>
        </div>


        <div class="container-fluid">
            <div class="row">
                <div class="col-sm">
                    Uma de três colunas
                </div>
                <div class="col-sm">
                    Uma de três colunas
                </div>
                <div class="col-sm">
                    Uma de três colunas
                </div>
            </div>
        </div>

    </body>

    </html>

. O container adicionou margens laterais ao conteúdo, e centralizou na tela. 
    Além disso, ele já definiu a largura máxima do conteúdo.

. Você pode escolher entre dois tipos de containers para usar em suas páginas: 
    o container simples e o container fluído.

. O container simples, que é o padrão, cria uma área responsiva e de largura fixa, 
    que fica centralizada na tela (ou no elemento-pai). No código abaixo, 
    temos um exemplo do container simples:

    <div class="container">	  ...	</div>

. Já o container fluído também cria uma área responsiva, mas que ocupa toda a tela 
    (também conhecido como full width).

    <div class="container-fluid">	  ...	</div>

. O sistema de grid do Bootstrap  possui 4 classes:

    xs ( para celulares - Telas com tamanho menores de 768px)
    sm ( para tablets - Telas com tamanho igual ou maior que 768px )
    md ( para notebooks - Telas com tamanho igual, ou maior que 992px)
    lg ( para notebooks - Telas com tamanho igual, ou maior que 1200px)

. Para utilizar o sistema de grid acima elas precisam seguir o padrão abaixo:

    <!-- class="container / container-fluid -->
    <div class="container-fluid">
        
        <!-- Há possibilidade de utilizar outra classe como: <div class="form-row"> -->
        <!-- Se utilizar o form-row teremos que ter na div com classe col-* outra classe -->
        <!-- que agrupe os objetos seria form-group <div class="form-group col-xs-3 col-sm-5"> -->
        <div class="row">
            <div class="col-xs-3 col-sm-5">
                <div style="background-color: green; color: #fff;">
                    <h1>Logo</h1>
                </div>
            </div>
            <div class="col-xs-9 col-sm-7">
                <div style="background-color: blue; color: #fff;">
                    <h1>Menu</h1>
                </div>
            </div>
        </div>
    </div>

    Exemplo
    -------

    <!DOCTYPE html>
    <html lang="pt-br">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <link rel="stylesheet" type="text/css" href="css/bootstrap-grid.css">
        <link rel="stylesheet" href="css/estilo.css">
    </head>

    <body>
        <div class="container-fluid">
            <div class="row">
                <div class="col-xs-3 col-sm-5">
                    <div style="background-color: green; color: #fff;">
                        <h1>Logo</h1>
                    </div>
                </div>
                <div class="col-xs-9 col-sm-7">
                    <div style="background-color: blue; color: #fff;">
                        <h1>Menu</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div style="background-color: darkblue; color: #fff;">
                        <h1>Banner 1</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div style="background-color: orange; color: #fff;">
                        <h1>Banner 2</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <div style="background-color: red; color: #fff;">
                        <h1>Banner 3</h1>
                    </div>
                </div>
            </div>
        </div>

    </body>

    </html>


Aula 5.8 - Ajustando o projeto para usar o Grid CSS do Bootstrap
----------------------------------------------------------------

. Comente no arquivo estilo.css o item .container e o @media

    /*
        Vamos desconsiderar para utilizar o 
        sistema de grid do bootstrap
    .container {
        width: 100%;
        margin: 0 auto;
        padding-left: 15px;
        padding-right: 15px;
    }
    */

    /* Diz para considerar as configurações 
    a partir do tamanho apontado em "min-width"

    @media( min-width: 800px) {
        article {
            width: 30%;
            float: left;
            margin-right: 5%;
        }
    }
    */


. Na página index.html substitua o link para o css reset.css pelo bootstrap-grid.css

    <link rel="stylesheet" type="text/css" href="style/bootstrap-grid.css">

. Deixe o conteúdo da página index.html como abaixo:

    <div class="container-fluid">

        <!-- Inserido -->
        <div class="row">   
            <!-- Inserido -->
            <div class="col-md-4 col-sm-4">
                <article>
                    <h2>Autônomo</h2>
                    <div>R$ 59,00 por mês</div>
                    <ul>
                        <li>Até <strong>2 usuários</strong></li>
                        <li><strong>500MB</strong> de armazenamento</li>
                        <li>Lançamento ilimitados</li>
                        <li>Acesso seguro</li>
                        <li>Sem fidelidade</li>
                    </ul>

                    <footer>
                        <a href="assine.html" class="botao">Assine</a>
                    </footer>
                </article>
            </div>

            <!-- Inserido -->
            <div class="col-md-4 col-sm-4">
                <article>
                    <h2>Micro</h2>
                    <div>R$ 89,00 por mês</div>
                    <ul>
                        <li>Até <strong>5 usuários</strong></li>
                        <li><strong>1GB</strong> de armazenamento</li>
                        <li>Lançamento ilimitados</li>
                        <li>Acesso seguro</li>
                        <li>Sem fidelidade</li>
                    </ul>

                    <footer>
                        <a href="assine.html" class="botao">Assine</a>
                    </footer>
                </article>
            </div>

            <!-- Inserido -->
            <div class="col-md-4 col-sm-4">
                <article>
                    <h2>Pequena</h2>
                    <div>R$ 99,00 por mês</div>
                    <ul>
                        <li>Até <strong>10 usuários</strong></li>
                        <li><strong>5GB</strong> de armazenamento</li>
                        <li>Lançamento ilimitados</li>
                        <li>Acesso seguro</li>
                        <li>Sem fidelidade</li>
                    </ul>

                    <footer>
                        <a href="assine.html" class="botao">Assine</a>
                    </footer>
                </article>
            </div>
        </div>
    </div>

Aula - 6.1. Especificidade do CSS
---------------------------------

. A ordem de especificidade/consideração dos elementos de um arquivo de estilos css segue
    a sequência abaixo:

    1. "#" id

    2. "." classe

    3. Tag html (h1, p, ...)

. Se houver o mesmo item declarado mais de uma vez dentro do arquivo css, o que será considerado
    na página HTML será sempre o último do arquivo.

. Se uma tag na página tiver no arquivo css mais de uma definição, a especificidade obedecerá a 
    regra ( #, ., elemento html), exemplo:

    <h1 class="verde" id="SaoPaulo">

    . O estilo a ser adotado seria o do SaoPaulo por ser o mais especifico.

. O estilo inline <div id="banner" style="background-color:yellow;"> sempre terá precedência sobre
    o id, classe, ou tag declarado no arquivo css.



Aula 6.3. Metodologia BEM
-------------------------

. Site da metodologia BEM www.getbem.com

. BEM Block Element Modifier

. Na metodologia BEM tudo é considerado como bloco (conjunto de elementos), elemento (itens que compoe um bloco)
    e modificador (item que divergem do bloco origem, se estivermos reaproveitando um bloco).


 
Aula de Montagem de Formulário com BootStrap
--------------------------------------------

    https://getbootstrap.com/docs/4.0/components/forms/

    . Exemplo 1 - Formulário na Vertical

        <form>
            <div class="form-row">
                <div class="form-group col-md-6">
                <label for="inputEmail4">Email</label>
                <input type="email" class="form-control" id="inputEmail4" placeholder="Email">
                </div>
                <div class="form-group col-md-6">
                <label for="inputPassword4">Password</label>
                <input type="password" class="form-control" id="inputPassword4" placeholder="Password">
                </div>
            </div>
            <div class="form-group">
                <label for="inputAddress">Address</label>
                <input type="text" class="form-control" id="inputAddress" placeholder="1234 Main St">
            </div>
            <div class="form-group">
                <label for="inputAddress2">Address 2</label>
                <input type="text" class="form-control" id="inputAddress2" placeholder="Apartment, studio, or floor">
            </div>
            <div class="form-row">
                <div class="form-group col-md-6">
                <label for="inputCity">City</label>
                <input type="text" class="form-control" id="inputCity">
                </div>
                <div class="form-group col-md-4">
                <label for="inputState">State</label>
                <select id="inputState" class="form-control">
                    <option selected>Choose...</option>
                    <option>...</option>
                </select>
                </div>
                <div class="form-group col-md-2">
                <label for="inputZip">Zip</label>
                <input type="text" class="form-control" id="inputZip">
                </div>
            </div>
            <div class="form-group">
                <div class="form-check">
                <input class="form-check-input" type="checkbox" id="gridCheck">
                <label class="form-check-label" for="gridCheck">
                    Check me out
                </label>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Sign in</button>
        </form>


    . Exemplo 2 - Formulário na horizontal.

        <form>
            <div class="form-group row">
                <label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>
                <div class="col-sm-10">
                <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
                </div>
            </div>
            <div class="form-group row">
                <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
                <div class="col-sm-10">
                <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
                </div>
            </div>
            <fieldset class="form-group">
                <div class="row">
                <legend class="col-form-label col-sm-2 pt-0">Radios</legend>
                <div class="col-sm-10">
                    <div class="form-check">
                    <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios1" value="option1" checked>
                    <label class="form-check-label" for="gridRadios1">
                        First radio
                    </label>
                    </div>
                    <div class="form-check">
                    <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios2" value="option2">
                    <label class="form-check-label" for="gridRadios2">
                        Second radio
                    </label>
                    </div>
                    <div class="form-check disabled">
                    <input class="form-check-input" type="radio" name="gridRadios" id="gridRadios3" value="option3" disabled>
                    <label class="form-check-label" for="gridRadios3">
                        Third disabled radio
                    </label>
                    </div>
                </div>
                </div>
            </fieldset>
            <div class="form-group row">
                <div class="col-sm-2">Checkbox</div>
                <div class="col-sm-10">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="gridCheck1">
                    <label class="form-check-label" for="gridCheck1">
                    Example checkbox
                    </label>
                </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-10">
                <button type="submit" class="btn btn-primary">Sign in</button>
                </div>
            </div>
        </form>

    . Definindo o tamanho dos "Controls":

        <input class="form-control form-control-lg" type="text" placeholder=".form-control-lg" aria-label=".form-control-lg example">
        <input class="form-control" type="text" placeholder="Default input" aria-label="default input example">
        <input class="form-control form-control-sm" type="text" placeholder=".form-control-sm" aria-label=".form-control-sm example">
