Curso Dicker essencial para a plataforma .NET


Aula 5. Instalando o Docker
---------------------------

. No caso do windows, acesse a URL abaixo e baixe o instalador:

    https://store.docker.com/editions/community/docker-ce-desktop-windows

. Utilizar a versão Community Edition (CE)

. No caso do Linux execute os comandos abaixo no prompt no terminal:

    . A URL abaixo tem os passos atualizado para instalação do Docker:

        https://docs.docker.com/engine/install/ubuntu/

	. Instalação Atualizada

        sudo apt-get update
        sudo apt-get install \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io
        sudo docker --version

        sudo groupadd docker
        sudo gpasswd -a <usuario> docker
        sudo chown "$USER":"$USER" /var/run/docker.sock -R
        sudo service docker restart

        docker --version

    . Instalação simplificada

		sudo apt install docker.io
		sudo systemctl enable --now docker
		sudo usermod -aG docker marco
		sudo adduser $USER docker
		sudo chown "$USER":"$USER" /var/run/docker.sock -R
		docker --version


    . Instalando o MySQL

        # Criando container com nome o banco de dados MySQL
        docker container run -e MYSQL_ROOT_PASSWORD=root --name algamoney -d mysql:5.7 				
        docker start algamoney

        docker ps -a
        docker exec -it algamoney bash	
        mysql -u root -p

        docker stop algamoney

    . Instalando o SQL Server

        https://docs.microsoft.com/pt-br/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&pivots=cs1-bash
        https://docs.microsoft.com/pt-br/sql/linux/sql-server-linux-setup-tools?view=sql-server-ver15#ubuntu


        docker container run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Joao3.16"    -p 1433:1433 --name sql1 --hostname sql1    -d mcr.microsoft.com/mssql/server:2019-latest
        docker container ps -a
        docker container exec -t sql1 cat /var/opt/mssql/log/errorlog | grep connection

        # Testar no linux, não funcionou no windows
        docker container exec -it sql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA  -P "$(read -sp "Enter current SA password: "; echo "${REPLY}")"  -Q "ALTER LOGIN SA WITH PASSWORD=\"$(read -sp "Enter new SA password: "; echo "${REPLY}")\""
        docker exec -it sql1 "bash"
        hostname -I
        ip a
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update 
        sudo apt-get install mssql-tools unixodbc-dev
        sudo apt-get update 
        sudo apt-get install mssql-tools
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc
        hostname -I
        sqlcmd -S 192.168.0.82,1433 -U SA -P "Joao3.16"


Aula 6. Instalando o .NET Core SDK
----------------------------------

    . Instalçao Atualizada:

        . URL com informações para realizar a instalação.

            https://docs.microsoft.com/pt-br/dotnet/core/install/linux-ubuntu

            . IMPORTANTE: Acesse a instalação da distribuição e versão especifica do linux que estamos utilizando para 
                            proceder os comandos adequadamente.

                            A instalação abaixo está para o Ubuntu 20.04

        # Instalação do SDK
        wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb

        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update

        sudo apt-get install -y gpg
        wget -O - https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o microsoft.asc.gpg
        sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
        wget https://packages.microsoft.com/config/ubuntu/{os-version}/prod.list
        sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
        sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
        sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list

        sudo apt-get update; \
        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y dotnet-sdk-6.0

        sudo apt-get install -y apt-transport-https && \
        sudo apt-get update && \
        sudo apt-get install -y aspnetcore-runtime-6.0

        sudo apt-get install -y dotnet-runtime-6.0


    . Instalação simplificada        

        . Acesse o link abaixo para baixar o .NET Core 3.1

            https://dotnet.microsoft.com/download

        . Acesse o download "All .NET Core downloads" e baixe a versão 3.1

        . Acesse o link "Package manager instructions" 

        . Localize a versão do Ubuntu que está sendo utilizado, copie e execute os comandos no 
            terminal:

            wget https://packages.microsoft.com/config/ubuntu/20.10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update;   sudo apt-get install -y apt-transport-https &&   sudo apt-get update &&   sudo apt-get install -y dotnet-sdk-5.0
            sudo apt-get update;   sudo apt-get install -y apt-transport-https &&   sudo apt-get update &&   sudo apt-get install -y aspnetcore-runtime-5.0

    . Para testar a instalação execute os comandos abaixo:

        dotnet --version
        dotnet --help
        dotnet --list
        dotnet --list-runtimes
        dotnet --list-sdks


Aula 7. Instalando o VS Code
----------------------------

    Instalação das extensões do VSCode

            C# 
            C# Extensions
            C# XML Documentation Comments
            vscode-icons (Opcional)
            Docker

        . Atalhos:

            Ctrl + K + D ou Shit + Alt + F:             Identa todo o seu código automaticamente;
            Ctrl + K + C:                               comenta um bloco de linhas;
            Ctrl + K + U:                               descomenta um bloco de linhas;
            Alt + Left Arrow:                           durante a programação, volta um método que você estava navegando;
            Alt + Right Arrow:                          durante a programação, avança um método que você estava navegando;
            Ctrl + .:                                   implementa o método/classe inexistente que você acabou de escrever;
            Ctrl + M + O:                               esconde todas as regions da classe atual;
            Ctrl + Shift + B:                           compila todos os projetos;
            F5:                                         manda depurar um projeto;
            Ctrl + F5:                                  manda executar um projeto;
            F10:                                        durante a depuração, avança uma linha;
            F11:                                        durante a depuração, avança uma linha entrando nos detalhes da mesma;


    Configurar Visual Studio Code para .NETCore

        . Acesse File / Preferences / Settings

        . Digite C#

        . Acesse "C# Configuration / CSharp Format Enabled" e habilite a configuração

        . Digite "Format on save" e habilite a configuração

        . Digite "Final" e habilite a configuração "Files: Insert final newline" e habilite a configuração


Aula 10. Criando Contêineres - I
--------------------------------

    . Criando um container a partir de uma imagem pronta

        docker container run <imagem>

    . Testando o docker:

        docker container run hello-world
          |       |       |     +-> É a imagem existente usada para criar o container
          |       |       |
          |       |       +-> É a porta de entrada no Docker e realiza 4 operações:
          |       |
          |       |            . Baixa a imagem não localizada localmente: docker image pull
          |       |            . Cria um container: docker container create
          |       |            . Inicializa o container: docker container start
          |       |            . Uso do modo interativo executando um comando: docker container exec
          |       |
          |       |
          |       +-> Indica que o comando irá atuar em um container
          |
          +-> Executor do comando

        . Importante: o "run" executa o container, mas cria sempre um novo container. Faça isso somente uma vez para a imagem desejada.
                        Utilize o comando abaixo "docker container start <nome do container> para executar o container.

    . Exibindo todos os container em processamento no momento:

        docker container ps

    . Exibindo todos os container independente se está, ou não, em processamento

        docker container ps -a

    . Exibindo as imagens

        docker images

Aula 11. Criando Contêineres - II
--------------------------------

    . Baixando uma image

        # Para consultar as imagens localmente
        docker images   

        # Para baixar uma imagem
        docker image pull alpine

        # Se quiser fornecer uma versão especifica da imagem utilize como abaixo
        docker image pull alpine:3.6

        # Para consultar as imagens localmente
        docker images   

        # Executa, cria um container e envia um comando para ser executado no container
        docker container run alpine ls -l

        # Consultando os containeres
        docker container ps -a

        # Executa, cria e permanece dentro do container
        docker container run -it alpine /bin/sh

        # Executa um container existente. Importante: Neste caso deixa o container em execução
        docker container start < 4 primeiras posições do CONTAINER ID, ou todo o código do CONTAINER ID >

        # Executa um comando dentro de um container em execução
        docker container exec < 4 primeiras posições do CONTAINER ID, ou todo o código do CONTAINER ID > ls -l
    
        # Parar o container em execução.
        docker container stop < 4 primeiras posições do CONTAINER ID, ou todo o código do CONTAINER ID >

        # Criando container com nome
        docker container run --name alp3 -it alpine 
        docker container start alp3
        docker ps
        
        # Acessará o container, no prompt de comando do SO.
        docker container attach alp3
        docker ps

        # Elimnando container
        docker container rm <container ID ou container name>


Aula 13. Container - Mapeando pastas
------------------------------------

    # Mapeando a porta, faz a associação da porta externa com a interna do container
    docker container run --name ws1 -p 80:80 nginx
                                        |  |
                                        |  +-> No. da porta de dentro do container
                                        +-> No. da porta externa, da máquina de fora
    . Acesse a url abaixo:

        http://localhost:80


    # Execução em segund plano
    docker container run --name ws2 -p 80:80 -d nginx
                                              |
                                              +-> Informa ao docker para executar em segundo plano


Aula 14. Container - Mapeando pastas
------------------------------------

    # Mapeando pasta da máquina local para dentro do container
    docker container run --name ws3 -p 80:80 -v $(pwd)/html:/usr/share/nginx/html -d nginx
                                                |----------||-------------------|
                                                 pasta local  pasta de dentro do
                                                 da máquina     container

    . Acesse a url abaixo:

        # Dará erro de página não encontrada
        http://localhost:80

    . Crie o arquivo abaixo na pasta ~/html/index.html

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document</title>
        </head>
        <body>
            Hello World
        </body>
        </html>


Aula 15. Container Docker com .NET
----------------------------------

    https://hub.docker.com/_/microsoft-dotnet-sdk


    # Para baixar a imagem
    docker pull mcr.microsoft.com/dotnet/sdk        ou      docker pull mcr.microsoft.com/dotnet/sdk:3.1        ou          docker pull mcr.microsoft.com/dotnet/sdk:5.0

    docker images

    docker container ps -a

    # Para baixar a imagem e executar em um container
    docker container run --name demo-dotnet -it mcr.microsoft.com/dotnet/sdk:5.0

    # Dentro do container execute os comandos abaixo
    mkdir workspace-dotnet
    mkdir hello-world
    cd workspace-dotnet/hello-world
    dotnet new console
    dotnet build
    dotnet run
    exit

    # Para acessar o container
    docker container ps 

    docker container start -ia demo-dotnet
    

Aula 18. Criando imagens usando Dockfile
----------------------------------------

https://www.alura.com.br/artigos/desvendando-o-dockerfile

    . No Dockfile são definidas instruções que oDocker vai seguir para conseguir realizar a criação de uma image.

        Dockerfile    ------------------>  Docker image
                        docker build

        Dockerfile  ------> Image   ----------> Container
                    build               run

    . Dockfile é como um arquivo de lote que contém instruções com uma sintaxe definica (INSTRUÇÃO arqumento) que devemos seguir para que 
        uma imagem seja criada.

    . Vamos criar uma imagem do Debian 8 com o servidor nginx, os passos para isso são:

        a. Definir uma imagem base

        b. Definir infs para a imagem

        c. Executar comandos para instalar e iniciar o nginx

        d. Expor qual porta o servidor vai atender (no container)

        e. Definir o ponto de entrada a aplicação

        f. Definir a execução de um comando para inicalizar o servidor nginx

    . Cria uma pasta especifica para criar o Dockerfile

    . Dentro da pasta crie um arquivo com o nome "Dockerfile" com o conteúdo abaixo:

        # Identifica a imagem, ou o ponto de partida
        FROM debian:8

        # Descrição da imagem
        LABEL version="1.0" description="Debian/Nginx"

        # Comandos a ser executado na etapa de criação de camadas da imagem
        RUN apt-get update && apt-get install -y nginx && apt-get clean

        # Porta que será exposta
        EXPOSE 80

        # Comando a ser executado, o "nginx" não é uma pasta e sim um comando 
        ENTRYPOINT  ["/usr/sbin/nginx"]

        # Complemento ao comando do ENTRYPOINT a ser executado ficando desta forma "/usr/sbin/nginx -g daemon off;"
        CMD ["-g", "daemon off;"]

    . Após criado o arquivo Dockerfle com o conteúdo acima, execute o comando abaixo no prompt de comandos dentro da pasta
        do Dockerfile:

        docker build -t marcoratti/img:1.0  .
                |     |     |               |
                |     |     |               +-> Significa a pasta local para fazer o build
                |     |     +-> Nome da imagem e a tag atribuida a imagem
                |     +-> Usado p/informar que a imagem pertence ao meu usuário
                +-> Comando que constrói a imagem

    . Depois de construida a imagem, verifique se a imagem foi criada com sucesso:

        docker images

    . Crie um novo container com a imagem recém criada

        docker container run -d -p 80:80 --name=ws1 marcoratti/img:1.0

    . Verifique se o container está em execução:

        docker container ps

    . Acesse o navegador e execute a URL abaixo:

        http://localhost:80

    . Para publicar a imagem criada no docker hub execute os comandos abaixo:

        docker login

        docker push <nome da imagem>

    . Para verificar informações da imagem:

        docker image inspect marcoratti/img:1.0

Aula 20. Criando uma aplicação ASP.NET Core MVC
-----------------------------------------------
    
    . Crie uma pasta para o projeto MVC

        mkdir ~/workspace-dotnet/mvc1

    . Dentro da pasta criada acima crie um projeto dotnet MVC:

        cd ~/workspace-dotnet/mvc1

        dotnet new mvc

        # Responda "Yes" para criar os arquivos de debug
        code .

    . Dentro da pasta "Models" cria a classe abaixo:

        namespace mvc1.Models
        {
            public class Produto
            {
                public Produto (string nome=null, string categoria=null,
                decimal preco=0)
                {
                    this.Nome = nome;
                    this.Categoria = categoria;
                    this.Preco= preco;
                }

                public int ProdutoId {get; set;}
                public string Nome {get; set;}
                public string Categoria {get; set;}
                public decimal Preco {get; set;}
            }
        }

    . Crie a interface IRepository dentro da pasta "Models":

        using System.Collections.Generic;

        namespace mvc1.Models
        {
            public interface IRepository
            {
                IEnumerable<Produto> Produtos { get; }
            }
        }

    . Dentro da pasta Models crie a classe abaixo:

        using System.Collections.Generic;

        namespace mvc1.Models
        {
            public class ProdutoRepository : IRepository
            {
                private AppDbContext context;
                public ProdutoRepository(AppDbContext ctx) {
                    context = ctx;
                }
                public IEnumerable<Produto> Produtos => context.Produtos;

            }
        }


    . Crie a classe "TesteRepository" dentro da pasta Models:

        using System.Collections.Generic;

        namespace mvc1.Models
        {
            public class TesteRepository : IRepository
            {
                private static Produto[] produtos = new Produto[] 
                {
                    new Produto{ ProdutoId=10, Nome="Caneta",Categoria="Material", Preco=2.0M},
                    new Produto{ ProdutoId=20, Nome="Borracha",Categoria="Material", Preco=1.5M},
                    new Produto{ ProdutoId=30, Nome="Estojo",Categoria="Material", Preco=3.0M}

                };
                public IEnumerable<Produto> Produtos { get => produtos;}
            }
        }

    . Acesse a classe "Startup.cs" e implemente a linha abaixo:
    
        ...
        using mvc1.Models;

        ...
        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });

            var host = Configuration["DBHOST"] ?? "localhost";
            var port = Configuration["DBPORT"] ?? "3306";
            var password = Configuration["DBPASSWORD"] ?? "numsey";
            
            services.AddDbContext<AppDbContext>(options =>
                options.UseMySql($"server={host};userid=root;pwd={password};"
                    + $"port={port};database=produtosdb"));

            services.AddSingleton<IConfiguration>(Configuration);
            services.AddTransient<IRepository, ProdutoRepository>();    // LINHA ADICIONADA

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }
        ...

    . Altere o "HomeController" como abaixo, Atente para a injeçao de dependência no construtor da classe:

        using System;
        using System.Collections.Generic;
        using System.Diagnostics;
        using System.Linq;
        using System.Threading.Tasks;
        using Microsoft.AspNetCore.Mvc;
        using Microsoft.Extensions.Configuration;
        using mvc1.Models;                          // LINHA INCLUIDA

        namespace mvc1.Controllers
        {
            public class HomeController : Controller
            {
                private IRepository repository;         // LINHA INCLUIDA
                private string message;                 // LINHA INCLUIDA
                public HomeController(IRepository repo, IConfiguration config)  // LINHA ALTERADA
                {
                    repository = repo;                              // LINHA ALTERADA
                    message = config["MESSAGE"] ?? "ASP NET Core MVC - Docker";     // LINHA ALTERADA
                }
                public IActionResult Index()
                {
                    ViewBag.Message = message;              // ADICIONADO MSG e o REPOSITORIO na VIEW
                    return View(repository.Produtos);
                }
            }
        }

    . Altere o código da classe /Views/Home/Index.cshtml pelo abaixo:

        @model IEnumerable<mvc1.Models.Produto>
        @{
            Layout = null;
        }
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width" />
            <title>App</title>
            <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
        </head>
        <body>
            <div class="m-1 p-1">
                <h4 class="bg-primary text-xs-center p-1 text-white">@ViewBag.Message</h4>
                <table class="table table-sm table-striped">
                    <thead>
                        <tr><th>ID</th><th>Nome</th><th>Categoria</th><th>Preco</th></tr>
                    </thead>
                    <tbody>
                        @foreach (var p in Model) {
                            <tr>
                                <td>@p.ProdutoId</td>
                                <td>@p.Nome</td>
                                <td>@p.Categoria</td>
                                <td>$@p.Preco.ToString("F2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </body>
        </html>

    . No prompt do SO digito o comando abaixo:

        dotnet build

        dotnet run

    . Acesse o navegador e execute a URL abaixo:

        https://localhost:5000
        
                
Aula 21. Criar imagem para a aplicação ASP.NET Core MVC
-------------------------------------------------------

    https://www.pluralsight.com/blog/software-development/how-to-build-custom-containers-docker

    . Publicação da aplicação - Acesse a pasta raiz do projeto ASP.NET e execute o comando abaixo:

        dotnet publish --configuration Realease --output dist
                            |                       |
                            |                       +-> Especifica que o projeto compilado será copiado para uma pasta .../dist
                            |
                            +-> Indica que estamos usando o modo Release que é o modo usado na produção

    . Sequência de execução a ser criado no Dockerfile:

        . Definir uma imagem base
        . Defiir infs para a imagem
        . Definir a pasta de trabalho (/app)
        . Copiar os arquivos da pasta dist para uma pasta no container (/app)
        . Expor a porta do container e definir em qual porta o servidor vai atender
        . Definir o ponto de entrada a aplicação.

    . Criar um arquivo Dockerfle na pasta raiz do projeto

        FROM mcr.microsoft.com/dotnet/sdk:5.0
        LABEL version="1.0.1" description="Aplicação ASP.NET Core MVC"
        COPY dist app/
        WORKDIR /app
        EXPOSE 5000
        ENV ASPNETCORE_URLS=http://*:5000
        ENTRYPOINT ["dotnet","mvc1.dll"]

    . Execute o comando abaixo na pasta raiz do projeto

        docker build -t aspnetcoremvc/app1:1.0 .

    . Confira se a imagem foi criada com sucesso:

        docker images

    . Crie o container com o comando abaixo:

        docker container create -p 50:5000 --name mvcprodutos aspnetcoremvc/app1:1.0 

        docker container ps -a

        docker container start mvcprodutos

    . Acesse o navegador e execute a URL abaixo:

        localhost:50


Aula 24. Apresentando Volumes
-----------------------------        

    . Sintaxe para associar uma pasta do host com a pasta do container:

        docker container run -v <pasta_host>:<pasta_container> <imagem>

        -v $(pwd)/teste:/usr/share
             |      |       |
             |      |       +-> pasta do container
             |      +-> pasta do host
             +-> pasta local posicionado (retorna o equivalente ao comando "pwd") 

    . Exemplo

        # Execute o comando abaixo, após o container subir verifique se no host foi criado a pasta "teste".
        # Importante: a pasta "teste" será criada dentro da pasta que foi montado o container
        docker container run -it --name alp1 -v $(pwd)/teste:/usr/share alpine


Aula 25. Criando Volums: Database MySQL.
----------------------------------------

    . Criação de volumes

        # Cria um novo volume que os containeres podem consumir e onde podem armazenar dados
        # Se um nome não for especificado, o Docker vai gerar um nome aleatório
        docker volume create <nome>

        # Neste comando o Docker mostra qual o nome do voluma e o seu driver. 
        # Geralmente é usado o driver local que é o driver padrão do Docker
        docker volume ls

    . Teste de criação de volumes para o bando de dados MySQL

        docker volume create dadosdb

        docker volume ls

        docker image pull mysql:5.7

        # Na saída deste comando vemos a seção volumes que indica que esta imagem usa o
        # volume para o diretório /var/lib/mysql que é o local onde o MySQL armazena os seus arquivos
        docker image inspect mysql:5.7

        docker container run -d --name mysql -v dadosdb:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=brasil2 mysql:5.7

        # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo:
        #
        #   mysql -u root -p
        #
        # Informe a senha "brasil2"
        #
        #       create database macoratti;
        #
        docker container exec -it mysql /bin/bash

        docker container stop mysql
        docker container rm mysql
        docker volume ls

        # Crie novamente um container MySQL, mudando o nome "mysql-1"
        docker container run -d --name mysql-1 -v dadosdb:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=brasil2 mysql:5.7

        # Ao executar o comando abaixo, entraremos na linha de comando do container. Digite o comando abaixo e verifique
        #   se o database "macoratti continua existindo
        #
        #   mysql -u root -p
        #
        # Informe a senha "brasil2"
        #
        #       show databases; 
        #
        docker container exec -it mysql-1 /bin/bash


Aula 26. Ajustar aplicação MVC com EF Core e acessar MySQL
----------------------------------------------------------

    . Incluindo os pacotes para MySQL e o EF Core

        # Provedor de acesso para o MySQL
        Pomelo.EntityFrameworkCore.MySql

        # Permite acesso aos comandos "dotnet ef"
        Pomelo.EntityFramworkCore.MySql.Design

        # Permite acessar as ferramentas do console de fetenciados de pacotes
        Microsoft.EntityFrameworkCore.Tools

        dotnet add package <Nome_do_pacote_versao>

    . Para mais informações sobre o framework acesse a URL abaixo:

        https://www.nuget.org/packages/Pomelo.EntityFrameworkCore.MySql/    

    . Acesse a pasta raiz do nosso projeto ASP.NET e execute o comando abaixo:

        # Para verificar que não temos nenhuma referência a package Pomelo
        cat mv1.csproj    

        dotnet add package Pomelo.EntityFrameworkCore.MySql
        dotnet add package Pomelo.EntityFrameworkCore.MySql.Design
        dotnet add package Microsoft.EntityFrameworkCore.Tools

        # Agora o pacote do Pomelo estará incluido
        cat mv1.csproj    

    . Classe de contexto:

        public class AppDbContext: DbContext
        {
            public AppDbContext( DbContextOptions< AppDbContext > options ): base(options){}

            public DbSet<Produto> Produtos {get; set; }
                            |       |
                            |       +-> Tabela produtos
                            +-> Classe Produto
        }                   

        . Uma instância de DbContext representa uma sessão com o banco de dados que pode ser usado para consultar 
            e salvar instâncias de suas entidades em um banco de dados 

        . Define o mapeamento entre entidade Produto da aplicação e a tabela "Produtos" usando a propriedade DbSet<>

    . Classe de repositório:

        public class ProdutoRepository: IRepository
        {
            private AppDbContext context;

            public ProdutoRepository( AppDbContext ctx )
            {
                context = ctx;
            }

            public IEnumerable<Produto> Produtos => context.Produtos;
        }

        . Essa classe vai substituir a classe TesteRepository e vai acessar os dados da tabela "Produtos" mapeada na 
            classe de contexto.

    . Dentro da pasta Models do nosso projeto insira a classe "AppDbContext" com o código abaixo:

        public class AppDbContext: DbContext
        {
            public AppDbContext( DbContextOptions< AppDbContext > options ): base(options){}

            public DbSet<Produto> Produtos {get; set; }
        }                   

    . Dentro da pasta Models do nosso projeto insira a classe "ProdutoRepository" com o código abaixo:

        public class ProdutoRepository: IRepository
        {
            private AppDbContext context;

            public ProdutoRepository( AppDbContext ctx )
            {
                context = ctx;
            }

            public IEnumerable<Produto> Produtos => context.Produtos;
        }

    . Dentro da pasta Models insira a classe "IncluiDadosDB" com o código abaixo:

        using System.Linq;
        using Microsoft.AspNetCore.Builder;
        using Microsoft.EntityFrameworkCore;
        using Microsoft.Extensions.DependencyInjection;

        namespace mvc1.Models
        {
            public static class Populadb
            {
                public static void IncluiDadosDB(IApplicationBuilder app) 
                {
                        IncluiDadosDB(
                            app.ApplicationServices.GetRequiredService<AppDbContext>());
                }
                public static void IncluiDadosDB(AppDbContext context)
                {
                        System.Console.WriteLine("Aplicando Migrations...");
                        context.Database.Migrate();

                        if (!context.Produtos.Any()) 
                        {
                            System.Console.WriteLine("Criando dados...");
                            context.Produtos.AddRange(
                                new Produto("Luvas de goleiro", "Futebol", 25),
                                new Produto("Bola de basquete", "Basquete", 48.95m),
                                new Produto("Bola de Futebol", "Futebol", 19.50m),
                                new Produto("Óculos para natação", "Aquaticos", 34.95m),
                                new Produto("Meias Grandes", "Futebol", 50),
                                new Produto("Calção de banho", "Aquáticos", 16),
                                new Produto("Cesta para quadra", "Basquete", 29.95m)
                            );
                            context.SaveChanges();
                            } else {
                            System.Console.WriteLine("Dados já existem...");
                        }
                }
            }
        }

    . Acrescente essas linhas dentrao do método "ConfigureServices" da classe "Startup":

        ...
        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });

            var host = Configuration["DBHOST"] ?? "localhost";          // ADICIONADO
            var port = Configuration["DBPORT"] ?? "3306";               // ADICIONADO
            var password = Configuration["DBPASSWORD"] ?? "brasil2";    // ADICIONADO
            
            services.AddDbContext<AppDbContext>(options =>                                   // ADICIONADO
                options.UseMySql($"server={host};userid=root;pwd={password};"
                    + $"port={port};database=produtosdb"));

            services.AddSingleton<IConfiguration>(Configuration);
            services.AddTransient<IRepository, ProdutoRepository>();    // LINHA ALTERADA

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
        }
        ...

        public void Configura( ... ){
            ...
            Populadb.IncluiDadosDB(app);
        }

    . Acesse a linha de comandos na pasta raiz do projeto e digito o comando abaixo:

        dotnet ef migrations add Inicial


Aula 27. Criar container MySQL usando imagem base
-------------------------------------------------

    . Crie o volume abaixo para armazenar as infs do nosso container MySQL

        docker volume create --name produtosdata

        docker container run -d --name mysql -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=brasil2 -e bind-address=0.0.0 mysql:5.7

            Parâmetro                           Descrição
            ---------                           ---------
            -d                                  Executa o container em segundo plano
            --name mysql                        Atribui o nome mysql ao container
            -e MYSQL_ROOT_PASSWORD              Variável de ambiente usada para definir a senha
            -e bind-address                     Asegura que o MySQL aceita requisições de todas as interfaces de rede
            -v produtosdata:/var/lib/mysql      Usa um volume chamado produtosdata para fornecer o conteúdo do diretório
                                                /var/lib/mysql do container.
            Mysql:5.7                           Nome da imagem


Aula 28. Atualizar a imagem da aplicação MVC
--------------------------------------------

    . Devido as alterações feitas no projeto, mudando para acessar via EF o MySQL, teremos que publicar novamente nossa aplicação .NET

        dotnet publish --configuration Release --output dist

    . Recriação da imagem com a aplicação atualizada:

        docker build -t produtosmvc/app:2.0 .

    . Para o passo abaixo é necessário que o docker do MySQL esteja rodando

        docker container ps 

        # Caso o container do MySQL não esteja ativo faça a carga como abaixo:
        docker container run -d --name mysql -v produtosdata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=brasil2 -e bind-address=0.0.0 mysql:5.7


Aula 29. Conectando dois containeres - MVC e MySQL
--------------------------------------------------


