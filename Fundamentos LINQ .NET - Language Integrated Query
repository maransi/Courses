Fundamentos LINQ - Language Integrated Query
--------------------------------------------

https://dotnettutorials.net/lesson/introduction-to-linq/

Aula 1 - C# - Introdução ao LINQ
--------------------------------

    . O que é o LINQ?

        . Conjunto de tecnologias com base na integração de recursos de consulta diretamente na 
            linguagem C#.

        . Como as consulta são feitas? Geralmente são expressas como cadeias de caracteres, sem 
            verificação de tipos no tempode compilação ou suporte ao InteliSense.

        . Tem a necessidae de se aprender uma linguagem de consulta, exemplo: SQL.

    . Vantagens:

        . Sintaxe unificada. Independente da fonte de dados que estiver utilizando.

        . Verificação de tipo no tempo de compilação.Suporte ao IntelliSense.

        . Sintaxe unificada. Independente da fonte de dados que esitver utilizando.

    
    . Operações LINQ consistem em 3 operações:

        . Obter a fonte de dados:

            . Banco de Dados
            . XML
            . JSON
            . Objetos em Memória
            . ADO.NET Data Set
            . Entity Framework

        . Criar a consulta

        . Executar a consulta:

            . Execução adiada:

                . A variável armazena apensa os comandos da consulta.

                . A execução real da consulta é adiada até que você itere sobre a variável.

            . Execução imediata:

                . Funções de agregação (Firs, Max, Sum)

                . Para forçar a execução imediata e armazedo na memória, basta utilizar:

                    . ToList()
                    . ToArray()

    . Como sei que posso executar uma consulta LINQ?

        . Implementar a interface genérica IEnumerable<T> ou uma interface derivada. São chamados 
            de "Tipos passiveis de consulta".
                
        
            Baseados em métodos            Sintaxe de expressão de 
                de extensão                  de consulta c#
            --------------------           -----------------------

            Where-------------->+           +<----------from
                                |           |
            First-------------->|           |<----------Where
                                |           |
            Last--------------->|-> LINQ <--|<----------select
                                |           |
            GroupBy------------>|           |<----------group
                                |           |
            OrderBy------------>+           |            | join
                                            |            | in
                                            |<-----------| on
                                            |            | equals  
                                            |
                                            +<----------- order by / descending                                       

Aula 2 - C# LINQ - Criando a primeira consulta
----------------------------------------------

    . Acesse a pasta raiz de projetos e execute a linha abaixo:

        dotnet new console -o FundamentoLINQ -n FundamentoLINQ -f net5.0

    . Acesse a pasta do projeto criado e altere o conteúdo da classe "Program.cs" pelas linhas abaixo:

        ...
        static void Main(string[] args)
        {
            // Fonte de Dados (Datasource)
            var listaProdutos = new List<Produto>()
            {
                new Produto {Id = 9, CategoriaId = 2, Nome = "Geladeira", Status = true, Valor = 10},
                new Produto {Id = 2, CategoriaId = 3, Nome = "Short", Status = true, Valor = 1},
                new Produto {Id = 4, CategoriaId = 1, Nome = "Maquina de lavar", Status = false, Valor = 32},
                new Produto {Id = 3, CategoriaId = 1, Nome = "Video Game", Status = true, Valor = 99},
                new Produto {Id = 6, CategoriaId = 2, Nome = "Arroz", Status = true, Valor = 55},
                new Produto {Id = 8, CategoriaId = 1, Nome = "TV", Status = true, Valor = 45},
                new Produto {Id = 1, CategoriaId = 3, Nome = "Camiseta", Status = true, Valor = 100},
                new Produto {Id = 5, CategoriaId = 1, Nome = "Microondas", Status = true, Valor = 90},
                new Produto {Id = 7, CategoriaId = 2, Nome = "Feijão", Status = true, Valor = 12},
            };

            var listaCategorias = new List<Categoria>(){
                new Categoria(){ Id = 1, Status = true, Nome = "Eletronicos"},
                new Categoria(){ Id = 2, Status = true, Nome = "Alimentos"},
                new Categoria(){ Id = 3, Status = true, Nome = "Vestuario"}
            };

            // Criar Consulta LINQ  (Query)
            var resultado = from produto in listaProdutos
                            select produto;

            // Executar a consulta  (Execution)
            resultado.ToList().ForEach( item => {
                System.Console.WriteLine($"{item.Id} | {item.Nome} | {item.Valor} | {item.CategoriaId}");
            });

        }
        ...

    . Crie a pasta "Model" e as classes abaixo dentro dela:

        namespace FundamentoLINQ.Model
        {

            public class Categoria
            {
                
                public int Id { get; set; }
                public string Nome { get; set; }
                public bool Status { get; set; }
                    

            }
        }    




        namespace FundamentoLINQ.Model
        {

            public class Produto
            {
                public int Id { get; set; }
                public string Nome { get; set; }
                public bool Status { get; set; }
                public decimal Valor { get; set; }
                public int CategoriaId { get; set; }

            }

        }

    . Execute o projeto e veja se saiu o resultado da lista de produtos corretamente.

    . Altere na classe "Program.cs" a chamada LINQ como abaixo:

        ...
        var resultado = from produto in listaProdutos
                        where produto.Valor > 50            // Linha inserida
                        select produto;
        ...

    . Execute o projeto e veja se saiu o resultado da lista de produtos com valores superiores a 50.

    . Importante: Se tivermos somente uma expressão LINQ, conseguiremos itera-la somente com o comando "foreach( var item in resultado){ ... }".
                    Caso queiramos utilizar funções Lambda, como ".ForEach(...)" precisamos fazer com que o resultado seja um List, ou Array. O
                    mais fácil para isso seria acrescenter parenteses na expressão LINQ e fazermos a chamada do método "ToList()".

                ...
                var resultado = (   from produto in listaProdutos
                                    select produto
                                }).ToList();

                resultado.ForEach( item => {
                    System.Console.WriteLine($"{item.Id} | {item.Nome} | {item.Valor} | {item.CategoriaId}");
                });
                ...

            ou, podemos deixar a expressão LINQ intacta e chamar o "ToList()" no momento da iteração:

                ...
                var resultado = from produto in listaProdutos
                                select produto;

                // Executar a consulta
                resultado.ToList().ForEach( item => {
                    System.Console.WriteLine($"{item.Id} | {item.Nome} | {item.Valor} | {item.CategoriaId}");
                });
                ...


        . Caso não queira trabalhar com Lambda, podemos iterar o resultado diretamente num "foreach( var item in resultado){ ... }"

                ...
                var resultado = from produto in listaProdutos
                                where produto.Valor > 50            
                                select produto;

                foreach( var item in resultado ){
                    System.Console.WriteLine($"{item.Id} | {item.Nome} | {item.Valor} | {item.CategoriaId}");
                }


    . Sintaxe LINQ Query:


        from <object> in <datasource>       <--- Initialization     

        where <condition>                   <--- Condition

        select <object>                     <--- Selection


        . Exemplo:

            from id in fonteDados
            { from id in fonteDados |
            join id in fonteDados on expressão equals expressão [ into id ] |
            let id = expressão |
            where condição |
            orderby id1, id2, … [ascending | descending] }
            select expressão | group expressão by chave
            [ into id ]

            . As expressões de consulta devem iniciar com from, depois podem ter um ou mais from, join, let, where ou orderby e 
                deve terminar com select ou group by.

    . Palavras-chaves (cláusulas) de C# para consultas LINQ

        Cláusula	    Descrição
        --------        ---------
        from	        Especifica a fonte de dados e uma variável de série (similar a uma variável de iteração num laço).

        where	        Filtra elementos da fonte de dados baseada em uma ou mais expressões booleanas.

        select	        Faz projeções, permitindo especificar o tipo e o formato dos elementos do resultado da consulta. 
                        Frequentemente usada em conjunto com o recurso de tipos anônimos.

        join	        Junta duas fontes de dados baseado em comparações de igualdade entre dois elementos de comparação 
                        especificados.

        in              Palavra-chave contextual usada numa cláusula join.

        on	            Palavra-chave contextual usada numa cláusula join.

        equals	        Palavra-chave contextual usada numa cláusula join. Observe que se deve usar a palavra-chave equals 
                        ao invés do operador == na comparação da cláusula join.

        group	        Agrupa os resultados de uma consulta de acordo com valores específicos de uma chave.

        by	            Palavra-chave contextual usada numa cláusula group.

        into	        Fornece um identificador para servir de referência para os resultados de uma cláusula de junção (join), 
                        agrupamento (group) ou projeção (select).

        orderby	        Classifica os resultados em ordem ascendente ou descendente.

        ascending	    Palavra-chave contextual usada numa cláusula orderby para determinar a classificação em ordem ascendente, 
                        que é a classificação padrão em caso de omissão.

        descending	    Palavra-chave contextual usada numa cláusula orderby para determinar a classificação em ordem descendente.

        let	            Introduz uma variável para armazenar resultados de expressões intermediárias numa expressão de consulta. 
                        Deste modo, o resultado armazenado na variável pode ser reutilizado na consulta.

https://www.devmedia.com.br/expressoes-de-consulta-linq-net-magazine-78/18217
https://www.devmedia.com.br/linq-e-csharp-efetuando-consultas-com-lambda-expressions/38863



// PAREI AQUI
Aula 3 - C# - LINQ - Where e OrderBy
------------------------------------

    . Altere a expressão LINQ como abaixo:

        ...
        var resultado = from produto in listaProdutos
                        where produto.Nome == "arroz"   // Linha Alterada
                        select produto;
        ...

    . Ao executar o projeto veremos que não trouxe nenhum registro, porque na coleção não existe "arroz"
        e sim "Arroz". Para que possamos considerar ambas, vamos utilizar a expressão "ToLower()".

        ...
        var resultado = from produto in listaProdutos
                        where produto.Nome.ToLower() == "arroz"   // Linha Alterada
                        select produto;
        ...

    . Para selecionar somente os itens que iniciam com a letra "a" o código ficaria:

        ...
        var resultado = from produto in listaProdutos
                        where produto.Nome.ToLower().Substring(0,1) == "a"   // Linha Alterada
                        select produto;
        ...

    . Para selecionar itens de uma coluna "Boolean":

        ...
        var resultado = from produto in listaProdutos
                        where produto.Nome.ToLower().Substring(0,1) == "a" 
                            && produto.Status == true                              // Linha Alterada
                        select produto;
        ...

    . Para ordenar a saída:

        ...
        var resultado = from produto in listaProdutos
                        orderby produto.Id                          // Linha Alterada
                        select produto;
        ...

        ou 

        ...
        var resultado = from produto in listaProdutos
                        orderby produto.Id descending                // Linha Alterada
                        select produto;
        ...

    . Ordenando e filtrando:

        ...
        var resultado = from produto in listaProdutos
                        where produto.Id > 1 && produto.Id < 6      // Linha Alterada
                        orderby produto.Id descending                // Linha Alterada
                        select produto;
        ...

Aula 4 - C# - LINQ - Projetando dados com Select
------------------------------------------------

https://www.youtube.com/watch?v=DlsUG2YRa6g&list=PLelKrgw43Tu2A2hCLMtrrS_Ox6ds-p7jw&index=4