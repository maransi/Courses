Uma visão completa do ASP.NET MVC
---------------------------------

Fundamentos
-----------

Aula 1. Instalação
------------------

    . Como funciona a Web?

        . Para uma aplicação funcionar é necessário o conjunto abaixo:

            . HTTP - Protocolo utilizado para transferência de informações

            . REQUEST - Requisição feita ao servidor

            . RESPONSE - Resposta que o servidor ofrerece em relação a um Requisição

            . POST - Envio de informações

            . GET - Obtenção de informações

        . Os envolvidos nesse ambiente:

            . Client

                . Cliente: O Browser (Menos seguro)

                . Server: Azure, UOL, HOST, ETC. ( Mais seguro )

        . As linguagens:

            . HTML

            . CSS        

            . Javascript

            . ASP.NET

            . C#

            . Razor - Interações C# em um arquivo HTML

    
    . Sequência de eventos num ambiente ASP.NET:

        . Toda comunicação entre o Cliente e o Servidor ocorre através do protocolo HTTP.

        . O cliente faz uma Requisição (REQUEST) ao servidor, por POST ( FORM/URLENCODE ) por exemplo.

        . O servidor faz o processamento, utilizando ASP.NET, C#, RAZOR.

        . O servidor responde (RESPONSE) ao cliente (GET - HTML, CSS, JS) 

    . Padrão MVC

        . O que significa a sigla MVC:

            . Model - Classes, objetos, representação do seu BD

            . View - Html por exemplo.

            . Controllers - Interage com o model para preparar as informações para as views.

        . Normalmente usado para o desenvolvimento de interfaces de usuário que divide uma aplicação em partes (camadas/componentes) interconectadas. 
            Isto é feito para separar representações de informação internas dos modos como a informação é apresentada para e aceita pelo usuário,
            levando ao desenvolvimento paralelo de maneira eficiente.

        . Vantagens

            . Alto desacoplamento

            . Altamente testável

            . Maior organização

            . Boa divisão  de responsabilidades

    . Como funciona o ASP.NET MVC

        . Implementação do padrão MVC sobre o ASP.NET

        . Utiliza toda base do ASP.NET

            . Pipeline

            . Autenticação

            . Acesso a dados 

        . Modelo MVC dentro do ASP.NET:

            . Model - Representado pelas classes C#, exemplo: Produto.cs, Categoria.cs.

            . View - Arquivos CSHTML (RAZOR)

            . Controller
            
                . Classes que herdam de controller

                . Action - Um método do controller que executa algum código e retorna uma view

                . Route - Rotas para alcançar um controller/action via url

        . Sequência de eventos num ambiente ASP.NET MVC

            . O Cliente faz uma requisição HTTP ( HTTP Request );

            . A request passar pelas rotas (Roteamento);

            . O roteamento encontra a rota e instância o controller (Criação do controller);

            . O controller criado é feito a Autenticação/Autorização. Se o cliente não tem direito a rota é retornado uma request
                com statuscode 404.

            . De para (Model Binding). É o processo pelo qual o ASP.NET Core MVC recebe uma solicitação HTTP e "liga" partes dessa solicitação, 
                bem como outras fontes de dados, a entradas (por exemplo, parâmetros) em uma Action do controlador.  
                
                Por exemplo, vamos ver um URL simples: http://www.meusite.com/blog/posts/5

                Sabemos que esse URL está tentando recuperar a postagem do blog com o ID 5 da seção /blog do meusite.com. Mas o ASP.NET não 
                tem como saber quais são as nossas intenções e, portanto, usa a vinculação de modelo para analisar a URL. Por padrão, 
                o ASP.NET Core MVC usa a seguinte rota para mapear URLs de entrada: {controller}/{action}/{id?}
        
            . Execução da Action

            . Execução do resultado (view, file, etc).

            . Http Response.

        . Criando uma aplicação

            . Acesse o Visual Studio

            . Acesse File / New Project 

            . Na tela que abrirá escolha o "framework 4.2"; ASP.NET Web Application; informe o "Name:", "Location: " e o "Solution Name:"; 
                e pressione o botão OK.

            . Na próxima tela  de templates, escolha a opção "MVC"; Na parte de "Change Authentication", escolha "No Authentication"; 
                pressione o botão OK.

            . Ao final da criação, podemos notar que na estrutura do projeto foi criado as pastas: Models, Views e Controllers.

            . Clique com o botão direito sobre a pasta "Models", acione "Add/Class...". Dê o nome de Product.cs.

            . Na classe criada, implemente as propriedades abaixo:

                ...
                public class Product
                {
                    public int Id{ get; set; }
                    public string Title {get; set;}
                }
                ...

            . Acesse a opção "Build/Rebuild Solution"

            . Clique com o botão direito sobre a pasta "Controllers"; Escolha "Add new Controller"; Escolha a opção 
                "MVC5 Controller with views, using Entity framework"; acione o botão "Add".

            . Na tela seguinte informe os parâmetros abaixo:

                Model Class: Product
                Data Context class: "Acesse o botão de +; informe o conteúdo [Nome da aplicação].Models.AppDataContext"; Acione o "Add".

                . Pressione o botão "Add".

            . Dê um "run" na aplicação;

            . No navegador acione a url: localhost:51773/Products e testes a operações de CRUD da página.


Introdução ao ASP.NET
---------------------

Aula 2. Criando o Modelo
------------------------

    . Sobre o Model

        . É o coração do sistema

        . Também chamado de domínio.

        . Se possível de ser criado um projeto web separado

        . Quanto mais puro, melhor.

        . Cada item da sua composição pode ser chamado de entidade (produto, categoria, empregado)

    
    . Criando uma aplicação

        . Acesse o Visual Studio

        . Acesse File / New Project 

        . Na tela que abrirá escolha o "framework 4.2"; ASP.NET Web Application; informe o "Name:" como "BookStore", "Location: " e o "Solution Name:"; 
            e pressione o botão OK.

        . Na próxima tela  de templates, escolha a opção "MVC"; Na parte de "Change Authentication", escolha "No Authentication"; 
            pressione o botão OK.

        . Ao final da criação, podemos notar que na estrutura do projeto foi criado as pastas: Models, Views e Controllers.

        . Clique com o botão direito sobre a pasta "Models", acione "Add/Class...". Dê o nome de Categoria.cs.

        . Clique com o botão direito sobre a pasta "Models", acione "Add/Class...". Dê o nome de Livro.cs.

        . Clique com o botão direito sobre a pasta "Models", acione "Add/Class...". Dê o nome de Autor.cs.

        . Na classe criada, implemente as propriedades abaixo:

            ...
            public class Categoria
            {
                public int Id{ get; set; }
                public string Nome {get; set;}

                public ICollection<Livro> Livros{ get; set; }

                public Categoria()
                {
                    this.Livros = new List<Livro>();
                }
            }
            ...

            . Sempre que tiver uma collection num model faça a inicialização dela dentro do construtor.

            ...
            public class Livro
            {
                public int Id{ get; set; }
                public string Nome {get; set;}
                public string ISBN {get; set;}
                public DateTime DataLancamento {get; set;}

                public int CategoriaId { get; set; }
                public Categoria Categoria{ get; set; }

                public ICollection<Autor> Autores{ get; set; }

                public Livro()
                {
                    this.Autores = new List<Autor>();
                }

            }
            ...


            . Através do CategoriaId será feito o relacionamento com a classe Categoria.


            ...
            public class Autor
            {
                public int Id{ get; set; }
                public string Nome {get; set;}

                public ICollection<Livro> Livros { get; set; }

                public Autor()
                {
                    this.Livros = new List<Livro>();
                }


            }
            ...

            . IMPORTANTE: Quando for implementar as propriedades, se for digitado "prop" + Tab + Tab ocorre o autocomplete 

                            "public int MyProperty { get; set; }"

                          Outra forma de fazer isso seria com o comando "propfull"

                          Para realizar o autocomplete do Constructor digite "ctor"

    . Decorando as entidades

        . Uma entidade pode ser decorada (Required, stringlength, datatype)

        . Isto ger um metada que é utilizado pela view nas validações de formulários e pelo Entity Franework na geração do banco de dados.

        . Data Annotations.


    . Domínios e bancod de dados

        . Frameworks ORM abstraem nossa responsabilidade sobre o banco de dados.

        . Entity Framework é o ORM da Microsoft.

        . Instalado via NuGet
        
        . Precisa apenas de uma classe para trabalhar.


    . Decorando as entidades

        . Acesse a opção de menu "Project / Add Reference"

        . Localize a referência "System.ComponentModel.DataAnnotations"     
        
        . Acesse a classe Categoria e faça o decoration [Key] na propriedade Id que representa a chave da tabela e o [Required], 
            [StringLength] na propriedade Nome.

            ...
            public class Categoria
            {
                [Key]
                public int Id{ get; set; }

                [Required(ErrorMessage = "Campo Obrigatório")]
                [StringLength(30, MinumumLength = 3, ErrorMessage="Tamanho do campo entre 3 a 30 digitos")]
                public string Nome {get; set;}

            ...

    . Classe Livro

        using System;
        using System.Collections.Generic;
        using System.ComponentModel.DataAnnotations;    

        public class Livro
        {
            [Key]            
            public int Id{ get; set; }

            [Required(ErrorMessage = "Campo Obrigatório")]
            [StringLength(30, MinumumLength = 3, ErrorMessage="Tamanho do campo entre 3 a 30 digitos")]
            public string Nome {get; set;}

            [Required(ErrorMessage = "Campo Obrigatório")]
            [StringLength(30, MinumumLength = 3, ErrorMessage="Tamanho do campo entre 3 a 30 digitos")]
            public string ISBN {get; set;}

            [Required(ErrorMessage = "Campo Obrigatório")]
            [DataType(Datatype.Date)]
            public DateTime DataLancamento {get; set;}

            public int CategoriaId { get; set; }
            public Categoria Categoria{ get; set; }

            public ICollection<Autor> Autores{ get; set; }

            public Livro()
            {
                this.Autores = new List<Autor>();
            }

        }
        ...

    . Classe Autor

        ...
        public class Autor
        {
            [Key]
            public int Id{ get; set; }

            [Required(ErrorMessage = "Campo Obrigatório")]
            [StringLength(30, MinumumLength = 3, ErrorMessage="Tamanho do campo entre 3 a 30 digitos")]
            public string Nome {get; set;}

            public ICollection<Livro> Livros { get; set; }

            public Autor()
            {
                this.Livros = new List<Livro>();
            }


        }
        ...


    . Acesse a opção "Build/Rebuild"

    . Com click direito sobre o nó principal do projeto "BookStore", escolha a opção "Manage NuGet Packages...", localize a referência 
        entityframework e faça a instalação.

    . Outra forma de fazer isso é via pacote (dê preferência a essa forma), acesse "View/Other Windows/Package Manager Console", sugirá no rodapé do IDE a aba 
        "Package Manager Console". Acesse essa aba e digite o comando abaixo:

            install-package entityframework

    . Acesse o arquivo "package.config" e verifique as dependências criadas.

    . Acesse o nó principal do projeto "BookStore" com o botão direito, escolha "Add/New Folder..." e nomeie com "Context".

    . Clique com o botão direito sobre a pasta "Context", Escolha "Add/Class" e coloque o nome da classe como "BookStoreDataContext".

    . Acesse a classe "BookStoreDataContext" e implemente o código abaixo:

        ...
        namespace BookStore.Context
        {
            public class BookStoreDataContext : DbContext
            {
                public BookStoreDataContext()
                    :base("BookStoreConnectionString")
                {

                }

                public DbSet<Autor> Autores{ get; set; }
                public DbSet<Categoria> Categorias{ get; set; }
                public DbSet<Livro> Livros{ get; set; }
            }
        }

    . Acesse o arquivo Web.Config e digite o trecho abaixo dentro da tag <configuration>:

        <configuration>
            ...
            <connectionStrings>
                <add name="BookStoreConnectionString" connectionString="Server=.\sqlexpress;Database=bookstore;User ID=sa;Password=sqlexpress;providerName="System.Data.SqlClient"/>
            </connectionStrings>
            ...
        </configuration>            

        . A senha do sa no banco local ficou "Joao3.16"

    . Acione "Build/Clean" e "Build/Rebuild".

    . Acesse "Package Manager Console" no rodapé da IDE e digite o comando abaixo:

        enable-migrations

        . Esse comando criará uma classe "Configuration.cs" dentro da pasta "Migrations".

    . Digite na "Package Manager Console" o comando abaixo:

        add-migration v1

    . Digite também:

        update-database

    . Acesse o SQL Server e verifique se foi criado as classes com sucesso.

    . Reutlizando os models:

        . O domínio é o coração do seu sistema, ele pode ser reutilizado em vários pontos.

        . Manter o domínio separado da aplicação web poder ser uma boa escolha.

        . Evitar uso de pacotes adicionais na criação do domínio.

    Separando o domínio do projeto Web
    ----------------------------------

    . Clique com o botão direito do mouse sobre a solução, escolha "Add/New project", escolha "Windows/Class Library", 
        informe o nome do projeto "BookStore.Domain.

    . Selecione as Classes "Model" (Autor, Categoria, Livro) e mova elas para o projeto "BookStore.Domain".

    . Acesse a classe Livro.cs e elimine tudo que se refere ao decorator "DataAnnotations":


        using System;
        using System.Collections.Generic;
        // using System.ComponentModel.DataAnnotations;     // Eliminar

        namespace BookStore.Domain          // Inclua o Domain no namespace
        {
            public class Livro
            {
                // [Key]                                        // Eliminar
                public int Id{ get; set; }

                // [Required(ErrorMessage = "Campo Obrigatório")]       // Eliminar
                // [StringLength(30, MinumumLength = 3, ErrorMessage="Tamanho do campo entre 3 a 30 digitos")] // Eliminar
                public string Nome {get; set;}

                // [Required(ErrorMessage = "Campo Obrigatório")]       // Eliminar
                // [StringLength(30, MinumumLength = 3, ErrorMessage="Tamanho do campo entre 3 a 30 digitos")] // Eliminar
                public string ISBN {get; set;}

                // [Required(ErrorMessage = "Campo Obrigatório")]       // Eliminar
                // [DataType(Datatype.Date)]                            // Eliminar
                public DateTime DataLancamento {get; set;}

                public int CategoriaId { get; set; }
                public Categoria Categoria{ get; set; }

                public ICollection<Autor> Autores{ get; set; }

                public Livro()
                {
                    this.Autores = new List<Autor>();
                }

            }
        }
        ...

    . Faça o mesmo procedimento acima para as demais classes Model.

    . Acesso o projeto "BookStore" com o clique direito do mouse, selecione a opção "References Manager", vá em "Projects" e escolha o projeto
        "BookStore.Domain".

    . Retorne ao projeto "BookStore", acesse a classe "BookStoreDataContext.cs", faça a importação dos models com "Ctrl + .".

    . Acesse o projeto "BookStore" com o botão direito do mouse, escolha "Add/New Folder" e renomeie ela para "ViewModels".

    . Dê um clique direito sobre a pasta "ViewModels", escolha "Add/Class Diagram", dê o nome a ela de "VincularLivroAutorViewModel".

    . Implemente o código abaixo na classe "VincularLivroAutorViewModel":

        using System.ComponentModel.DataAnnotations;

        namespace BookStore.ViewModels
        {
            public class VincularLivroAutorViewModel
            {
                [Required(ErrorMessage="*")]
                public int AutorId { get; set; }

                [Required(ErrorMessage="*")]
                public int LivroId { get; set; }
            }
        }

    . Acesse o SQL Server e apague o banco de dados "BookStore".

    . Acesse a pasta "Migrations", apague o arquivo com a terminação "*_v1.cs".

    . Acesse o "Package Manager Console" no rodapé e digite os comandos abaixo:

        add-migration v1

        update-database

    . Acesse o SQL Server e veja:

        . A criação da tabela de relacionamento "LivroAutors".

        . As especificações de tamanho de campo, campos requeridos, etc. Observe que agora não existe mais nenhuma definição porque retiramos
            todos os decoration dos models.

    . Acesse o SQL Server e apague o banco de dados "BookStore".
    
    . Acesse a pasta "Migrations", apague o arquivo com a terminação "*_v1.cs".


    Forma diferente de mapear os models para o banco de dados
    ---------------------------------------------------------

    . Acesse o projeto "BookStore" com o botão direito do mouse, escolha "Add/New Folder" e renomeie ela para "Mappings".

    . Dê um clique direito sobre a pasta "Mapping", escolha "Add/Class Diagram", dê o nome a ela de "CategoriaMap".

    . Implemente o código abaixo na classe "CategoriaMap":

        using BookStore.Domain;
        using System.Data.Entity.ModelConfiguration;

        namespace BookStore.Mapping
        {
            public class CategoriaMap : EntityTypeConfiguration<Categoria>
            {
                public CategoriaMap()
                {
                    ToTable("Categoria");

                    HasKey( x => x.Id);
                    Property( x => x.Nome ).HasMaxLength(30).IsRequered();

                    HasMany( x=> x.Livros).WithRequired( x => x.Categoria);
                }
            }
        }

        . Dessa forma podemos ter mais flexibilidade para configurar as nossas classes entity. Verifique as propriedades disponíveis
            nos métodos do "Property()." e "HasMany()."

        
    . Dê um clique direito sobre a pasta "Mapping", escolha "Add/Class Diagram", dê o nome a ela de "AutorMap".

    . Implemente o código abaixo na classe "AutorMap":

        using BookStore.Domain;
        using System.Data.Entity.ModelConfiguration;

        namespace BookStore.Mapping
        {
            public class AutorMap : EntityTypeConfiguration<Autor>
            {

                public AutorMap()
                {
                    ToTable("Autor");

                    HasKey( x => x.Id);
                    Property( x => x.Nome ).HasMaxLength(60).IsRequered();

                    HasMany( x=> x.Livros)
                        .WithMany( x => x.Autores)
                        .Map( x => x.ToTable("LivroAutor"));
                }
            }
        }

    . Dê um clique direito sobre a pasta "Mapping", escolha "Add/Class Diagram", dê o nome a ela de "LivroMap".

    . Implemente o código abaixo na classe "LivroMap":

        using BookStore.Domain;
        using System.Data.Entity.ModelConfiguration;

        namespace BookStore.Mapping
        {
            public class LivroMap : EntityTypeConfiguration<Livro>
            {
                public LivroMap()
                {
                    ToTable("Livro");

                    HasKey( x => x.Id);
                    Property( x => x.Nome ).HasMaxLength(60).IsRequered();
                    Property( x => x.ISBN ).HasMaxLength(32).IsRequered();
                    Property( x => x.DataLancamento ).IsRequered();
                }
            }
        }
        
    . Retorne a classe "BookStoreDataContext" e implemente o método abaixo na classe:

        ...
        protected override void OnModelCreating( DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add( new AutorMap() );
            modelBuilder.Configurations.Add( new CategoriaMap() );
            modelBuilder.Configurations.Add( new LivroMap() );
        }

    . Acesse o "Package Manager Console" no rodapé e digite os comandos abaixo:

        add-migration v1

        update-database

    . Acesse o SQL Server e veja:

        . A criação da tabela de relacionamento "LivroAutor".

        . As especificações de tamanho de campo, campos requeridos, etc. Observe que agora não existe mais nenhuma definição porque retiramos
            todos os decoration dos models.
